<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kerkerj</title>
    <link>https://blog.kerkerj.in/post/</link>
    <description>Recent content in Posts on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Nov 2020 23:24:20 +0800</lastBuildDate>
    
	<atom:link href="https://blog.kerkerj.in/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Setup Slack and Drone Slack Blame</title>
      <link>https://blog.kerkerj.in/2020/11/how-to-setup-slack-and-drone-slack-blame/</link>
      <pubDate>Sun, 22 Nov 2020 23:24:20 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2020/11/how-to-setup-slack-and-drone-slack-blame/</guid>
      <description>&lt;p&gt;Slack now has deprecated legacy tokens, instead, Slack encourages us to create &lt;a href=&#34;https://api.slack.com/apps&#34;&gt;&lt;code&gt;Slack Apps&lt;/code&gt;&lt;/a&gt; to do our job, so I created a note to record how I set up Slack app and use it on &lt;a href=&#34;http://plugins.drone.io/drone-plugins/drone-slack-blame/&#34;&gt;&lt;code&gt;drone-slack-blame&lt;/code&gt;&lt;/a&gt; plugin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use Zap Observer</title>
      <link>https://blog.kerkerj.in/2020/11/use-zap-observer/</link>
      <pubDate>Sun, 22 Nov 2020 23:03:48 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2020/11/use-zap-observer/</guid>
      <description>&lt;p&gt;If you are using &lt;code&gt;zap&lt;/code&gt; as your logging tool, then when you write the tests, you might want to assert the function via the logs. You can use &lt;code&gt;zap/observer&lt;/code&gt; package to make it possible.&lt;/p&gt;

&lt;p&gt;Below is a code piece to demonstrate how it works:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Cloud - ML Study Jam</title>
      <link>https://blog.kerkerj.in/2019/05/google-cloud-ml-study-jam/</link>
      <pubDate>Mon, 20 May 2019 23:23:20 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2019/05/google-cloud-ml-study-jam/</guid>
      <description>&lt;p&gt;參加了 Google Cloud 的 &lt;a href=&#34;https://events.withgoogle.com/ml-study-jam-basic-tw/&#34;&gt;Basic ML Study Jam&lt;/a&gt;，紀錄一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kubectx</title>
      <link>https://blog.kerkerj.in/2019/05/kubectx/</link>
      <pubDate>Mon, 20 May 2019 22:23:45 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2019/05/kubectx/</guid>
      <description>&lt;p&gt;-&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go pprof</title>
      <link>https://blog.kerkerj.in/2018/08/go-pprof/</link>
      <pubDate>Tue, 21 Aug 2018 16:12:37 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2018/08/go-pprof/</guid>
      <description>&lt;p&gt;簡單筆記一下會用到的 pprof 相關指令&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Again</title>
      <link>https://blog.kerkerj.in/2018/05/again/</link>
      <pubDate>Thu, 17 May 2018 23:51:15 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2018/05/again/</guid>
      <description>&lt;p&gt;嗯，我又把 theme 換掉了。還有個原因是裝了最新版的 hugo 後，就 build 不出來了，只好順便換個新的 theme。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[讀書] 工作大解放：這樣做事反而更成功</title>
      <link>https://blog.kerkerj.in/2016/11/%E8%AE%80%E6%9B%B8-%E5%B7%A5%E4%BD%9C%E5%A4%A7%E8%A7%A3%E6%94%BE%E9%80%99%E6%A8%A3%E5%81%9A%E4%BA%8B%E5%8F%8D%E8%80%8C%E6%9B%B4%E6%88%90%E5%8A%9F/</link>
      <pubDate>Mon, 14 Nov 2016 20:36:23 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/11/%E8%AE%80%E6%9B%B8-%E5%B7%A5%E4%BD%9C%E5%A4%A7%E8%A7%A3%E6%94%BE%E9%80%99%E6%A8%A3%E5%81%9A%E4%BA%8B%E5%8F%8D%E8%80%8C%E6%9B%B4%E6%88%90%E5%8A%9F/</guid>
      <description>最近看了一些書，有空就寫點筆記上來&amp;hellip;
ISBN: 978-986-216-605-5
以下記一些片段
 計畫是一種猜測 別當工作狂 （J: work smart） 坐而言不如起而行（真正的重點在於你執行得好不好） 實現夢想完全是自己的責任，當你夠可望，自然就能撥出時間。（J: 不僅只是夢想，別拿時間當藉口） 明確表明立場 使命宣言不是說說而已（J: 莫忘初衷） 你需要的其實比想像少（J: 現階段真的需要這麼多嗎？） 別在進場時就想著怎麼退場（你需要的是實踐承諾的策略而不是退場策略） 擁抱限制、不要貪多 從核心要點做起 忽略初期的細枝末節 不管你規劃的多詳盡，凡事總有出錯的時候 懂得捨去才是關鍵 減少投入反而解決了問題 聚焦於不會改變的事物（專注於永久性的特點 e.g. 沒有人希望程式跑很慢的，一定都是越快越好） 不斷地動手做 有時放棄是對的 不必逞英雄 人類不擅長估計，預估一件大事很難，但預估小事簡單多了，把大事切成許多小事吧 一次只做一個小決定 不要抄襲、避免大眾化 預設拒絕立場 自己先動手做 靈感是會過期的  這本書和 hiroshi 大人借的，應該可以入手一本，覺得前半部比較偏個人、後半部就偏專案產品面，
這本書值得不時拿出來細細品味，不同時間看應該都有不同的感覺。</description>
    </item>
    
    <item>
      <title>goroutine 執行相關討論</title>
      <link>https://blog.kerkerj.in/2016/10/goroutine-%E5%9F%B7%E8%A1%8C%E7%9B%B8%E9%97%9C%E8%A8%8E%E8%AB%96/</link>
      <pubDate>Tue, 25 Oct 2016 12:32:55 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/goroutine-%E5%9F%B7%E8%A1%8C%E7%9B%B8%E9%97%9C%E8%A8%8E%E8%AB%96/</guid>
      <description>幾天前在 Golang Taiwan 的 slack 裡看到了一些關於 goroutine 的討論
有人問了以下程式碼 (from http://blog.mergermarket.it/now-youre-thinking-with-channels/)
package main import &amp;quot;fmt&amp;quot; func main() { channelForInts := make(chan int) go printIntFromChannel(channelForInts) channelForInts &amp;lt;- 5 } func printIntFromChannel(channel chan int) { number := &amp;lt;-channel fmt.Println(&amp;quot;The number is:&amp;quot;, number) }  提到上述程式碼在 goplayground 上測試好幾次都會印出 The number is:5
但他自己在本機跑是怎樣執行都不會出現 5
看到這個問題第一個想到的是 sync.Waitgroup
之前剛開始學 goroutine 的概念時，就在 stackoverflow 上看到有人討論相關的議題
加個 sync.Waitgroup 就可以保證看到 goroutine 執行完後的結果。
而事實上會這樣子的原因 Go Programming Language Specification 有寫
 Program execution begins by initializing the main package and then invoking the function main.</description>
    </item>
    
    <item>
      <title>tld_length 在 Rails session_store 與 HTTP URL 的設定</title>
      <link>https://blog.kerkerj.in/2016/10/tld_length-%E5%9C%A8-rails-session_store-%E8%88%87-http-url-%E7%9A%84%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Thu, 20 Oct 2016 10:47:58 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/tld_length-%E5%9C%A8-rails-session_store-%E8%88%87-http-url-%E7%9A%84%E8%A8%AD%E5%AE%9A/</guid>
      <description>工作上 rails 在每個 stage 的 domain 長度都不太一樣
例如 production 是 example.com，staging 是 kerkerj.staging.example.com
MyApp::Application.config.session_store :redis_session_store, { key: &#39;example_session_token&#39;, domain: :all, tld_length: 4, serializer: :hybrid, redis: { host: &amp;quot;....&amp;quot;, key_prefix: &amp;quot;...&amp;quot;, expire_after: 7.day, } }  相關原始碼: action_dispatch/middleware/cookies.rb
在這裡的 tld_length 就是看你 domain 的 tld 想設定到哪就寫多少
以 kerkerj.staging.example.com 為例，想要 example.com 就是 2，想要 kerkerj.staging.example.com 就是 4
而在 Rails App 裡，在 config.action_dispatch.tld_length (或 ActionDispatch::Http::URL.tld_length ) 設定的 tld_length
在 rails api document 的 #domain 有用法</description>
    </item>
    
    <item>
      <title>Rails initializer 的載入順序</title>
      <link>https://blog.kerkerj.in/2016/10/rails-initializer-%E7%9A%84%E8%BC%89%E5%85%A5%E9%A0%86%E5%BA%8F/</link>
      <pubDate>Thu, 20 Oct 2016 10:39:30 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/rails-initializer-%E7%9A%84%E8%BC%89%E5%85%A5%E9%A0%86%E5%BA%8F/</guid>
      <description>如果 rails app 裡的 initializer 有載入順序的需求的話
可以照著 Ruby On Rails Guide 這篇來設定
 If you have any ordering dependency in your initializers, you can control the load order through naming. Initializer files are loaded in alphabetical order by their path. For example, 01_critical.rb will be loaded before 02_normal.rb.
 檔名加個數字前綴，rails 就會以數字順序來依序載入~</description>
    </item>
    
    <item>
      <title>Use goconvey in projects maganged by gb</title>
      <link>https://blog.kerkerj.in/2016/10/use-goconvey-in-projects-maganged-by-gb/</link>
      <pubDate>Wed, 19 Oct 2016 00:01:04 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/use-goconvey-in-projects-maganged-by-gb/</guid>
      <description>這是前陣子在工作上用到的
有個 golang 的專案，使用了 gb 來管理第三方套件
當時想套 goconvey 進來
但是一直搞不定執行的方式
後來在 github goconvey issue 裡找到了方式
$ cd /to/your/gb_projects $ PROJECT_DIR=`pwd` $ GOPATH=&amp;quot;$PROJECT_DIR/vendor:$PROJECT_DIR&amp;quot; goconvey -packages=1 -port 8899  這樣就會跑 web ui 出來摟
不想跑 web ui 就執行 gb test -v 就可以了&amp;hellip;上面這樣只是單純想跑 web ui 而已 XD</description>
    </item>
    
    <item>
      <title>docker HA proxy</title>
      <link>https://blog.kerkerj.in/2016/10/docker-ha-proxy/</link>
      <pubDate>Tue, 18 Oct 2016 23:36:40 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/docker-ha-proxy/</guid>
      <description>不知道標題該下啥&amp;hellip;
前陣子因為工作需要，需要測試一個 web app 分布在多台機器下的狀況
想說使用 docker 來做這件事，但又懶得弄 nginx 的設定
稍微查了一下發現有 dockercloud/haproxy
我使用的情境是 web app * 3 + ha * 1 + redis * 1
web 使用了兩個 port 7788, 7789
但是不想讓 ha 把流量導去 7788，所以可以設定 EXCLUDE_PORTS
 如此一來，在 docker-compse up 後，就可以透過 http://192.168.99.100:5566/ 來連上了
並且可以透過 docker stats $(docker ps -q) 這個指令來觀察正在執行中的 containers 的基本 metrics~
快速簡單!</description>
    </item>
    
    <item>
      <title>[tool] diff-so-fancy</title>
      <link>https://blog.kerkerj.in/2016/10/tool-diff-so-fancy/</link>
      <pubDate>Tue, 11 Oct 2016 11:10:52 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/tool-diff-so-fancy/</guid>
      <description>現在想到什麼都來 PO 一下 XD
https://github.com/so-fancy/diff-so-fancy
拿來幫你把 git diff 變漂亮的東東
// install $ brew install diff-so-fancy // Setup $ git config --global core.pager &amp;quot;diff-so-fancy | less --tabs=4 -RFX&amp;quot; // make it more fancier $ git config --global color.diff-highlight.oldNormal &amp;quot;red bold&amp;quot; $ git config --global color.diff-highlight.oldHighlight &amp;quot;red bold 52&amp;quot; $ git config --global color.diff-highlight.newNormal &amp;quot;green bold&amp;quot; $ git config --global color.diff-highlight.newHighlight &amp;quot;green bold 22&amp;quot; </description>
    </item>
    
    <item>
      <title>New theme</title>
      <link>https://blog.kerkerj.in/2016/10/new-theme/</link>
      <pubDate>Sun, 09 Oct 2016 00:47:31 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/new-theme/</guid>
      <description>結果過了這麼久的一篇文就是把 theme 換掉了 XD
可能再補個幾篇這一年有紀錄的一些小玩意兒吧 XDD</description>
    </item>
    
    <item>
      <title>Migrating to Hugo from Octopress</title>
      <link>https://blog.kerkerj.in/2015/05/migrating-to-hugo-from-octopress/</link>
      <pubDate>Sun, 03 May 2015 02:14:59 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2015/05/migrating-to-hugo-from-octopress/</guid>
      <description>hugo hugo - 快速又現代的靜態網站產生器
^^^ 這是 spf13 自己說的
繼 spf13-vim 後又一個 spf13 出品的好東西 XD
在靜態網站產生器中最廣為人知的應該就是 Jekyll
以及基於 Jekyll 的 Octopress 了
(關於靜態網站產生器，這篇文章 介紹了六個除了 Jekyll 以外的產生器)
為什麼要用 hugo？ 雖然 Jekyll / Octopress 很紅資源多主題也不少
但是缺點就是要使用它們就必須裝 ruby、裝 gem
有在寫 ruby 的人感覺應該還好
沒在寫 ruby 的光想像就覺得應該會被搞死&amp;hellip; XD
而且覺得文章一多時在編譯的時候好慢&amp;hellip;
用 hugo 的好處就是因為他是用 go 寫的
執行速度飛快，而且只要下載一個 binary 檔案後就可以操作了喲~
基本 hugo 安裝與操作 首先先安裝 hugo (我是用 mac 的 homebrew)
$ brew install hugo  使用 hugo 產生一個新的網站
$ hugo new site /path/to/the/site e.</description>
    </item>
    
    <item>
      <title>Raspberry Pi2 remote webcam</title>
      <link>https://blog.kerkerj.in/2015/04/raspberry-pi2-remote-webcam/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2015/04/raspberry-pi2-remote-webcam/</guid>
      <description>如題~
先假設 pi2 本身的 IP 是 192.168.1.200
首先先進去 server 來更新一下~
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade  再來就裝 motion
他其實是一個 motion detector，不過也可以拿來當作 web cam 用的 streaming server XD
$ sudo apt-get install motion  編輯設定檔 /etc/motion/motion.conf
$ sudo vi /etc/motion/motion.conf  找到以下幾個值，並分別改成下面
daemon = ON webcam_localhost = OFF control_localhost = OFF  webcam_localhost 是 streaming 介面
control_localhost 是設定介面
如果要改預設 port，就找 webcam_port, or control_port
最後設定將 service 啟動
$ sudo vi /etc/default/motion  將 no 改成 yes</description>
    </item>
    
    <item>
      <title>Setup wifi on raspberry pi2</title>
      <link>https://blog.kerkerj.in/2015/04/setup-wifi-on-raspberry-pi2/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2015/04/setup-wifi-on-raspberry-pi2/</guid>
      <description>2021-0527 更新
 先確認自己的 kernal 版本   $ uname -r 5.10.17-v7+   到 http://downloads.fars-robotics.net/ 裡找相對應版本   http://downloads.fars-robotics.net/ wifi-drivers/ 8188eu-drivers/ ... 8188eu-3.18.7-757.tar.gz ... 8188eu-4.1.15-829.tar.gz .... 8188eu-5.10.17-v7-1414.tar.gz  檔案命名的規則是 8188eu-{$kernal_version}-xxxx.tar.gz
 找到相對應的 kernal 版本後下載下來並解壓   $ wget http://downloads.fars-robotics.net/wifi-drivers/8188eu-drivers/8188eu-5.10.17-v7-1414.tar.gz $ tar xvf 8188eu-5.10.17-v7-1414.tar.gz   執行 install.sh 後重開機應該就有了   $ ./install.sh  若沒有的話，翻翻 http://downloads.fars-robotics.net/ 的資料看有沒有提供解方
 (這是篇筆記)
前陣子從前同事那接手了一塊 raspberry pi2 的板子
想要用 wifi 來連網，於是就買了一個 usb 無線網卡
型號是:
TP-LINK TL-WN725N 150MbpsUSB無線網卡 (pchome連結)</description>
    </item>
    
    <item>
      <title>ithome 鐵人賽 - 規劃</title>
      <link>https://blog.kerkerj.in/2014/11/ithome-%E9%90%B5%E4%BA%BA%E8%B3%BD-%E8%A6%8F%E5%8A%83/</link>
      <pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/11/ithome-%E9%90%B5%E4%BA%BA%E8%B3%BD-%E8%A6%8F%E5%8A%83/</guid>
      <description>半個月前不怕死的報名了 ithome 的連續三十天不中斷發文鐵人賽，
還報名了兩個主題，真的是太誇張了&amp;hellip;
但是由於 ithome 的編輯器其實排版起來沒有很漂亮，
因此決定利用這邊先發文，再轉文到 ithome 的方式來處理，
比較順手一些，順便在這篇文章貼上規劃方向，topic 可能隨時會變，但大方向不變
第一次寫的主題都幾乎不是自己專精的技術，
規劃表如下： (Evernote 連結)
https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg
因此若有錯誤也請有看到的大大們多多幫忙指正囉！
有時候會因為比較忙，可能文章比較精簡一些，還請大家多多包涵 :P
有任何文章更新也會同步在此篇文章中!
##RESTful API Service: Day1 - [API-d1] - 定義 1 - 什麼是 REST/RESTful?
Day2 - [API-d2] - 定義 2 - RESTful 的優點與要求
Day3 - [API-d3] - 使用時機與實際 API 參考
Day4 - [API-d4] - 使用技術與工具介紹及原因
Day5 - [API-d5] - [Server 番外篇] 建立自己的本機虛擬伺服器 1 - Vagrant + VirtualBox 安裝
Day6 - [API-d6] - [Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.</description>
    </item>
    
    <item>
      <title>[API-d30] - 總結</title>
      <link>https://blog.kerkerj.in/2014/10/api-d30-%E7%B8%BD%E7%B5%90/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d30-%E7%B8%BD%E7%B5%90/</guid>
      <description>總結三十天下來的 Restful API service 建置
其實接觸到的東西很廣泛
從 server 端到程式端，還有虛擬機器的使用都有沾到邊
其實不管是哪個領域都是要一點一滴累積起來的
以這次的開發技術來說，
vagrant 方便在於我在和別人共享 server 環境時非常方便
自己在架測試環境時也可以先將乾淨的 web serser 打包起來
供日後隨時要用時開起來馬上 deploy 就可以使用
另外加上方便的網路設定，
在測試時非常方便
另外則是 nodejs，
這次會選擇 nodejs 主要也是想進入 javascript 的世界
nodejs 若作為一個後端程式語言來說，我認為是非常輕量且入門非常簡單
套一句最近常聽到的話
javascript is everywhere
不管是網頁前後端，nodejs 還可以拿來寫桌面應用、嵌入式系統
應用領域非常廣泛
也希望這門語言能夠更標準化，擺脫歷史包袱
看最近幾年的發展，其實我認為是勢在必行的
只缺一個領頭羊來帶領大家前往偉大的航道了! XD
希望三十天的分享能給大家帶來不一樣的感受~
對了突然想到一件事，這個主題的副標最後一句是想要和 APP 結合
APP 在隔壁棚啦 XD</description>
    </item>
    
    <item>
      <title>[Swift-d30] - 總結</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d30-%E7%B8%BD%E7%B5%90/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d30-%E7%B8%BD%E7%B5%90/</guid>
      <description>30 天下來其實中間受到不少人幫忙
因為第一次寫 iOS 程式，對於 iOS 的基本運作流程還是詢問了不少同事
包含在隔壁棚用 Cocos2d 寫 2D 遊戲的 Andy
還有同事 Henry 和 Felix 都給予了很大的幫忙
最後這隻小 app 其實 code 的品質並沒有很好
主要還是因為寫來 demo 用的，以及老實講也沒什麼時間寫&amp;hellip;
報兩個組別真的是很鐵人哪
還看到隔壁棚一次報三四個主題的大大
真是太厲害了
假設明年還會參賽的話，應該還是會以單一技術來鑽研吧!
Swift 有蠻多特性是 Objective-C 所沒有的
如果有想在新專案嘗試的話
最好還是先多看看網路上的比較
避免踩到雷
像有一點是我們同事曾經踩到的雷
就是 NSDictionary V.S. Dictionary
兩者的速度可以差到 5, 6 倍以上
網路上搜尋也會發現有人在討論 Swift Dictionary 的效能差異
若要在新專案使用還是要查詢一下避免掉一些問題
另外還有就是 Swift on Xcode 的穩定度還是有待加強&amp;hellip;
總而言之, 30 天結束了，ya!</description>
    </item>
    
    <item>
      <title>[API-d29] - 實戰開發 - 發佈 - nginx</title>
      <link>https://blog.kerkerj.in/2014/10/api-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-nginx/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-nginx/</guid>
      <description>接下來這篇就會比較偏 server 設定了！
nginx 是一套伺服器軟體，和 apache 並駕齊驅
(其實我覺得 nginx &amp;gt;&amp;gt;&amp;gt; apache XD)
主要是 nginx 清量快速
我們要拿他幫 nodejs 處理接收 request 的部分，再將 request 導往 nodejs
所以感覺就會如下圖:
可以讓 nginx 當作是 load balancer,
透過 reverse proxy 的方式轉發 request 給 nodejs, 讓 nginx 承受流量
這就是我們今天要做的事情，
所以首先，我們就要先裝 nginx，因此就先進虛擬機吧!
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y $ sudo apt-get install nginx  這樣就會安裝一個 nginx 了!
Nginx 的設定檔都是放在 /etc/nginx/ 底下
個別網站的設定放在 /etc/nginx/sites-available
如果要讓該網站上線，則會將 /etc/nginx/sites-available 的設定檔 link 到 /etc/nginx/sites-enable</description>
    </item>
    
    <item>
      <title>[Swift-d29] - 實戰開發 - TODOList - API 4 刪除</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-4-%E5%88%AA%E9%99%A4/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-4-%E5%88%AA%E9%99%A4/</guid>
      <description>Github link
今天要處理刪除
其實超簡單的
只是想偷懶一下 XD
一樣將下列程式碼新增到 RestApi class:
func deleteTodoList(completionHandler: ((NSDictionary!, NSError!) -&amp;gt; Void)!, todoId: String) { var session = NSURLSession.sharedSession() var request = NSMutableURLRequest(URL: NSURL(string: &amp;quot;http://192.168.1.158:3000/user/kerkerj/todos/\(todoId)&amp;quot;)!) request.HTTPMethod = &amp;quot;DELETE&amp;quot; var err: NSError? request.addValue(&amp;quot;application/json&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;) request.addValue(self.API_key, forHTTPHeaderField: &amp;quot;API-Key&amp;quot;) let task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -&amp;gt; Void in if (error != nil) { return completionHandler(nil, error) } var error: NSError? let json = NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers, error: &amp;amp;error) as NSDictionary println(json) if (error !</description>
    </item>
    
    <item>
      <title>[API-d28] - 實戰開發 - 發佈 - forever</title>
      <link>https://blog.kerkerj.in/2014/10/api-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-forever/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-forever/</guid>
      <description>Github 參考
接下來兩天要講 deploy 的部分
由於 deploy 的 script 其實非常的麻煩，因此我們就不提 deploy 的 script 了
我們只專注在 server 上需要什麼東西
今天要來看看 forever 這個套件
這個套件可以幫助 nodejs 的 server 遇上無預警的 server 掛掉時
會幫你自動重新啟動 nodejs 的 server
也就是說
假設說 nodejs 寫的 server 某個 route 有問題，
送 request 後會因為某些因素造成 server error 造成程式碼 crash 時
forever 的 monitor 會偵測到，並幫你自動重啟 server
至少不會造成其他正常存取 server 的使用者遭遇到 server down 的問題
這個套件可以選擇裝在 global 或是 project
在這邊我是選擇裝成 global
進到虛擬機
$ npm install -g forever  p.</description>
    </item>
    
    <item>
      <title>[Swift-d28] - 實戰開發 - TODOList - API 3 新增與更新</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-3-%E6%96%B0%E5%A2%9E%E8%88%87%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-3-%E6%96%B0%E5%A2%9E%E8%88%87%E6%9B%B4%E6%96%B0/</guid>
      <description>Github link
昨天做了 get list
今天就來做 新增和儲存吧!
可能有人會問說，那讀取一筆 todo 的 API 呢?
因為在這邊資料量少，所有的東西都可以從最外層的 list 拿到
所以雖然有換頁的動作，但是節省流量可以不需要實做這件事
在實際開發中也會如此，case by case，有些情況一次拿完回來處理最好
不過有些則不是~
離題了，
以下是新增 todo 的程式碼:
先到 RestApi.swift 新增 post function
func addTodoList(completionHandler: ((NSDictionary!, NSError!) -&amp;gt; Void)!, content: String) { var session = NSURLSession.sharedSession() var request = NSMutableURLRequest(URL: self.addTodoUrl!) request.HTTPMethod = &amp;quot;POST&amp;quot; var params = [&amp;quot;content&amp;quot;: content] as Dictionary&amp;lt;String, String&amp;gt; var err: NSError? request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &amp;amp;err) request.addValue(&amp;quot;application/json&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;) request.</description>
    </item>
    
    <item>
      <title>[API-d27] - 實戰開發 - log 處理 及 config (db, apikey)</title>
      <link>https://blog.kerkerj.in/2014/10/api-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-log-%E8%99%95%E7%90%86-%E5%8F%8A-config-db-apikey/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-log-%E8%99%95%E7%90%86-%E5%8F%8A-config-db-apikey/</guid>
      <description>Github 參考
log 處理 今天要來談談 log 的處理，
身為一台自走 (?) node.js API server
也應該要記錄一下 request 的 log 呀！
不然哪天出問題了都不知道是哪個 request 把 server 搞掛了!
因此我們就要加入 log 的 middleware
node.js 的 log 套件也蠻多的, 例如 winston
不過我們今天要用的是 log4js
會選擇他其實也只是因為之前寫 java 有用過 log4j
log4js 的設定感覺起來比較相似
所以就使用它了!
再來我們就安裝一下 log4js 吧
$ npm install log4js -save  並在 app.js 中 require 進去
var log4js = require(&#39;log4js&#39;);  接著在 app.js 的前面區段加入以下程式碼:
log4js.configure({ appenders: [ { type: &#39;console&#39; }, //控制台輸出 { type: &#39;file&#39;, //文件輸出 filename: &#39;logs/access.</description>
    </item>
    
    <item>
      <title>[Swift-d27] - 實戰開發 - TODOList - API 2 讀取清單資料</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-2-%E8%AE%80%E5%8F%96%E6%B8%85%E5%96%AE%E8%B3%87%E6%96%99/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-2-%E8%AE%80%E5%8F%96%E6%B8%85%E5%96%AE%E8%B3%87%E6%96%99/</guid>
      <description>Github link
(某一天把兩天份的 commit 在一起了忘了開 branch 了&amp;hellip;)
接下來就要來寫 api utility 了
我們先開一個 swift 檔案 RestApi.swift
import Foundation class RestApi { var API_key = &amp;quot;55665566&amp;quot; var getListUrl = NSURL(string: &amp;quot;http://192.168.1.158:3000/user/kerkerj/todos&amp;quot;) }  先做好前置設定，因為 API 有上簡單的小鎖，因此要先寫起來
還有 request 的網址
以下是 get list 的範例:
func getTodoList(completionHandler: ((NSArray!, NSError!) -&amp;gt; Void)!) { var session = NSURLSession.sharedSession() var request = NSMutableURLRequest(URL: self.getListUrl!) request.HTTPMethod = &amp;quot;GET&amp;quot; request.addValue(&amp;quot;application/json&amp;quot;, forHTTPHeaderField: &amp;quot;Content-Type&amp;quot;) request.addValue(self.API_key, forHTTPHeaderField: &amp;quot;API-Key&amp;quot;) let task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -&amp;gt; Void in if (error !</description>
    </item>
    
    <item>
      <title>[API-d26] - 實戰開發 - API-key</title>
      <link>https://blog.kerkerj.in/2014/10/api-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-api-key/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-api-key/</guid>
      <description>Github 參考
假設今天我們的 API 上線了，可能就會面臨到一些問題，
例如說，任何人都可以存取我們的 API
當然我們不希望任何人都可以存取，
因此我們必須加一點驗證機制在裡面，
其中一種做法是使用 Oauth token
在拿 API 資料前，先向 Oauth server 要一個 token
Oauth Server 認可身份後即會核發一個 token 給 client 端
該 token 具有時效性，6 mins ~ 30 min 不等，看怎麼實作
接著 client 端就拿該組 token 以及 API url 對 resources server 丟 request
其實我們現在在做的 API server 就是一個 resources server
因為我們提供資源
而 resources server 就會先認 token，
確保該 token 的時效性以及正確性，以及該 token 可存取的資源範圍
確認無誤後再回送正確的資料
不過在這邊我們並沒有要實作 Oauth Server
單純以一個 resources server 而言，只要認 token 是否正確</description>
    </item>
    
    <item>
      <title>[Swift-d26] - 實戰開發 - TODOList - API 前置資料準備</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-%E5%89%8D%E7%BD%AE%E8%B3%87%E6%96%99%E6%BA%96%E5%82%99/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-api-%E5%89%8D%E7%BD%AE%E8%B3%87%E6%96%99%E6%BA%96%E5%82%99/</guid>
      <description>接下來是要串 隔壁棚的 API XD
從前幾天的 APP 組成
我們所需要的資料大概會是以下幾種:
 GET todo list  GET http://192.168.1.158:3000/user/kerkerj/todos return: [ { &amp;quot;_id&amp;quot;: &amp;quot;54441f64d84f1ea412db855c&amp;quot;, &amp;quot;updated_at&amp;quot;: &amp;quot;2014-10-19T20:30:28.797Z&amp;quot;, &amp;quot;created_at&amp;quot;: &amp;quot;2014-10-19T20:30:28.797Z&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;task11syy&amp;quot;, &amp;quot;user_id&amp;quot;: &amp;quot;kerkerj&amp;quot;, &amp;quot;__v&amp;quot;: 0 }, { &amp;quot;_id&amp;quot;: &amp;quot;54441f6fd84f1ea412db855e&amp;quot;, &amp;quot;updated_at&amp;quot;: &amp;quot;2014-10-19T20:30:39.957Z&amp;quot;, &amp;quot;created_at&amp;quot;: &amp;quot;2014-10-19T20:30:39.957Z&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;task13&amp;quot;, &amp;quot;user_id&amp;quot;: &amp;quot;kerkerj&amp;quot;, &amp;quot;__v&amp;quot;: 0 } ]   Get a todo task  GET http://192.168.1.158:3000/user/kerkerj/todos/54441f64d84f1ea412db855c return: { &amp;quot;_id&amp;quot;: &amp;quot;54441f64d84f1ea412db855c&amp;quot;, &amp;quot;updated_at&amp;quot;: &amp;quot;2014-10-19T20:30:28.797Z&amp;quot;, &amp;quot;created_at&amp;quot;: &amp;quot;2014-10-19T20:30:28.797Z&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;task11syy&amp;quot;, &amp;quot;user_id&amp;quot;: &amp;quot;kerkerj&amp;quot;, &amp;quot;__v&amp;quot;: 0 }   Add a todo task  POST http://192.</description>
    </item>
    
    <item>
      <title>[API-day25] - 實戰開發 - 處理 404 &amp; 500</title>
      <link>https://blog.kerkerj.in/2014/10/api-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%99%95%E7%90%86-404-500/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%99%95%E7%90%86-404-500/</guid>
      <description>Github 參考
不知道大家在用 POSTMAN 對前幾天寫的 API 丟 request 有沒有遇過類似下面的情況:
Cannot GET /user/kerkerj/todoss  通常是丟錯網址時會出現的，或是 code 沒寫好會出現 500 error
這些情況是有辦法接到的，今天我們希望能夠接到後，將 message 轉成 json 格式吐回給 client
因此程式碼如下
app.js
// catch 404 and forward to error handler app.use(function(req, res, next) { var err = new Error(&#39;Not Found&#39;); err.status = 404; res.status(404).jsonp({error: &amp;quot;Not Found&amp;quot;}); next(); }); // catch 500 app.use(function(err, req, res, next) { res.status(err.status || 500).json({error: err.message}); });  基本上這兩段 code 的意思就是加入了兩個 middleware</description>
    </item>
    
    <item>
      <title>[Swift-day25] - 實戰開發 - TODOList - Update View</title>
      <link>https://blog.kerkerj.in/2014/10/swift-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-update-view/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-update-view/</guid>
      <description>Github link
(忘了是放在哪個 branch 了 Orz)
接下來就要進到最後一個 Update View 了!
什麼時候會進到 Update View 呢？
是在顯示單筆 TODO 的時候的右上方按鈕:
我們今天只會實作 view 的部分, fakeData 就不實作了
因為接下來就要直接接 API 啦
也不需要更新 fakeData 了 :P
要加入 Edit 這個按鈕
要到 ShowViewController, 加入 UIBarButtonItem
並且讓其吃到一個方法，可以讓 Navigation 往下一個 View 前進:
var id: String! override func viewDidLoad() { super.viewDidLoad() indexLabel.text = &amp;quot;\(index)&amp;quot; contentLabel.text = content self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: &amp;quot;Edit&amp;quot;, style: UIBarButtonItemStyle.Bordered, target: self, action: Selector(&amp;quot;editTodo&amp;quot;)) }  p.s. 先前忘記加了 id, 現在補回來 XD</description>
    </item>
    
    <item>
      <title>[API-d24] - 實戰開發 - 刪除 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%88%AA%E9%99%A4-todo-task-api-with-mongoose/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%88%AA%E9%99%A4-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
還記得昨天說要偷懶一下嗎 XD
因為刪除真的很簡單!
我們前面走過了新增、修改、讀取了
刪除？哪有什麼困難的呢! XD
直接看 code 吧!
routes/users.js:
// Delete a todo task router.delete(&#39;/:user_id/todos/:todo_id&#39;, function(req, res) { var user_id = req.params.user_id; var todo_id = req.params.todo_id; TODO.remove( { _id: todo_id, user_id: user_id }, function (err) { if (err) { res.status(400).json( { error: &amp;quot;delete data error&amp;quot;} ); } else { res.status(201).json( { success: &amp;quot;true&amp;quot; } ); } } ); });  非常的簡單!
先抓到 user_id, todo_id 後
使用 .remove 的方法，下 WHERE 條件，並在 callback 作處理</description>
    </item>
    
    <item>
      <title>[Swift-d24] - 實戰開發 - TODOList - Create View</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-create-view/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-create-view/</guid>
      <description>Github link
今天要來建立 &amp;ldquo;新增資料&amp;rdquo; 的頁面
不過這個頁面我們也會拿來給 &amp;ldquo;更新資料&amp;rdquo; 的頁面使用
原因其實很簡單
兩邊要建立或編輯的資料是一樣的
差別只在於，當今天是編輯資料的 view call 該頁面時，
該頁面除了顯示編輯框外，編輯框內的文字也會預先 load 好舊的資料了
除此之外兩個 view 的排版一模一樣
所以在這邊我們就只建立一個 UpdateViewController 就可以了
那我們一樣建立一組 UpdateViewController.swift + UpdateViewController.xib
也一樣為元件建立關聯
回到主頁
我們幫 Add 新增一個按鈕吧
在 viewDidLoad 中
self.navigationItem.rightBarButtonItem = UIBarButtonItem(title: &amp;quot;Add&amp;quot;, style: UIBarButtonItemStyle.Done, target: self, action: Selector(&amp;quot;pushToAddTODO&amp;quot;))  設定 Navigation 的右邊鍵的功能
並且根據 pushToAddTODO 的方法做事情
因此繼續下去將 pushToAddTODO 方法做一下
	func pushToAddTODO(){ var addViewController = UpdateViewController(nibName: &amp;quot;UpdateViewController&amp;quot;, bundle: nil) addViewController.from = &amp;quot;add&amp;quot; self.navigationController?.pushViewController(addViewController, animated: true) }  這樣寫完後就可以執行看看了!</description>
    </item>
    
    <item>
      <title>[API-d23] - 實戰開發 - 修改 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E4%BF%AE%E6%94%B9-todo-task-api-with-mongoose/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E4%BF%AE%E6%94%B9-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
接上篇，我們已經可以拿到 todo list 了
也可以拿到特定的 todo task
再來我們就可以編輯特定的 todo task 了對吧?
不囉唆直接進入程式碼
routes/users.js
// Update a todo task router.put(&#39;/:user_id/todos/:todo_id&#39;, function(req, res) { var user_id = req.params.user_id; var todo_id = req.params.todo_id; var data = req.body; TODO.update( { _id: todo_id, user_id: user_id }, { $set: { content: data.content } }, function (err, num, raw, results) { if (err) { res.status(400).json( { error: &amp;quot;update data error&amp;quot; } ); } else { TODO.</description>
    </item>
    
    <item>
      <title>[Swift-d23] - 實戰開發 - TODOList - Show View 2, Delete View</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-show-view-2-delete-view/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-show-view-2-delete-view/</guid>
      <description>Github link
延續昨天，接下來要做換頁
因此我們必須先新建立一個 ShowViewController, 以及他的 xib
接著我們在 xib 拉幾個元件: 兩個 label, 一個用來顯示目前的 index, 另一個則是顯示內容
拉好後，將這兩個元件設定連結到 ShowViewController.swift
另外多在 ShowViewController 中放兩個變數
var index: Int! var content: String!  回到 ViewController, 到 tableView didSelectRowAtIndexPath 中
因為 didSelectRowAtIndexPath 的意思就是當 cell 被選取時要做什麼事情
因此當 cell 被選取時，我們就要讓他跳到下一頁，並且是使用 ShowViewController 來顯示資料
因此修改此方法:
	func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) { var showViewController = ShowViewController(nibName: &amp;quot;ShowViewController&amp;quot;, bundle: nil) showViewController.index = indexPath.row showViewController.content = fakeData[indexPath.row][&amp;quot;content&amp;quot;] // 回復非選取狀態 tableView.deselectRowAtIndexPath(indexPath, animated: true) self.</description>
    </item>
    
    <item>
      <title>[API-d22] - 實戰開發 - 讀取 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%AE%80%E5%8F%96-todo-task-api-with-mongoose/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%AE%80%E5%8F%96-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
如果有使用 MongoDB client 的話就可以搭配使用會比較有感覺
Mac 我是使用 Robomongo，算很好上手~
今天要來實作讀取的部分
讀取有分兩種，一種是讀取 list
另一種是讀取特定某個 todo task，今天兩種都會實作
首先我們先實作 get todo list
因為若要拿到特定的 todo task，需要 todo task 的 id
而我們現在還不曉得 todo task 的 id 是多少，我們只知道 user_id
因此就先從 list 下手
routes/users.js:
// Get todo list router.get(&#39;/:user_id/todos&#39;, function(req, res) { var user_id = req.params.user_id; TODO.find( {user_id: user_id}, function (err, results) { if (err) { res.status(400).json( { error: &amp;quot;can not find data&amp;quot; } ); } else { res.</description>
    </item>
    
    <item>
      <title>[Swift-d22] - 實戰開發 - TODOList - Show View 1</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-show-view-1/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-show-view-1/</guid>
      <description>Github link
接著我們要讓主頁顯示一些假資料:
由於我們未來接的 api 的資料會是 todo_id + content
因此我們先產生一個 dictionary array 來存放我們的假資料
var fakeData = [[String:String]]() fakeData = [ [&amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;A&amp;quot;], [&amp;quot;id&amp;quot;: &amp;quot;2&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;B&amp;quot;], [&amp;quot;id&amp;quot;: &amp;quot;3&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;C&amp;quot;], ]  再來對主頁的 controller 新增 tableView 上去
並且對 UITableView 加入 delegate 以及 datasource
import UIKit class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate { var fakeData = [[String:String]]() var tableView: UITableView? override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib.</description>
    </item>
    
    <item>
      <title>[API-d21] - 實戰開發 - 新增 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E6%96%B0%E5%A2%9E-todo-task-api-with-mongoose/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E6%96%B0%E5%A2%9E-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
昨天我們了解了如何拿 url params 以及 request data
今天我們就來使用他，對資料庫做存取
由於使用到資料庫，因此我們要加入資料庫的 driver
我們用的是 mongoose 套件
app.js:
// 在最上方加入 var mongoose = require(&#39;mongoose&#39;); // 在某個地方連接資料庫 var db_uri = &amp;quot;mongodb://192.168.33.10:27017/TODOs&amp;quot;; mongoose.connect(db_uri);  在這邊我是使用了虛擬機的 DB，因此是 mongodb://192.168.33.10:27017/TODOs
DB 的名稱為 TODOs
這樣在程式一跑起來時，就會連接資料庫了!
再來我們就要設定在對資料庫做 CRUD 時，所需要做的事情
首先我們先要定義 schema，
雖然 mongodb 是 schema-free，但是官方文件也有提到最好還是有固定的 schema 避免記憶體 allocate 時出現問題，而程式撰寫時邏輯也不會因此而過於複雜
這時候我們就需要 model 資料夾了，在 model 資料夾中新增一個 todos.js
裡面要放的就是 todo task 的 schema
內容如下:
models/todos.js:
&#39;use strict&#39;; var mongoose = require(&#39;mongoose&#39;); // Define our todo schema var TODOschema = new mongoose.</description>
    </item>
    
    <item>
      <title>[Swift-d21] - 實戰開發 - TODOList - 前置設定</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-%E5%89%8D%E7%BD%AE%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-todolist-%E5%89%8D%E7%BD%AE%E8%A8%AD%E5%AE%9A/</guid>
      <description>Github link
首先在開始寫這隻 app 前，
我們要先定義好程式大致上的流程
基本上接下來的程式碼都不會用到 storyboard
只會用到程式 + xib
程式的流程大致上是使用 Navigation controller 來控制 view 的轉換
第一頁 - tableView 顯示 todo items list
點進子項目可以觀看內容，進到子頁後可以編輯，
編輯後就即可存檔
新增項目則在主頁的右上角 &amp;ldquo;Add&amp;rdquo; 可以新增
我們會先從建立假的資料開始，也就是我會先刻出程式的流程
先不接 API
實際寫出運作流程後，再加上 API 操作的部分
因此今天的進度就先開一個新專案，將基本的 Navigation + tableView 建立起來吧:
首先建立一個新專案
再來到 project settings
將 Main Interface 及 Launch Screen file 拿掉
並將 deploy target 設成 7.1 (反正用到的程式碼都一樣~ 沒有特別使用 8.0 的 lib)
設定 device orientation - 只限定直的
接著就來編輯 AppDelegate.swift
建立一個 NavigationController + ViewController</description>
    </item>
    
    <item>
      <title>[API-d20] - 實戰開發 - Routes 2, get params and request data</title>
      <link>https://blog.kerkerj.in/2014/10/api-d20-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-routes-2-get-params-and-request-data/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d20-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-routes-2-get-params-and-request-data/</guid>
      <description>Github 參考
接著我們要根據我們開之前寫好的 文件 來開發:
要有下列 routes
TODOs GET /user/{user_id}/todos/ POST /user/{user_id}/todos/ GET /user/{user_id}/todos/{id} PUT /user/{user_id}/todos/{id} DELETE /user/{user_id}/todos/{id}  這樣的需求其實可以用 namespace 實作，不過我們偷懶一點，直接指向 /user 就好
所以在 app.js 加入
var users = require(&#39;./routes/users&#39;); app.use(&#39;/user&#39;, users);  所以會變這樣:
var express = require(&#39;express&#39;); var app = express(); // Set routers var index = require(&#39;./routes/index&#39;); var users = require(&#39;./routes/users&#39;); app.use(&#39;/&#39;, index); app.use(&#39;/user&#39;, users); module.exports = app;  不過看起來我們缺少 routes/users.js，所以我們也來新增一個
routes/users.js 內容如下
&#39;use strict&#39;; var express = require(&#39;express&#39;); var router = express.</description>
    </item>
    
    <item>
      <title>[Swift-d20] - Basic - 捨棄 Storyboard 使用純程式碼 的方式撰寫 ViewController</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d20-basic-%E6%8D%A8%E6%A3%84-storyboard-%E4%BD%BF%E7%94%A8%E7%B4%94%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E7%9A%84%E6%96%B9%E5%BC%8F%E6%92%B0%E5%AF%AB-viewcontroller/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d20-basic-%E6%8D%A8%E6%A3%84-storyboard-%E4%BD%BF%E7%94%A8%E7%B4%94%E7%A8%8B%E5%BC%8F%E7%A2%BC-%E7%9A%84%E6%96%B9%E5%BC%8F%E6%92%B0%E5%AF%AB-viewcontroller/</guid>
      <description>今天專案的 Github link
其實哦
寫 Swift 也有幾個禮拜了
我一直覺得使用 Interface Builder 的確很方便
但是在程式面與視覺面之間的溝通常常會漏東漏西的
比方說如果要設定 reusable identifier 時
除了程式裡面的字串要設定以外，還要再到 storyboard 裡設定同樣的字串
一個簡單的小程式可能不超過 20 個 View 的情況下
還可以這樣做，當程式長得非常大的時候，好像就很難注意到這件事，
而且 View 太多 storyboard 就會開始變慢&amp;hellip;.
因此今天要來試著在 Swift 中
如何不用 Storyboard，來打造我們的程式
(當然 xib/nib 還是會用到，只是我們單純捨棄 storyboard，用程式來控制流程)
首先，一樣先建立一個測試專案
接著我們要動到的程式碼是 AppDelegate.swift:
編輯它:
@UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? var viewController: ViewController? func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool { // Override point for customization after application launch.</description>
    </item>
    
    <item>
      <title>Swift - Push/Pop Views delay</title>
      <link>https://blog.kerkerj.in/2014/10/swift-push-pop-views-delay/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-push-pop-views-delay/</guid>
      <description>請大家先看看下面的小短片，注意一下過場動畫的流暢度
一開始是沒有加過場動畫，後來改程式碼變成有過場動畫

direct link
後來發現給一個預設的 backgroundColor 後就不會發生殘影的問題了
是因為 push 的 view 沒有 backgroundColor
和同事討論後發現:
Apple Developer Reference
UIView 的 backgroundColor 的 default 值是 null!
 Discussion Changes to this property can be animated. The default value is nil, which results in a transparent background color.
 所以是這個原因導致在轉場的時候有殘影
不過切換 View 時 target view 沒有 backgroundColor 的情況應該比較少吧&amp;hellip;(?)
剛好在寫鐵人賽的 app 想先把流程弄出來時遇到了這個雷 XD</description>
    </item>
    
    <item>
      <title>[API-d19] - 實戰開發 - index &amp; route &amp; http status code</title>
      <link>https://blog.kerkerj.in/2014/10/api-d19-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-index-route-http-status-code/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d19-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-index-route-http-status-code/</guid>
      <description>Github 參考
昨天先把專案目錄初始化，裝完該裝的套件後
在 routes 中加入一個 index.js 檔案
&#39;use strict&#39;; var express = require(&#39;express&#39;); var router = express.Router(); router.get(&#39;/&#39;, function(req, res) { res.status(200).json({ greetings: &amp;quot;hello world!&amp;quot;}); }); module.exports = router;  建立一個 app.js 在專案根目錄中:
app.js
var express = require(&#39;express&#39;); var app = express(); var index = require(&#39;./routes/index&#39;); // Set routers app.use(&#39;/&#39;, index); module.exports = app;  然後在 bin 資料夾建立一個 server.js:
bin/server.js:
&#39;use strict&#39;; var debug = require(&#39;debug&#39;)(&#39;TODOAPI&#39;); var app = require(&#39;.</description>
    </item>
    
    <item>
      <title>[Swift-d19] - Basic - 橋接第三方 Objc library - Reachability and Bridge.h</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d19-basic-%E6%A9%8B%E6%8E%A5%E7%AC%AC%E4%B8%89%E6%96%B9-objc-library-reachability-and-bridge.h/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d19-basic-%E6%A9%8B%E6%8E%A5%E7%AC%AC%E4%B8%89%E6%96%B9-objc-library-reachability-and-bridge.h/</guid>
      <description>本日專案的 Github link
由於 Swift 剛推出不到一年
有許多的 third-party library 一定還沒轉換成 Swift
或者是作者沒心力轉會成 Swift
但是有些套件非常方便，那在 Swift 要怎麼使用 Objective-C 的套件呢?
Xcode 有提供橋接的方式，非常好用
接下來就介紹一下如何使用吧!
以下的例子是一個叫做 Reachability 的套件
它可以簡單地幫我們判斷是否有網路連線 3g or wifi 之類的
所以我們先下載這個套件吧!
https://github.com/tonymillion/Reachability
下載解壓縮後
將 .h 和 .m 檔拖曳進 Xcode 專案中
接下來 Xcode 就會問一個非常重要的問題!:
是否要建立橋接的 .h 檔案!
當然是選擇建立囉~
此時的專案結構就會變成這樣:
再來編輯 bridge-header.h 檔
將想要橋接的 objc 套件 import 進去
#import &amp;quot;Reachability.h&amp;quot;  這樣我們就可以在 Swift 中直接使用該套件的類別與方法了!
接下來就讓我們試試看!
在 ViewController 中加入以下程式碼:
// // ViewController.swift // BridgeObjcDemo // // Created by Jerry Huang on 2014/10/18.</description>
    </item>
    
    <item>
      <title>[API-d18] - 實戰開發 - 套件模組</title>
      <link>https://blog.kerkerj.in/2014/10/api-d18-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%A5%97%E4%BB%B6%E6%A8%A1%E7%B5%84/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d18-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%A5%97%E4%BB%B6%E6%A8%A1%E7%B5%84/</guid>
      <description>會使用到的套件: 主體: express - web framework body-parser - parse request body 測試相關: mocha - test framework mocha-mongoose - 用來和 mocha 和 mongoose 中間做介接的套件 superagent - 拿它來丟 http request validator - 用來驗證某個物件是否為某個型別 expect.js - 類似 BDD 的語法，用來寫測試的 debug - debug package DB 相關: mongoose - mongodb orm mongodb - mongodb native driver 開發相關: nodemon - detect file change and restart server 生產環境相關: log4js - 記錄 request log  這是我的 package.json, 可以複製到專案目錄，然後下 npm install</description>
    </item>
    
    <item>
      <title>[Swift-d18] - Basic - Customize TableViewCell</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d18-basic-customize-tableviewcell/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d18-basic-customize-tableviewcell/</guid>
      <description>今天的主題延續昨天的 Navigation + TableView
我們要來客製化 TableViewCell
通常 TableView 可以被拿來做很多事情，不僅只是像是 ListView 而已
而 TableViewCell 可以做更深度的切版，排列元素
因此自定 TableViewCell 是一件算是還蠻重要的事情
下面的 Code 是延續昨天的專案
我先把已更改過的程式碼貼上來:
import UIKit class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate { @IBOutlet var tableView: UITableView! var arr = [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;] override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. } override func didReceiveMemoryWarning() { super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated.</description>
    </item>
    
    <item>
      <title>[API-d17] - 實戰開發 - 專案結構</title>
      <link>https://blog.kerkerj.in/2014/10/api-d17-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%B0%88%E6%A1%88%E7%B5%90%E6%A7%8B/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d17-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%B0%88%E6%A1%88%E7%B5%90%E6%A7%8B/</guid>
      <description>首先我們就在虛擬機的資料夾底下，建立一個專案資料夾吧!
今天會來簡單切割一下我們的專案目錄
建立新專案目錄: $ cd /vagrant/ $ mkdir TODOAPI $ cd TODOAPI $ npm init // 輸入專案資訊 $  建立專案結構 / | - bin/ | - routes/ | - model/ | - node_modules/ | - logs/ | - config/ | - test/ | - app.js | - package.json  分別講解一下各個 folder 的工作:
bin 筆者會在 bin 資料夾底下放一個 server.js
這個 server.js 就是會專門用來啟動一個 app.js instance
routes 基本上如果了解 MVC 架構的話，routes 就是 controller 的意思，其實如果讀者本身夠了解的話，這個資料夾也可以改成 controller 也 ok，應該說，其實資料夾怎麼放都是看個人隨意即可，只是若是要模組化的話，筆者會這樣來處理一個專案結構。</description>
    </item>
    
    <item>
      <title>[Swift-d17] - Basic - Navigation View &#43; TableView</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d17-basic-navigation-view-tableview/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d17-basic-navigation-view-tableview/</guid>
      <description>今天要把 Navigation View 和 Table View 結合起來!
把 NavigationController 拉進 Storyboard
將程式進入點指向 NavigationController
把原本程式自動產生的 UIViewController 刪除
把自動產生的 TableViewController 刪除!
拉一個新的 UIViewController
將 NavigationController 的 RootViewController 指向新的 ViewController
把 TableView 拉進 ViewController
再將 TableViewCell 拉進 TableView
再點選 ViewController, 到右上角中找尋 Custom Class
將 ViewController.swift 指定給該 ViewController
接著把 UITableView 引進程式碼裡做關聯
再來就是實作 Table 的 data 了
class ViewController: UIViewController, UITableViewDataSource {  class ViewController: UIViewController, UITableViewDataSource { @IBOutlet var tableView: UITableView! var arr = [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;] override func viewDidLoad() { super.</description>
    </item>
    
    <item>
      <title>[API-d16] - 實戰開發 - 設定主題及規劃</title>
      <link>https://blog.kerkerj.in/2014/10/api-d16-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%A8%AD%E5%AE%9A%E4%B8%BB%E9%A1%8C%E5%8F%8A%E8%A6%8F%E5%8A%83/</link>
      <pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d16-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%A8%AD%E5%AE%9A%E4%B8%BB%E9%A1%8C%E5%8F%8A%E8%A6%8F%E5%8A%83/</guid>
      <description>接下來我們想要做到的是一個 TODO list 的 RESTful API
並且會先使用 apiary.io 做規劃
實際看看感覺如何
進入網站後，註冊登入後
左上角的 dropdown list 選擇 create new API
產生後下方就會跑出範例文擋
這個網站會透過特定格式的編排自己希望的 API endpoint 及範例回傳值後，產生出一份漂亮的文件
網站中間是模式的選擇
Documentation 是實際讓其他人看的，Editor 則是編輯模式
我們就稍微簡單規劃一下 TODO List 的 RESTful API 吧!
這是我自己規劃的 文件
基本上 route 會長這個樣子:
TODOs GET /user/{user_id}/todos/ POST /user/{user_id}/todos/ GET /user/{user_id}/todos/{id} PUT /user/{user_id}/todos/{id} DELETE /user/{user_id}/todos/{id}  資料格式也都在該文件整理好了
/user/{user_id}/ 只是用來辨識是哪個 user 的 todo task data
在這個小 API 不會琢磨在使用者系統的建立，只會專注在操作 todo task data
我們可以直接透過 PostMan 來丟丟看
我們設定必須要使用 API-key 才能存取 API，比較進階的做法就是使用 Oauth 的方式取得 token 來存取 API</description>
    </item>
    
    <item>
      <title>[Swift-d16] - Basic - Table View 2 換頁 (delegate)</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d16-basic-table-view-2-%E6%8F%9B%E9%A0%81-delegate/</link>
      <pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d16-basic-table-view-2-%E6%8F%9B%E9%A0%81-delegate/</guid>
      <description>昨天我們實際操作了 tableView 的實作，今天要加入換頁
意思就是假設我點了名為 &amp;ldquo;99&amp;rdquo; 的 cell，點擊後會跳轉到另外一頁，同樣顯示 &amp;ldquo;99&amp;rdquo;
所以除了跳頁外，還要加入值的傳遞
首先打開昨天的專案，我們要繼續下去
回到 storyboard 中，昨天我們加入了 dataSource，今天要加入 delegate:
回到程式碼中 ViewController.swift
在 class 的宣告再加上 UITableViewDataSource
class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {  再來就要設計換頁的流程了
回到 storyboard
拉一個新的 ViewController 到空白處
接著點擊左邊的 TableViewCell, 按住 ctrl + 拖曳，拉到剛剛建立的 ViewController 上
選擇 show detail
就會長這樣:
再來新增一個 ViewController
接著讓新的 storyboard viewcontroller 連接到剛剛新增的 DetailViewController 程式碼
記得先點選 ViewController
在 storyboard 的 DetailViewController 中拉一個 label
並且將該 label 連接到 DetailViewController 的程式碼中
因此 DetailViewController 就會變這樣:</description>
    </item>
    
    <item>
      <title>[API-d15] - [Javascript 番外篇] Javascript callback, event</title>
      <link>https://blog.kerkerj.in/2014/10/api-d15-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-callback-event/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d15-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-callback-event/</guid>
      <description>這幾天會探討 javascript 的特性，由於比較少在寫 js ，因此有錯請指正
javascript 有個特性：event
意思就是說，javascript 中，所有的事情都是由事件驅動的
如果說有寫過 web 前端的話，
其實呼叫 button.click function 時
並不會馬上執行 click 裡面的動作
而是加了一個 click 的 listener
等到 button 被 click 後，才會執行 click 裡面的程式碼
所以寫習慣一般 procedure 的程式會有點不太習慣
舉個 procedure 的例子，下面有五件事想要做：
煮飯(); // 10 分鐘 接電話(); // 1 分鐘 吃麵(); // 5 分鐘 丟垃圾(); // 7 分鐘  一般的程式會是照順序執行
也就是 煮飯完 -&amp;gt; 接電話 -&amp;gt; 吃麵 -&amp;gt; 丟垃圾
總執行時間 = 23 分鐘
但是如果把這段 code 丟給 javascript 執行的話</description>
    </item>
    
    <item>
      <title>[Swift-d15] - Basic - Table View 1 直接給值 datasource, (table view scroll)</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d15-basic-table-view-1-%E7%9B%B4%E6%8E%A5%E7%B5%A6%E5%80%BC-datasource-table-view-scroll/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d15-basic-table-view-1-%E7%9B%B4%E6%8E%A5%E7%B5%A6%E5%80%BC-datasource-table-view-scroll/</guid>
      <description>今天要來練習新的東西 - TableView
據同事說明，TableView 是最常用到的 View 之一
在我們的實戰開發中也會用到 TableView
因此今天就先簡單的來建立出單頁純顯示資料的 TableView
TableView 的概念大概是如下圖:
長得有點像 ListView 但是每一行又可以多切開，放一些東西
每一行都稱之為一個 TableViewCell
今天就來要簡單寫一個資料已經預先定義好，並且會顯示在 view 上面的 TableView
要進行下去之前當然就先開一個新的練習專案囉
開啟完專案後，首先第一件事情就是進 storyboard
選擇 TableView 拉進 storyboard 裏
接著再選擇 TableViewCell 拉進 TableView 中
透過此圖，我們了解到可以打開 storyboard 的 tree 來看看它們之間的關係
下面此步驟很重要，資料的連接就靠這條線:
先選取 TableView (可以使用階層樹或是點擊 storyboard)，然後選擇右方的 connection inspector (右上角的最右邊的那一個按鈕)
裡頭有個 dataSource 以及 delegate
我們先按住 dataSource 右邊的空心圓按鈕，拖曳拉到 storyboard 中的 ViewController，如上圖所示
這樣子等等在程式碼中產生的資料才會有和 storyboard 的 UI 做連結
最後一個和 storyboard 相關的操作是將 storyboard 的 TableView 和 程式碼做連結，好方便我們在程式碼中對 storyborad 的 TableView 做操作</description>
    </item>
    
    <item>
      <title>[API-d14] - [Javascript 番外篇] Javascript function scopes 和 closures</title>
      <link>https://blog.kerkerj.in/2014/10/api-d14-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-function-scopes-%E5%92%8C-closures/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d14-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-function-scopes-%E5%92%8C-closures/</guid>
      <description>這幾天會探討 javascript 的特性，由於比較少在寫 js ，因此有錯請指正
Scope 例子:
function hi() { var greetings = &amp;quot;hi&amp;quot;; console.log(&amp;quot;Say: &amp;quot; + greetings); function sayYa(newInput) { greetings = newInput; console.log(&amp;quot;Say: &amp;quot; + greetings); } function sayCool(newInput) { var cool = newInput; console.log(&amp;quot;Say: &amp;quot; + cool); } sayYa(&amp;quot;Yo&amp;quot;); sayCool(&amp;quot;Cool&amp;quot;); console.log(&amp;quot;Say: &amp;quot; + greetings); } hi();  很簡單的概念
greetins 在 sayYa 方法中被覆寫掉了
如果要定義 local 變數必須在 function 裏用 var 定義
例如 sayCool function
Closure 例子:
function person(){ var name = &#39;default&#39;; return { greetings: function() { console.</description>
    </item>
    
    <item>
      <title>[Swift-d14] - Basic - Navigation View 2 &#43; ViewController</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d14-basic-navigation-view-2-viewcontroller/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d14-basic-navigation-view-2-viewcontroller/</guid>
      <description>延續昨天的主題，今天我們要做的事情是：
 爲新的 ViewController 實際加入程式碼 (ViewController2.swift) 加入一個 button 來控制是否前進下一頁或後退  我們先新增一個檔案:
接著選擇 CocoaTouch Class:
回到 storyboard, 選擇第二個 ViewController
並按照下圖，將 Class 指定給 View2Controller
這樣子 storyboard 的 View2 就會指定到 View2Controller 了
我們在 View2Controller 的 viewDidLoad 方法中加入一行程式碼
來驗證他是否有吃到 View2Controller
self.title = &amp;quot;View2 by me&amp;quot;  Run 起來看的話就會是這樣:
的確是有吃到程式碼的
再來就是要加入按鈕了:
我們先拉一個 Button 進 View2Controller
並且將該 Button 拉進 View2Controller 的 code
設定該 button 爲 Action, 並且名稱是 &amp;lsquo;backToView&amp;rsquo;
意即我們要讓點下 View2Controller 的 Button 行為為回到上一個 View
另外對 View2 為他加入一個 storyboard ID, View2，等等會用到:</description>
    </item>
    
    <item>
      <title>[API-d13] - [Javascript 番外篇] Javascript require/ module/ Module Pattern</title>
      <link>https://blog.kerkerj.in/2014/10/api-d13-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-require-module-module-pattern/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d13-javascript-%E7%95%AA%E5%A4%96%E7%AF%87-javascript-require-module-module-pattern/</guid>
      <description>接下來幾天會探討 node.js 的特性，由於比較少在寫 js ，因此有錯請指正
在 node.js 裏，要讀取外部模組都是透過 require 和 exports 來做溝通
以下列出這次最簡單 module 的例子
//hello.js console.log(&#39;Hello World&#39;);  // app.js require(&#39;./hello.js&#39;);  Module 也是有 Pattern 的 第一種: Global (Not so good)
// foo.js foo = function() { console.log(&amp;quot;foo!&amp;quot;); } // app.js require(&#39;./foo.js&#39;); foo();  第二種: export an anonymous function
// foo.js module.exports = function() { console.log(&amp;quot;foo! YA&amp;quot;); }; // app.js var test = require(&amp;quot;./foo.js&amp;quot;); test();  第三種： export a named function</description>
    </item>
    
    <item>
      <title>[Swift-d13] - Basic - Navigation View 1 &#43; ViewController</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d13-basic-navigation-view-1-viewcontroller/</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d13-basic-navigation-view-1-viewcontroller/</guid>
      <description>今天來試著拉拉看 Navigation View
什麼是 Navigation View?
就是類似下圖的東西:
用來控制 View 之間的流程
今天我們繼續使用 storyboard 來簡單拉拉 Navigation View
首先先開一個新 project 吧!
接著我們到 storyboard，選擇 ViewController
再來我們要嵌入 Navigation View
所以要選擇: Edit -&amp;gt; Embed in -&amp;gt; Navigation View
選擇後，就會發現 storyboard 的 layout 改變了
Navigation View 實際上是透過 NavigationController 來控制
原本程式的進入點是 ViewController
由於我們要使用 Navigation View
因此透過 Xcode 將 NavigationController 嵌進去
讓程式進入點變成 NavigationController
再透過 NavigationController 將程式導到 ViewController
接下來我們命名一下 ViewController:
然後我們從右下角的 Object library 選擇 Bar Button items 加入
並將該物件拉到 NavigationBar 的右方</description>
    </item>
    
    <item>
      <title>[API-d12] - MongoDB - Hello World! (Client-side) </title>
      <link>https://blog.kerkerj.in/2014/10/api-d12-mongodb-hello-world-client-side/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d12-mongodb-hello-world-client-side/</guid>
      <description>今天要使用 Node.js 的 mongodb driver 來操作 DB
一樣先開啟虛擬機並且登入吧
會使用到的套件是:
mongodb -&amp;gt; mongodb native driver  或許有人有看過 mongoose -&amp;gt; 官網
算是 MongoDB 的 ORM，我們在這邊如果有時間的話再簡單了解一下，
現在先使用 native driver 來操作
我們在這邊就不裝全域套件了，裝在 API 專案裡面
並且使用 -save 來將相依性寫入 package.json 裏
$ cd /vagrant/API/ $ npm install mongodb -save  從虛擬機回到電腦的資料夾中，在虛擬機資料夾的 API 資料夾中，
今天我們先不和 express 搭配，因此就是純操作 node.js + mongodb module
新增一個 mongoTest.js
我們先來連線到 MongoDB，連線的方式有很多，下面是其中一種方式，
// 先宣告用的到的東西 var MongoClient = require(&#39;mongodb&#39;).MongoClient , Server = require(&#39;mongodb&#39;).Server , options = { auto_reconnection: true, poolSize: 10 }; // Server 設定 var mongoClient = new MongoClient(new Server(&#39;localhost&#39;, 27017, options)); // 開啟連線 mongoClient.</description>
    </item>
    
    <item>
      <title>[Swift-d12] - Basic - 基本元件 (Label, Button, UIColor, 文字輸入框)</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d12-basic-%E5%9F%BA%E6%9C%AC%E5%85%83%E4%BB%B6-label-button-uicolor-%E6%96%87%E5%AD%97%E8%BC%B8%E5%85%A5%E6%A1%86/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d12-basic-%E5%9F%BA%E6%9C%AC%E5%85%83%E4%BB%B6-label-button-uicolor-%E6%96%87%E5%AD%97%E8%BC%B8%E5%85%A5%E6%A1%86/</guid>
      <description>今天來放一些基本的元件:
放入一個文字輸入框、文字標簽、按鈕，
在文字框輸入一些字後，按下按鈕後，會在文字標簽顯示剛剛輸入的內容：
首先使用右下角的 Object library 中將上述三種元件拉到 storyborad 中
圖中依順序是文字標簽、文字輸入框、按鈕
接著我們要使用到的文件是文字標簽以及文字輸入框，另外要將按鈕加入事件
因此程式的流程是:
按下按鈕後-&amp;gt; 執行按鈕事件 -&amp;gt; 抓到文字輸入框的輸入內容 -&amp;gt; 將文字標簽的內容改變成文字輸入框的內容
因此先使用昨天的方式，將文字標簽及文字輸入框拉到 ViewController 中以便使用它們，在圖中的程式碼 12, 13 行：
這樣我們就可以控制文字標簽的文字以及拿到輸入框的文字了
再來就是最重要的按鈕事件了!
一樣使用 ctrl + 拖曳的方式將按鈕拉到程式碼中，但是這次是要選擇 「IBAction」，是事件的意思:
接著就會產生出一段 function:
名為 titleButton, 我們在方法中輸入一行程式碼:
titleLabel.text = titleField.text  意思就是將文字標簽的字改成文字輸入框的文字
接著我們就把程式跑起來吧!
在文字框中輸入文字，按下按鈕，標簽就可以變文字了!</description>
    </item>
    
    <item>
      <title>[API-d11] - MongoDB - Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/api-d11-mongodb-hello-world/</link>
      <pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d11-mongodb-hello-world/</guid>
      <description>今天先講在 Server 中如何操作 MongoDB
一樣開啟虛擬機，
我們在先前已經有先安裝過 MongoDB 了，因此，在 Ubuntu Server 中預設是開機啟動的
登入虛擬機吧~
登入虛擬機後，我們要進入 MongoDB，必須使用 mongo 這個 MongoDB Shell
$ mongo MongoDB shell version: 2.6.4 connecting to: test Welcome to the MongoDB shell. For interactive help, type &amp;quot;help&amp;quot;. For more comprehensive documentation, see http://docs.mongodb.org/ Questions? Try the support group http://groups.google.com/group/mongodb-user &amp;gt;  此時會發現輸入指令的地方變成了 &amp;gt; 表示我們已經在 mongodb 裡面了
為什麼不需要帳號密碼即可進入 MongoDB 呢，因為 MongoDB 預設是不需要做登入的
並且加上預設只能由本機存取，也就是說，外部連入的 IP 是進不了 MongoDB 的
這部分後面會再作說明。
傳統的 Table 在 MongoDB 中，稱之為 Collection</description>
    </item>
    
    <item>
      <title>[Swift-d11] - Basic - Hello World! ViewController</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d11-basic-hello-world-viewcontroller/</link>
      <pubDate>Sat, 11 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d11-basic-hello-world-viewcontroller/</guid>
      <description>今天就要來建立一個 Hello World swift app 啦 XD
首先就是開 Xcode 然後開專案囉~~
就看你要存去哪裡啦～
再來就會進到專案本身:
我們就看右下角有個地方可以找到 Label 這個選項:
把他拉到 Storyboard 的任意位置就可以了~
然後更改 label 的屬性:
先點一下 label 選取後，看右上角
有個地方可以更改它的顯示文字，我們將它改成 HelloWorld!
改完之後，按左上角的 Run! ，我們也可以選擇後面的 target 看是要跑在 i6 或是 i5 上，
按下 Run 後程式就會 deploy 到模擬器上面了！
這就是第一個 Hello World 啦!
完全不用寫程式哦 XDDDDD
不過還是要稍微了解一下運作原理啦~
如果剛剛在編輯 storyboard 的時候，有發現那個 View 的左邊有一個奇怪的箭頭指向 View，那個箭頭的意思其實就是程式進入點的意思，
storyboard 就是在描述程式的走向，像在說故事一樣，從某一頁按了什麼東西跳到哪一頁
其實我一直都沒有很習慣 storyboard 的拉法，還是比較習慣用程式建立物件，將想要的物件用程式擺(憑空想像XD)，但是前面幾個比較屬於練習的小東西都還是會用拉的，比較好懂~
我們剛剛建立的那一頁 Hello world
基本上就是在左邊的 ViewController
那我們試著使用程式來改變 HelloWorld 這個 label 的值吧!
我們首先使用分割視窗的模式
選擇左邊數來第二個按鈕</description>
    </item>
    
    <item>
      <title>[API-d10] - Express - Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/api-d10-express-hello-world/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d10-express-hello-world/</guid>
      <description>Express - Hello World! 今天就要來安裝主角之一的 Express 了!
一樣開啟虛擬機器我應該是可以不用多說了 XD
先確認自己的 node 是不是 NVM 的 node 喲
建立專案 $ cd /vagrant/ $ mkdir API $ cd API/ $ npm init  自己輸入專案的相關內容吧，不知道的就直接按 enter 空白丟給他~
就會產生 package.json 了!
安裝 Express // 在專案目錄底下 (/vagrant/API/) $ npm install express -save  下 -save 的原因是要將 express 加入 package.json 中
離開虛擬機，其實我們也可以在虛擬機資料夾看到剛剛建立的專案了，
現在開始就可以使用自己喜歡的編輯器來開啟這個專案資料夾，我個人偏好使用 Sublime Text
要執行專案時再回終端機即可
Express Hello World! 在 API 資料夾中建立一個 app.js
內容是:
javascript var express = require(&#39;express&#39;); var app = express(); app.</description>
    </item>
    
    <item>
      <title>[Swift-d10] 延伸閱讀</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d10-%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d10-%E5%BB%B6%E4%BC%B8%E9%96%B1%E8%AE%80/</guid>
      <description>今天算一算也來到第十天了，
前面講了 8 天的語法，其實會有些枯燥
不過有些語法又很有趣
我不懂 Objective-C，
如果想從 Objectiv-C 轉換到 Swift 的話，最好查查一些比較的文章
最好的文件就是官方文件了
以 UILabel 為例
官方網站會列出兩種不同寫法:
// SWIFT var text: String? // OBJECTIVE-C @property(nonatomic, copy) NSString *text  如果要從 Swift 基本概念開始，當然是首推官方的 The Swift Programming Language
是英文苦手的話，強國人有 翻譯文件
這群人非常厲害，發表後沒幾天就翻譯完成了
不過因為技術用語還是以中國為主，因此建議英文優先，或是對照著看
前面幾天都基本介紹前半部而已，屬於一般學習程式語言的基本練習而已
後半部是更詳細的部分，有空的話還是可以多看看~
另外，官方還出了一本 Using Swift with Cocoa ad Objective-C
就是在介紹如何使用 Swift 加上 Cocoa framework 開發 App
不過書的內容不多，算入門級，有興趣也可看看這本~
接下來會開始用 Swift 寫簡單的界面
由於筆者從沒寫過 iOS app，因此也是會用大約十天的時間來簡單練習一些常用的 Cocoa Touch framework 的元件
順帶一提前面沒講到的，Objective-C 有個東西叫作 Catagory，在 Swift 裏是 extension</description>
    </item>
    
    <item>
      <title>[API-d9] - NVM 與 NPM 使用</title>
      <link>https://blog.kerkerj.in/2014/10/api-d9-nvm-%E8%88%87-npm-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d9-nvm-%E8%88%87-npm-%E4%BD%BF%E7%94%A8/</guid>
      <description>NVM 與 NPM 使用 NVM - Node.js Version Manager 安裝 如果是 Ubuntu 的話必須先要有 build-essential 和 libssl-dev 套件
不過這個我們之前就裝過了，所以直接安裝 NVM 吧~
$ curl https://raw.githubusercontent.com/creationix/nvm/v0.17.2/install.sh | bash $ source ~/.bashrc  使用 NVM 安裝 node.js 先前我們有使用 Ubuntu 本身的 apt-get 安裝 Node.js
不過那是被安裝到 /usr/bin/node
有時候要安裝套件需要 sudo 提供管理者權限
非常麻煩，因此我們使用 NVM 來安裝另一個 Node.js
這個 Node.js 的執行檔就任我們使用，不需要提供管理者權限了
$ nvm install 0.10  nvm 就會安裝 0.10 版本，安裝完後就要使用它：
$ nvm use 0.10  再來我們把 nvm 的 node.js 設定成預設的 node</description>
    </item>
    
    <item>
      <title>[Swift-d9] - Playground - Class, Struct</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d9-playground-class-struct/</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d9-playground-class-struct/</guid>
      <description>Playground - Class, Struct 再來就是要提重點的東西了!
class 和 struct 是用來建構整個程式重要的東西
兩者的差異在於：class 可以繼承其他 class，但是 struct 無法繼承
以下是宣告方式
class SomeClass { //... } struct SomeStruct { //... }  注意，Swift 的 class 和 struct 命名慣例是大寫命名風格 UpperCamelCase
而屬性和方法則是 lowerCamelCase
例如 increaseCount, addTwoInts
舉個例子:
struct Resolution { var width = 0 var height = 0 } class CustomLabel { var resolution = Resolution() var isLabel = true var name: String? }  實體化，就可以改變其中的值了
var someResolution = Resolution() var someLabel = CustomLabel() someResolution.</description>
    </item>
    
    <item>
      <title>[API-d8] - Node.js - Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/api-d8-node.js-hello-world/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d8-node.js-hello-world/</guid>
      <description>Node.js - Hello World! 一樣先開虛擬機哦~
並且開啟終端機連進 server 裡面~
以下是 Node.js 官方網站的 web server 程式範例，我稍作小修改：
var http = require(&#39;http&#39;); http.createServer(function (req, res) { res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;}); res.end(&#39;Hello World\n&#39;); }).listen(1337, &#39;0.0.0.0&#39;); console.log(&#39;Server running at http://0.0.0.0:1337/&#39;);  我們先在虛擬機的資料夾建立一個子資料夾 &amp;lsquo;HelloWorld&amp;rsquo;
在 HelloWorld 資料夾裡面建立一個 app.js
內容如上，存檔。
使用終端機進入 server :
$ vagrant ssh $ cd /vagrant/HelloWorld $ node app.js  到瀏覽器輸入 http://192.168.33.10:1337/
(或者是你的 Vagrantfile 裡面設定的 private IP)
即可看到 Hello World 了！
要關掉 Server 也非常簡單，回到下指令的地方，按下 ctrl + c 即可中斷程式</description>
    </item>
    
    <item>
      <title>[Swift-d8] - Playground - Enumerations</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d8-playground-enumerations/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d8-playground-enumerations/</guid>
      <description>Playground - Enumerations 通常會使用來定義一組相關的值
也是很方便的東西
列舉語法 enum SomeEnumeration { // enumeration definition goes here }  比方說，車子
enum Car { case toyota case benz case BMW }  也可以這樣寫
enum Car { case toyota, benz, BMW }  使用:
var car = Car.benz  和 Switch 的搭配 enum Car { case Toyota, Benz, BMW } var car = Car.Benz switch car { case .Toyota: println(&amp;quot;Toyota&amp;quot;) case .Benz: println(&amp;quot;Benz&amp;quot;) case .BMW: println(&amp;quot;BMW&amp;quot;) }  Associated Values 以 Barcode 來舉例子</description>
    </item>
    
    <item>
      <title>[API-d7] - [Server 番外篇] 建立自己的本機虛擬伺服器 3 - 打包環境</title>
      <link>https://blog.kerkerj.in/2014/10/api-d7-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-3-%E6%89%93%E5%8C%85%E7%92%B0%E5%A2%83/</link>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d7-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-3-%E6%89%93%E5%8C%85%E7%92%B0%E5%A2%83/</guid>
      <description>昨天我們已經把一個全新乾淨的環境架起來了
這時候我們不希望因為日後的操作導致 Server 環境髒掉，又要重灌
因此我們今天就來練習一下如何使用 vagrant 打包環境!
Vagrant 打包 一樣先進入虛擬機資料夾，先確保虛擬機沒有在運作:
$ vagrant status Current machine states: default poweroff (virtualbox) The VM is powered off. To restart the VM, simply run `vagrant up`  如果是 poweroff 的話，就可以進行接下來的動作，如果是其他狀態的話，就先下關機指令囉
$ vagrant package ==&amp;gt; default: Clearing any previously set forwarded ports... ==&amp;gt; default: Exporting VM... ==&amp;gt; default: Compressing package to: /Users/.../ithome/package.box  vagrant 就會在虛擬機器資料夾底下建立一個 package.box
這個檔案就是整個伺服器環境的檔案了!
假設今天想要讓團隊成員使用，只要他們都有 VirtualBox + Vagrant 的話，
就可以依循下面的指令步驟將你所做的 box 匯入並使用：</description>
    </item>
    
    <item>
      <title>[Swift-d7] - Playground - Closures</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d7-playground-closures/</link>
      <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d7-playground-closures/</guid>
      <description>閉包表達式語法：
{ (parameters) -&amp;gt; returnType in statements }  舉個例子:
func multiple(value: Int, multiple: Int -&amp;gt; Int) -&amp;gt; Int { return multiple(value) } multiple(3, { (value) -&amp;gt; Int in value * 3 })  在 multiple function 中需要傳入一個 function
在這邊我們並沒有另外定義，而是直接使用閉包的方式傳入一個 function
這個閉包就符合了上面的定義
根據上下文判斷型別 (Inferring type from context) 承上一個例子，我們可以寫得更簡潔一點
multiple(3, { value in value * 3 })  這是因為 Swift 會根據兩邊的定義來判斷型別，因此可以寫得更簡潔一些
參數名稱縮寫, 運算子函式 直接看例子
func biggerThan0(value: Int, isBigger: Int -&amp;gt; Bool) -&amp;gt; Bool { return isBigger(value) } biggerThan0(-1, { $0 &amp;gt; 0 } )  尾隨閉包 (trailing closures) 通常如果閉包太長的話，可以把閉包接在括號後面：</description>
    </item>
    
    <item>
      <title>[API-d6] - [Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB</title>
      <link>https://blog.kerkerj.in/2014/10/api-d6-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-2-ubuntu-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E8%88%87%E5%AE%89%E8%A3%9D-node.js-mongodb/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d6-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-2-ubuntu-%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E8%88%87%E5%AE%89%E8%A3%9D-node.js-mongodb/</guid>
      <description>[Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB 嗨又到了 Server 時間了!
接下來我們都會做一些指令操作，
如果進一步有興趣的可以 Google 鳥哥的私房菜，
完整的 Linux 操作教學，淺顯易懂，想學習操作 linux OS 的話必看！
今天我們要稍稍整理一下昨天剛安裝完的 Ubuntu 作業系統，以及安裝一些我們需要用到的東西
首先我們的第一步就是先開啟終端機，到昨天放 Vagrantfile 的資料夾:
$ cd ~/ithome/  開啟 Ubuntu
$ vagrant up  順帶一提，有時候開機時可能會卡在一個地方：
default: Warning: Connection timeout. Retrying... default: Warning: Connection timeout. Retrying... default: Warning: Connection timeout. Retrying...  這個就稍微等一下吧~ 如果電腦性能比較差的話可能會卡比較久，不過應該不至於會卡超過 10 分鐘
如果卡超過十分鐘可能要強制中斷，並且尋找解決辦法了～
開機完成後就登入吧!
$ vagrant ssh ... vagrant@vagrant-ubuntu-trusty-64:~$  Ubuntu 套件, 設定時區 今天就要來幫 Ubuntu 安裝一些東西，</description>
    </item>
    
    <item>
      <title>[Swift-d6] - Playground - function</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d6-playground-function/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d6-playground-function/</guid>
      <description>Playground - function 來看看 Swift 各種 function 的寫法吧!
Swift 使用 func 當作宣告的保留字
GOLANG 的 fu&amp;hellip;. XD
寫 Swift 的 function 會很開心
基本的 func say() { println(&amp;quot;Hello!&amp;quot;) }  有一個回傳值的 func say() -&amp;gt; String { return &amp;quot;Hello!&amp;quot; }  有多個回傳值的!!! (就是回傳 Tuple) func say() -&amp;gt; (String, Int) { let greeting = &amp;quot;hello&amp;quot; let times = 5 return (greeting, times) } say()  有參數的 func say(g: String) { println(g) } say(&amp;quot;Hello&amp;quot;)  多個參數</description>
    </item>
    
    <item>
      <title>[API-d5] - [Server 番外篇] 建立自己的本機虛擬伺服器 1 - Vagrant &amp; VirtualBox 安裝</title>
      <link>https://blog.kerkerj.in/2014/10/api-d5-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-1-vagrant-virtualbox-%E5%AE%89%E8%A3%9D/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d5-server-%E7%95%AA%E5%A4%96%E7%AF%87-%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%AC%E6%A9%9F%E8%99%9B%E6%93%AC%E4%BC%BA%E6%9C%8D%E5%99%A8-1-vagrant-virtualbox-%E5%AE%89%E8%A3%9D/</guid>
      <description>VirtualBox 是一套虛擬軟體，可以方便幫助我們在現有的作業系統上
模擬另一個作業系統 (如 linux, Ubuntu, CentOS&amp;hellip;)
在虛擬機器裡面所以的一切變動，都不會影響到現有的作業系統，
非常適合拿來做測試使用
由於現在大部份的 Service 除了架設在 Windows Server 外，最大宗的就是 *nix distribution 了
因此這在這個系列文中，也是一定要教大家如何建立起虛擬測試機器，
來模擬真實 Server 環境中，如何架設自己撰寫的 API Service
VirtualBox 到 VirtualBox 官方網站下載合適的安裝檔案吧!
安裝完成就可以了!
因為我們接下來會使用 Vagrant 這套 commaond line tool 來對 VirtualBox 進行操作
因此只要安裝完 VirtualBox 後就可以不用管他了 XD
Vagrant Vagrant
它可以幫助我們快速的建立一個輕量、可重複使用、並且可以打包起來帶著走的環境
透過編輯一個設定檔，就可以簡單設定該虛擬系統的 *nix 基本設定，如 共享資料夾、網路存取等等，
不需要透過 VirtualBox
通常這套軟體可以應用在團隊開發上：
以網頁開發來說，如果大家的測試環境與版本都不太一樣，例如 apache 或 php 版本不同
有時候會造成團隊溝通的負擔，因此透過 Vagrant 將 server 環境重新建立一套虛擬機器，
並且透過 Vagrant 打包，就可以丟給其他人使用，這樣一來大家的環境都一樣，
就可以避免這個問題，
而且還有一點，Server 的安裝是很累人的，同樣的事情基本上都不會想做第二遍，
因此打包一個乾淨的環境後備份，弄髒了可以隨時快速再把備份拿出來用，非常方便！
安裝: 到 下載頁面 尋找適合自己的下載並且安裝</description>
    </item>
    
    <item>
      <title>[Swift-d5] - Playground - Array, Dictionary, Controll Flow</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d5-playground-array-dictionary-controll-flow/</link>
      <pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d5-playground-array-dictionary-controll-flow/</guid>
      <description>Array 宣告 // var VARIABLE_NAME: [TYPE] = ..... var fruits: [String] = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;] var nums: [Int] = [1, 2] // 或是讓 Swift 自行判斷類型: var fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;] var nums = [1, 2] // 初始化: var cars = [String]()  ps. Beta 版時的寫法是 var fruits: String[]
現在已經變成了 var fruits: [String]
操作 // 判斷該陣列是否有值，回傳 true 或 false fruits.isEmpty // 增加元素 fruits.append(&amp;quot;watermelon&amp;quot;) fruits += [&amp;quot;lemon&amp;quot;] // 取值 fruits[0] fruits[0...2] // 刪除值 - 將 apple 移除，banana 會自動補上 fruits.</description>
    </item>
    
    <item>
      <title>[API-d4] - 使用技術與工具介紹及原因</title>
      <link>https://blog.kerkerj.in/2014/10/api-d4-%E4%BD%BF%E7%94%A8%E6%8A%80%E8%A1%93%E8%88%87%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9%E5%8F%8A%E5%8E%9F%E5%9B%A0/</link>
      <pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d4-%E4%BD%BF%E7%94%A8%E6%8A%80%E8%A1%93%E8%88%87%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9%E5%8F%8A%E5%8E%9F%E5%9B%A0/</guid>
      <description>使用技術與工具介紹及原因 終於要開始進入正題了！
在了解 REST/RESTful 後，
就要從無到有 - 從 Server 到 API endpoint 都由自己打造
今天會先來說明接下來會使用到哪些工具及技術
由於筆者使用 Mac ，因此若是有其他平台的使用者可能需要自行找教學
Server - Ubuntu with Vagrant + VitrualBox 接下來幾天會先從這個部分開始提起
我們會使用 VirtualBox + Vagrant 的方式來建立自己的虛擬環境
避免一些讀者可能對 Server command line 不熟
這個部分是大家可以跳過的部分，但是我還是會從無到有架起來
Backend Language - Node.js 後端語言使用了 Node.js，其實本來有考慮使用 Golang，
但顧及自己的時間&amp;hellip; 還是使用 Node.js，方便快速
這幾年是 Javascript 的時代，
優勝美地似乎也可以支援使用 Javascript 撰寫 Automation Tool
從前端打到後端甚至到 DB 都可以使用到 Javascript ，
是該來看看 Javascript 的語法特性了 :D
而且 Node.js Event-driven 的特性，可以利用少少的資源提供高效能的服務
同時搭配易用性及社群活躍度，這是我選擇 Node.js 而非選擇 Golang 的原因</description>
    </item>
    
    <item>
      <title>[Swift-d4] - Playground - Optional, ! and ? </title>
      <link>https://blog.kerkerj.in/2014/10/swift-d4-playground-optional-and/</link>
      <pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d4-playground-optional-and/</guid>
      <description>Playground - Optional, ! and ? 今天要來探討 Optional 型別，我認為這塊是初學 Swift 常遇到的問題
大家搞不懂 &amp;ldquo;!&amp;rdquo; &amp;ldquo;?&amp;rdquo; 到底在幹什麼，所以今天就來了解一下
在 Swift 中，所有的資料型別都不能賦予 nil
也就是以下這件事是不成立的：
var x: String = &amp;quot;test&amp;quot; x = nil  所以在 Swift 底下，就要使用 Optional 來處理值可能不存在的情況
當一個變數 x 被宣告成 Optional 型別時，該變數就會有兩個情況：
1. 有值，等於 x 2. 沒有值  要宣告一個變數可能為 nil 時的方式是使用問號 &amp;lsquo;?&amp;lsquo;：
// 此時 x = &amp;quot;yaya&amp;quot; var x: String? = &amp;quot;yaya&amp;quot; // 此時 x 沒有值 x = nil  拿以下程式在 Playground 執行看看：</description>
    </item>
    
    <item>
      <title>[API-d3] - 使用時機與實際 API 參考</title>
      <link>https://blog.kerkerj.in/2014/10/api-d3-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F%E8%88%87%E5%AF%A6%E9%9A%9B-api-%E5%8F%83%E8%80%83/</link>
      <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d3-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F%E8%88%87%E5%AF%A6%E9%9A%9B-api-%E5%8F%83%E8%80%83/</guid>
      <description>使用時機與實際 API 參考 什麼時候需要打造 RESTful API?
看看別人的 RESTful API (Instagram/Twitter)
什麼時候需要打造 RESTful API?
我認為當有數組資源要被多種不同平台使用時，就需要打造 RESTful API
例如，有 Android/ iOS / Web 要對同一 table 做存取時，
假設有個 MySQL DB，各個平台都使用各自的 mysql-driver 來直接操作 DB
假設有個 A 專案建立了一套書籍管理系統，資料庫裡記錄了大大小小的書籍，
而有個新的 B 專案需要使用到書籍的資料，此時 DB 操作的程式碼只能再寫一遍，
且各個平台重新撰寫，似乎是不大靠譜。
撰寫 RESTful API 的好處之一即是 RESTful 使用 HTTP 協定，
各個平台皆支援，不需要太複雜的程式，只需要使用各個平台的 http-client，
各個平台也不需要了解 DB 操作語法，只需要知道 json, xml 習慣的資料格式，
且開發 API 還能夠對各個資源輕易地上 cache 增進反應速度，
開發 RESTful API 好處多多，哪天想 Open API 也就不需要再多作處理了～
接著讓我們來看看兩個有名網站的 API 吧！</description>
    </item>
    
    <item>
      <title>[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別 </title>
      <link>https://blog.kerkerj.in/2014/10/swift-d3-playground-%E8%AE%8A%E6%95%B8%E8%88%87%E5%B8%B8%E6%95%B8-%E8%A8%BB%E8%A7%A3-%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5/</link>
      <pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d3-playground-%E8%AE%8A%E6%95%B8%E8%88%87%E5%B8%B8%E6%95%B8-%E8%A8%BB%E8%A7%A3-%E5%9F%BA%E6%9C%AC%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5/</guid>
      <description>變數與常數 定義一個變數:
var obj: String = &amp;quot;&amp;quot;  var 是保留字，宣告 obj 是一個變數名稱，冒號後面接資料形態
以此例子來說，宣告了一個字串變數叫做 obj，並且初始化為 &amp;ldquo;&amp;rdquo; 空字串
let obj: String = &amp;quot;&amp;quot;  let 同樣是用來宣告一個變數，但是宣告此變數後，該變數的值無法被改變，
無法被改變的數值其實正正的名字就叫做常數 以上面的例子來說， 若我們多做一件事:
let obj: String = &amp;quot;&amp;quot; obj = &amp;quot;test&amp;quot;  若我們試圖去更改 obj，讓 obj 從空字串變成 &amp;ldquo;test&amp;rdquo; 時，
Xcode 就會報錯，不能更改該值
再來是宣告的變型，其實宣告時不一定要給資料形態，
Swift 會自動從後面的值來判斷 x 可能是什麼資料形態，
只是由於筆者的習慣，會儘量在後面加上該變數的資料型別
var x = &amp;quot;test&amp;quot;  一行內宣告多值：
var x = 0.0, y = 0.0, z = 0.0  我們就可以在 Playground 裡面試著宣告一些變數看看，並且使用昨天的輸出函式來輸出變數:</description>
    </item>
    
    <item>
      <title>[API-d1] - 定義 1 - 什麼是 REST/RESTful?</title>
      <link>https://blog.kerkerj.in/2014/10/api-d1-%E5%AE%9A%E7%BE%A9-1-%E4%BB%80%E9%BA%BC%E6%98%AF-rest-restful/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d1-%E5%AE%9A%E7%BE%A9-1-%E4%BB%80%E9%BA%BC%E6%98%AF-rest-restful/</guid>
      <description>Representational State Transfer，簡稱 REST，
它是一種網路架構風格，他並不是一種標準。
而 RESTful 可以這樣子想像:
美麗 (Beauty) 的事物可以稱為 Beautiful
設計為 REST 的系統就可以稱為 RESTful
以 API 而言，假設我們正在撰寫一組待辦事項的 API，
可能會有以下方式來作為 API 的 interface:
獲取使用者資料 /getAllUsers 獲取使用者資料 /getUser/1 新增使用者資料 /createUser 更新使用者資料 /updateUser/1 刪除使用者資料 /deleteUser/1  若是以 REST 風格來開發 RESTful API 的話:
獲取使用者資料 /GET /users 獲取使用者資料 /GET /user/1 新增使用者資料 /POST /user 更新使用者資料 /PUT /user/1 刪除使用者資料 /DELETE /user/1  兩者差異是在於 RESTful API 充分地使用了 HTTP protocol (GET/POST/PUT/DELETE)，
達到
1. 以直觀簡潔的資源 URI
2. 並且善用 HTTP Verb</description>
    </item>
    
    <item>
      <title>[API-d2] - 定義 2 - RESTful 的優點與要求</title>
      <link>https://blog.kerkerj.in/2014/10/api-d2-%E5%AE%9A%E7%BE%A9-2-restful-%E7%9A%84%E5%84%AA%E9%BB%9E%E8%88%87%E8%A6%81%E6%B1%82/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d2-%E5%AE%9A%E7%BE%A9-2-restful-%E7%9A%84%E5%84%AA%E9%BB%9E%E8%88%87%E8%A6%81%E6%B1%82/</guid>
      <description>承上篇，
RESTful 的優點如下所列:
 1. 瀏覽器即可以作為 client 端 2. 可以更高效地利用 cache 來達到更快的回應速度 3. 界面與資料分離 4. 節省伺服器的計算資源 5. 可重用! web/android/ios 都可以用, 無痛轉換!  RESTful 的要求:
 1. client - server 架構 2. 分層系統 3. 利用快取機制增加效能 server-side: 在 GET 資源時，若該資源並沒有被變更，就可以利用 cache 機制減少 query，並且加快回應速度 client-side: 透過 client 端 cache 記錄 cache 版本， 若向 server 要求資源時發現 server 最新版與 cache 相同， 則 client 端直接取用本地資源即可，不需要再做一次查詢 省機器運算及流量 = 省錢 4. 通訊協定具有無狀態性 不能讓兩隻 API 做同一個動作! 假設完成轉賬手續必須先 call A 再 call B 的話， 若做完 A 後斷線導致 B 無法執行，後續要處理 A -&amp;gt; B 的方式會很麻煩 且不應該假設伺服器知道目前的狀態!</description>
    </item>
    
    <item>
      <title>[Swift-d1] - 介紹</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d1-%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d1-%E4%BB%8B%E7%B4%B9/</guid>
      <description>Swift 是 2014 年由蘋果公司在其開發者大會 WWDC 上所發佈的程式語言
The Swift Programming Language 一書中提到：
 Swift 用來撰寫 iOS 及 Mac OSX 的程式。
 Swift 吸收了 C 和 Objective-C 的優點，使其在設計更具彈性、容易，且撰寫時有更多樂趣。
 Swift 是基於成熟而且倍受喜愛的 Cocoa 和 Cocoa Touch framework，意即 Swift 可以直接使用這些現有的框架
 Swift 兼具編譯語言的性能，以及直譯式語言的特性。
  ** 什麼是 Cocoa/Cocoa Touch framework:
Cocoa framework 是 Apple 爲 Mac OSX 所建立的環境，用來開發 OSX 的程式，
而 Cocoa Touch framework 則是建立於 Cocoa framework 之上，用來開發 iOS 作業系統程式，
此兩種 framework 皆遵循 MVC 軟體架構，開發時必須遵循此架構。</description>
    </item>
    
    <item>
      <title>[Swift-d2] - 安裝及 Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/swift-d2-%E5%AE%89%E8%A3%9D%E5%8F%8A-hello-world/</link>
      <pubDate>Thu, 02 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/swift-d2-%E5%AE%89%E8%A3%9D%E5%8F%8A-hello-world/</guid>
      <description>首先，你必須要有一台 Mac。
我也不知道要如何用虛擬機 build 一台 Mac VM 出來，
所以就是，先買一台 Mac XD
若已經有了 Mac，只要到 Appstore 下載 Xcode 即可，
注意是要 Xcode 6.0 以上， Xcode 6 才有支援 Swift ，舊版的 Xcode 5 是無法開發 Swift 的
安裝完 Xcode 後
首先開啓 Xcode
選擇 &amp;ldquo;Create a playground&amp;rdquo;
輸入 Playground 名稱並選擇儲存位置
就進入了 Playground 了！
可以看到 Xcode 已經預先載入了幾行程式碼了 來稍微看一下:
// Playground - noun: a place where people can play import UIKit var str = &amp;quot;Hello, playground&amp;quot;  第一行，使用了 //，有寫過程式的話一定都知道這是註解</description>
    </item>
    
    <item>
      <title>Codeigniter on nginx</title>
      <link>https://blog.kerkerj.in/2014/09/codeigniter-on-nginx/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/09/codeigniter-on-nginx/</guid>
      <description>I use Ubuntu 14.04, Nginx 1.4.6, php5-fpm, Codeigniter 2.2.0
It will remove index.php, and access Codeigniter site normally.
Clean configuration &amp;ldquo;/etc/nginx/site-enabled/default&amp;rdquo;:
server { #&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; START listen 80; listen [::]:80 default_server ipv6only=on; root /YOUR/PROJECT/ROOT; index index.html index.htm index.php; # Make site accessible from http://localhost/ server_name localhost; #location ~* .(ico|css|js|gif|jpe?g|png)(?[0-9]+)?$ { # expires max; # log_not_found off; #} location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404.</description>
    </item>
    
    <item>
      <title>Event-driven I/O models and Coroutine Notes</title>
      <link>https://blog.kerkerj.in/2014/08/event-driven-i-o-models-and-coroutine-notes/</link>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/event-driven-i-o-models-and-coroutine-notes/</guid>
      <description>Event-driven I/O model 首先，聽到 Event-driven 是從 Node.js 得知，
 Node.js® is a platform built on Chrome&amp;rsquo;s JavaScript runtime for easily building fast, scalable network applications.
Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
 其實剛聽到這詞會有點陌生，我們可以先從 Victor 所寫的文章開始讀起: 淺談coroutine與gevent
裡面提到了幾種網路模型： &amp;gt; 1. 阻塞式單一行程
2. 阻塞式多行程 3. 阻塞式多行程多執行序 4. 非阻塞式事件驅動 5. 非阻塞式 coroutine
以下是各語言 event-driven 的 model</description>
    </item>
    
    <item>
      <title>Add tracked file to .gitignore</title>
      <link>https://blog.kerkerj.in/2014/08/add-tracked-file-to-.gitignore/</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/add-tracked-file-to-.gitignore/</guid>
      <description>git update-index --assume-unchanged &amp;lt;file&amp;gt;  If there&amp;rsquo;s a remote server, also do:
git rm --cached &amp;lt;file&amp;gt; </description>
    </item>
    
    <item>
      <title>Emoji data in MySQL</title>
      <link>https://blog.kerkerj.in/2014/08/emoji-data-in-mysql/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/emoji-data-in-mysql/</guid>
      <description>Supported MySQL 5.5, 5.6.
First, MySQL should set DB and table to utf8mb4.
utf8 - 3 byte characters
utf8mb4 - 4 byte characters
ALTER DATABASE my_database DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; ALTER TABLE my_table DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE my_column CHANGE my_column my_column TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL;  Then, when inserting data or selecting data, execute this statement first:
--Execute this statement first SET NAMES utf8mb4; --then insert or select SELECT * FROM my_table </description>
    </item>
    
    <item>
      <title>Writing Lua on Mac</title>
      <link>https://blog.kerkerj.in/2014/08/writing-lua-on-mac/</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/writing-lua-on-mac/</guid>
      <description>Install lua on mac I&amp;rsquo;m not sure that whether Lua is built on mac originally.
(Ok, tested on Mac OSX 10.9, there is Lua in it.)
So I installed Lua via Homebrew.
Install homebrew (optional)
ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;  Install Lua by homebrew
brew install lua  Writing Lua You can use command: lua to interact with lua. (just like php -a or irb)
print(&amp;quot;Hello World&amp;quot;)  function fact(n) if n == 0 then return 1 else return n * fact(n-1) end end print(&amp;quot;enter a number:&amp;quot;) num = io.</description>
    </item>
    
    <item>
      <title>Capistrano with rails - basic notes</title>
      <link>https://blog.kerkerj.in/2014/08/capistrano-with-rails-basic-notes/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/capistrano-with-rails-basic-notes/</guid>
      <description>詳細的東西還是看 project&amp;rsquo;s github page 比較快 - Capistrano@github
Capistrano 剛開始寫 deploy script 時真的會有點搞不太懂 XD
記錄一下使用 &amp;lsquo;capistrano&amp;rsquo; 把特定的 github repo 抓到 remote server
安裝 先在 Gemfile 加入:
gem &#39;capistrano&#39;, &#39;~&amp;gt; 3.2.0&#39;  然後安裝~
bundle install  步驟大概會是：
假設已經寫完 capistrano 了，執行 script 時，
capistrano 會先利用 script 裡提供的 server ip 以及 public key，
先連線到 remote server，接著再到 github 上拉 code 到指定的目錄裡，
再重開 server。
產生相關檔案 bundle exec cap install  會產生以下檔案: (copy from Capistrano@github)
├── Capfile ├── config │ ├── deploy │ │ ├── production.</description>
    </item>
    
    <item>
      <title>Openresty on Ubuntu 14.04</title>
      <link>https://blog.kerkerj.in/2014/08/openresty-on-ubuntu-14.04/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/openresty-on-ubuntu-14.04/</guid>
      <description>Install choose the latest version of Openresty
I used ngx_openresty-1.7.2.1.tar.gz
# install packages sudo apt-get install libreadline-dev libpcre3-dev libssl-dev perl # get openresty package wget http://openresty.org/download/ngx_openresty-1.7.2.1.tar.gz # unzip tar xzvf ngx_openresty-1.7.2.1.tar.gz # install cd ngx_openresty-1.7.2.1/ # You can setup with ./configure --prefix=&amp;quot;the folder you want to install&amp;quot;, default is &#39;/usr/local/openresty&#39; ./configure make sudo make install # need permission to copy file to target folder  Default folder: /usr/local/openresty
Setup create work folder in ~</description>
    </item>
    
    <item>
      <title>Install rails server env with rbenv on Ubuntu 14.04</title>
      <link>https://blog.kerkerj.in/2014/07/install-rails-server-env-with-rbenv-on-ubuntu-14.04/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/07/install-rails-server-env-with-rbenv-on-ubuntu-14.04/</guid>
      <description>nodejs v0.10.25 (for rails javascript engine) rbenv 0.4.0-98-g13a474c ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux] Rails 4.1.4 nginx version: nginx/1.6.0 Phusion Passenger version 4.0.48 mysql Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3  Installing Ruby &amp;amp; Rails sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm  Use rbenv
cd git clone git://github.</description>
    </item>
    
    <item>
      <title>[Rails] ActionController::InvalidAuthenticityToken when useing Rails4 as API </title>
      <link>https://blog.kerkerj.in/2014/07/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails4-as-api/</link>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/07/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails4-as-api/</guid>
      <description>change
protect_from_forgery with: :exception
to
protect_from_forgery with: :null_session
in ApplicationController</description>
    </item>
    
    <item>
      <title>[Apache] SSL (self-signed &amp; purchased version) </title>
      <link>https://blog.kerkerj.in/2014/06/apache-ssl-self-signed-purchased-version/</link>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/06/apache-ssl-self-signed-purchased-version/</guid>
      <description>[Self-signed]  Generate a host key:
sudo ssh-keygen -f host.key  Generate a certificate request file
sudo openssl req -new -key host.key -out request.csr   Type what you want:
 Country Name (2 letter code) [AU]:TW State or Province Name (full name) [Some-State]:Taiwan Locality Name (eg, city) []:Taipei Organization Name (eg, company) [Internet Widgits Pty Ltd]: Organizational Unit Name (eg, section) []: Common Name (e.g. server FQDN or YOUR name) []: Email Address []: Please enter the following &#39;extra&#39; attributes to be sent with your certificate request A challenge password []: An optional company name []:   Create the SSL certificate sudo openssl x509 -req -days 365 -in request.</description>
    </item>
    
    <item>
      <title>[Mac] update openssl on mac</title>
      <link>https://blog.kerkerj.in/2014/06/mac-update-openssl-on-mac/</link>
      <pubDate>Mon, 16 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/06/mac-update-openssl-on-mac/</guid>
      <description>First of all, you need &amp;lsquo;brew&amp;rsquo; (http://brew.sh/)
$ brew update $ brew install openssl $ brew link --force openssl $openssl version -a  If it&amp;rsquo;s still the old version, you shoud:
$ sudo rm /usr/bin/openssl #remove the old binary $ sudo ln -s /usr/local/Cellar/openssl/1.0.1h/bin/openssl /usr/local/bin (1.0.1h -&amp;gt; the latest version)  ref: http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x</description>
    </item>
    
    <item>
      <title>[MySQL] add a unique index by 2 columns</title>
      <link>https://blog.kerkerj.in/2014/06/mysql-add-a-unique-index-by-2-columns/</link>
      <pubDate>Wed, 11 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/06/mysql-add-a-unique-index-by-2-columns/</guid>
      <description>ALTER TABLE table_name ADD UNIQUE INDEX(column1, column2);</description>
    </item>
    
    <item>
      <title>[Ubuntu] enable/disable services on start-up</title>
      <link>https://blog.kerkerj.in/2014/05/ubuntu-enable-disable-services-on-start-up/</link>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/05/ubuntu-enable-disable-services-on-start-up/</guid>
      <description>Take apache for example:
Disable - update-rc.d -f apache2 remove
Enable - update-rc.d apache2 defaults</description>
    </item>
    
    <item>
      <title>[Codeigniter] Tips deploy to Amazon Web Services</title>
      <link>https://blog.kerkerj.in/2014/05/codeigniter-tips-deploy-to-amazon-web-services/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/05/codeigniter-tips-deploy-to-amazon-web-services/</guid>
      <description> If you use Amazon RDS, especially micro plan,
remember to set $config[&#39;pconnect&#39;] = FALSE in application/config/database.php.
Because RDS has Max_connection limits.
 If you use RDS, remeber that the system timezone in RDS is +0 timezone.
In your application, you should care about this thing.
 If you will use loadbalancer, remember to &amp;hellip;.(???)
 </description>
    </item>
    
    <item>
      <title>[MySQL] Several useful statements (GROUP_CONCAT, ifnull, DATE_FORMAT)</title>
      <link>https://blog.kerkerj.in/2014/05/mysql-several-useful-statements-group_concat-ifnull-date_format/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/05/mysql-several-useful-statements-group_concat-ifnull-date_format/</guid>
      <description> 將 query 出來的多筆記錄結合成一個欄位
例如原本的 query 結果為：
SELECT &#39;fruits&#39; FROM &#39;fruits_table&#39;
apple
banana
kiwi
SELECT group_concat(&#39;fruits&#39; separator &#39;,&#39;) FROM &#39;fruits_table&#39;
result: apple,banana,kiwi
 改變 datetime 欄位的顯示結果
SELECT DATE_FORMAT( &#39;created_at&#39;, &#39;%Y/%m/%d %H:%i&#39;) AS &#39;created_at&#39; FROM &#39;message_table&#39;
result: 2014/05/06 18:20
 若某個欄位的值為空，則給予預設值
SELECT ifnull(&#39;is_success&#39;, 0) AS &#39;is_success&#39; FROM ....
 </description>
    </item>
    
    <item>
      <title>[Ubuntu] update OpenSSL</title>
      <link>https://blog.kerkerj.in/2014/04/ubuntu-update-openssl/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/04/ubuntu-update-openssl/</guid>
      <description>Easy way:
 Below the single command line to compiling and install the last openssl version.  $ curl https://www.openssl.org/source/openssl-1.0.1h.tar.gz | tar xz &amp;amp;&amp;amp; cd openssl-1.0.1h &amp;amp;&amp;amp; sudo ./config &amp;amp;&amp;amp; sudo make &amp;amp;&amp;amp; sudo make install   Replace old openssl binary file by the new one via a symlink.  $ sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`  how to check version:
$ openssl version -b built on: Mon Apr 7 20:33:29 UTC 2014 $ openssl version -a OpenSSL 1.</description>
    </item>
    
    <item>
      <title>[PHP] json_decode error by wrong json string with quotes </title>
      <link>https://blog.kerkerj.in/2014/01/php-json_decode-error-by-wrong-json-string-with-quotes/</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/01/php-json_decode-error-by-wrong-json-string-with-quotes/</guid>
      <description>Normal json string:
{&amp;quot;Hey&amp;quot;:&amp;quot;There&amp;quot;}  Error json string got from $_POST variable:
{\&amp;quot;Hey\&amp;quot;:\&amp;quot;There\&amp;quot;}  This may causes by magic_quotes in php.ini Magic is never good in development.</description>
    </item>
    
    <item>
      <title>[Sublime Text 2] Integration With RVM and Rspec</title>
      <link>https://blog.kerkerj.in/2014/01/sublime-text-2-integration-with-rvm-and-rspec/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/01/sublime-text-2-integration-with-rvm-and-rspec/</guid>
      <description>Ruby:
~/Library/Application\ Support/Sublime\ Text\ 2/Packages/Ruby/Ruby.sublime-build
{ &amp;quot;env&amp;quot;:{ &amp;quot;PATH&amp;quot;:&amp;quot;${HOME}/.rvm/bin:${PATH}&amp;quot; }, &amp;quot;cmd&amp;quot;: [&amp;quot;rvm-auto-ruby&amp;quot;, &amp;quot;$file&amp;quot;], &amp;quot;file_regex&amp;quot;: &amp;quot;^(...*?):([0-9]*):?([0-9]*)&amp;quot;, &amp;quot;selector&amp;quot;: &amp;quot;source.ruby&amp;quot; }  http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/</description>
    </item>
    
    <item>
      <title>[Rails] List of Rails Model Type (MySQL)</title>
      <link>https://blog.kerkerj.in/2014/01/rails-list-of-rails-model-type-mysql/</link>
      <pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/01/rails-list-of-rails-model-type-mysql/</guid>
      <description>&lt;dl&gt;
&lt;dt&gt;</description>
    </item>
    
    <item>
      <title>[Rails] PUT v.s. PATCH</title>
      <link>https://blog.kerkerj.in/2014/01/rails-put-v.s.-patch/</link>
      <pubDate>Thu, 02 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/01/rails-put-v.s.-patch/</guid>
      <description>According to rails convention,
PUT is used for updating an existing resource
POST is used for creating a new resource
In rails 4, PUT has been changed to PATCH to avoid confusion.
 posts GET /posts(.:format) {:action=&amp;gt;&amp;quot;index&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} POST /posts(.:format) {:action=&amp;gt;&amp;quot;create&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} new_post GET /posts/new(.:format) {:action=&amp;gt;&amp;quot;new&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} edit_post GET /posts/:id/edit(.:format) {:action=&amp;gt;&amp;quot;edit&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} post GET /posts/:id(.:format) {:action=&amp;gt;&amp;quot;show&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} PUT /posts/:id(.:format) {:action=&amp;gt;&amp;quot;update&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;} DELETE /posts/:id(.:format) {:action=&amp;gt;&amp;quot;destroy&amp;quot;, :controller=&amp;gt;&amp;quot;posts&amp;quot;}  延伸閱讀：ihower - HTTP Verbs: 談 POST, PUT 和 PATCH 的應用</description>
    </item>
    
    <item>
      <title>[AWS] ubuntu swap</title>
      <link>https://blog.kerkerj.in/2013/12/aws-ubuntu-swap/</link>
      <pubDate>Thu, 26 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/aws-ubuntu-swap/</guid>
      <description>Add swap for an instance
$ sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024 $ sudo /sbin/mkswap /var/swap.1 $ sudo /sbin/swapon /var/swap.1 $ echo &amp;quot;/var/swap.1 swap swap defaults 0 0&amp;quot; &amp;gt;&amp;gt; /etc/fstab #將 swap 加入 開機啟動  在 Amazon EC2 micro plan，加入 swap 很容易 I/O 過量， 因此最好是需要時才開啟 swap，不用時關閉 swap 以免被收錢~
swap usage
$ swapon -s $ free -k --- $ swapoff -a $ swapon -a </description>
    </item>
    
    <item>
      <title>[SublimeText2] use command to call sublime text2</title>
      <link>https://blog.kerkerj.in/2013/12/sublimetext2-use-command-to-call-sublime-text2/</link>
      <pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/sublimetext2-use-command-to-call-sublime-text2/</guid>
      <description>ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime  in terminal:
$ sublime filename $ sublime . (open the directory)  </description>
    </item>
    
    <item>
      <title>[Gem] How to make --no-ri --no-rdoc the default for gem install?</title>
      <link>https://blog.kerkerj.in/2013/12/gem-how-to-make-no-ri-no-rdoc-the-default-for-gem-install/</link>
      <pubDate>Sun, 22 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/gem-how-to-make-no-ri-no-rdoc-the-default-for-gem-install/</guid>
      <description>In home dir, create a file: .gemrc (on linux, maybe on mac)
echo &amp;quot;gem: --no-ri --no-rdoc&amp;quot; &amp;gt;&amp;gt; ~/.gemrc </description>
    </item>
    
    <item>
      <title>[Ubuntu] RoR environment</title>
      <link>https://blog.kerkerj.in/2013/12/ubuntu-ror-environment/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/ubuntu-ror-environment/</guid>
      <description>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install) p.s. If you don&amp;rsquo;t use RVM, you can just follow the instruction from Passenger offcial website. It will be easier. Plus, I installed all these things by Vagrant.
First thing to do $ sudo apt-get update $ sudo apt-get upgrade  Pre-setup: install necessary packages $ sudo apt-get update $ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev  Get .</description>
    </item>
    
    <item>
      <title>[Vagrant] use knife-solo to deploy a new VM</title>
      <link>https://blog.kerkerj.in/2013/12/vagrant-use-knife-solo-to-deploy-a-new-vm/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/vagrant-use-knife-solo-to-deploy-a-new-vm/</guid>
      <description>My own computer: host side My VM: guest side
knife-solo is a tool for Chef. host side: you need ruby environment!
$ gem install knife-solo  The only thing you need to install is just knife-solo by ruby!
$ knife configure -r . --defaults (產生預設設定檔，內容為空) $ knife cookbook create &amp;quot;package&amp;quot; $ knife solo bootstrap vagrant@ip.address (bootstrap = prepare + cook, only for the first time)  加入菜單：
$ knife cookbook create nginx  在 cookbooks/nginx/recipes/default.</description>
    </item>
    
    <item>
      <title>[Ruby] PP to Ruby as Var_dump to PHP </title>
      <link>https://blog.kerkerj.in/2013/12/ruby-pp-to-ruby-as-var_dump-to-php/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/ruby-pp-to-ruby-as-var_dump-to-php/</guid>
      <description>require &#39;pp&#39; pp(ENV)   Usage: pp(any_variable)
 just like var_dump in php</description>
    </item>
    
    <item>
      <title>[Ubuntu] -bash: warning: setlocale: LC_CTYPE: cannot change locale</title>
      <link>https://blog.kerkerj.in/2013/12/ubuntu-bash-warning-setlocale-lc_ctype-cannot-change-locale/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/ubuntu-bash-warning-setlocale-lc_ctype-cannot-change-locale/</guid>
      <description>$ sudo locale-gen zh_TW.UTF-8 $ sudo update-locale LANG=zh_TW.UTF-8  reload your bash profile</description>
    </item>
    
    <item>
      <title>[Codeigniter] use markdown as library</title>
      <link>https://blog.kerkerj.in/2013/12/codeigniter-use-markdown-as-library/</link>
      <pubDate>Mon, 16 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/12/codeigniter-use-markdown-as-library/</guid>
      <description>https://github.com/erusev/parsedown
download the Parsedown.php and put it into Library folder then edit autoload.php
$autoload[&#39;libraries&#39;] = array(&#39;Parsedown&#39;);  then in the view php for tests:
$text = &#39;Hello **Parsedown**!&#39;; $result = Parsedown::instance()-&amp;gt;parse($text); echo $result;  No need to require or include the file. If you want to load a file with path, you can use the function called file_get_contents:
file_get_contents(&#39;./markdown/test.md&#39;,true); (true: enable path) </description>
    </item>
    
    <item>
      <title>[Ubuntu] 12.04 install oracle java</title>
      <link>https://blog.kerkerj.in/2013/11/ubuntu-12.04-install-oracle-java/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/11/ubuntu-12.04-install-oracle-java/</guid>
      <description>sudo rm /var/lib/dpkg/info/oracle-java7-installer* sudo apt-get purge oracle-java7-installer* sudo rm /etc/apt/sources.list.d/*java* sudo apt-get update sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java7-installer </description>
    </item>
    
    <item>
      <title>[Xcode] 模擬器的 home 鍵不見了?! </title>
      <link>https://blog.kerkerj.in/2013/11/xcode-%E6%A8%A1%E6%93%AC%E5%99%A8%E7%9A%84-home-%E9%8D%B5%E4%B8%8D%E8%A6%8B%E4%BA%86/</link>
      <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/11/xcode-%E6%A8%A1%E6%93%AC%E5%99%A8%E7%9A%84-home-%E9%8D%B5%E4%B8%8D%E8%A6%8B%E4%BA%86/</guid>
      <description>其實有點有趣
今天由於某些因素在測試 iOS app
於是開了許久沒動的 xcode
更新了一下發現多了一些 retina 的模擬器
也沒想那麼多就把它 run 到模擬器上
但模擬器一開出來我還以為是模擬器壞掉 XDDDD
它的 home 鍵勒～～～～～
其實是因為 iOS 5 以後的 simulater 沒有 home 鍵
 叫出 home 鍵 command+shift+h
調整大小 command+ 1 or 2 or 3</description>
    </item>
    
    <item>
      <title>[Mac OSX] Slow-Opening Terminal Windows</title>
      <link>https://blog.kerkerj.in/2013/11/mac-osx-slow-opening-terminal-windows/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/11/mac-osx-slow-opening-terminal-windows/</guid>
      <description>最近在開 mac 的 iTerm.app 或者是內建的終端機都覺得卡卡的，
之前以為是 .bashrc 載入太多東西導致的，所以把一些掛載的 bin 目錄都註解掉，
但是還是沒解決，心想不對勁，就順手 google 了一下&amp;hellip;
我執行了下列語法：
$ time /usr/libexec/path_helper PATH=&amp;quot;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Users/ABC/android-sdks/platform-tools:/Users/ABC/android-sdks/tools:/Application/Vagrant/bin&amp;quot;; export PATH; real 0m0.043s user 0m0.001s sys 0m0.002s  接著我把 PATH 的內容寫進 .bash_profile，問題竟然就解決了&amp;hellip;
速度飛快～～
後來看到一篇 .bash_profile vs.bashrc
雖然大家都知道 .bash_profile 是在登入時執行（即是輸入帳號密碼時），
而 .bashrc 是在系統內非登入狀態時開啟 prompt 時執行，
但是！！ Mac OSX 是個例外～是個例外～是個例外～&amp;hellip;&amp;hellip;.=.=
 Mac OS X — an exception
An exception to the terminal window guidelines is Mac OS X&amp;rsquo;s Terminal.app, which runs a login shell by default for each new terminal window, calling .</description>
    </item>
    
    <item>
      <title>[Mac OSX] bash-it</title>
      <link>https://blog.kerkerj.in/2013/11/mac-osx-bash-it/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/11/mac-osx-bash-it/</guid>
      <description>bash-it:
$git clone http://github.com/revans/bash-it.git ~/.bash_it $~/.bash_it/install.sh  他會幫你自動備份原來的 .bash_profile 為 .bash_profile.bak 所以別擔心
當他在問你要使用什麼 completion 或 script 之類的東西時，
選擇 &amp;lsquo;some&amp;rsquo; 就可以自己選擇~
有許多的 theme 及 package , completion 等等可以用，很方便！
http://www.scholarslab.org/research-and-development/customizing-bash/</description>
    </item>
    
    <item>
      <title>[Mac OSX] homebrew update error</title>
      <link>https://blog.kerkerj.in/2013/11/mac-osx-homebrew-update-error/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/11/mac-osx-homebrew-update-error/</guid>
      <description>failed log:
$sudo brew update error: Your local changes to the following files would be overwritten by merge: Library/Aliases/gperftools Library/Aliases/hashdeep Library/Aliases/htop Library/Aliases/nodejs Library/Aliases/ocio Library/Aliases/oiio .... error: The following untracked working tree files would be overwritten by merge: Library/Aliases/gperftools Library/Aliases/hashdeep Library/Aliases/htop Library/Aliases/nodejs Library/Aliases/ocio Library/Aliases/oiio .... Aborting Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master  Solution:
$ cd /usr/local $ git fetch origin $ git reset --hard origin/master  reference [read]</description>
    </item>
    
    <item>
      <title>[Vagrant] 使用 Vagrant 安裝 Nginx, php5-fpm, MySQL</title>
      <link>https://blog.kerkerj.in/2013/10/vagrant-%E4%BD%BF%E7%94%A8-vagrant-%E5%AE%89%E8%A3%9D-nginx-php5-fpm-mysql/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2013/10/vagrant-%E4%BD%BF%E7%94%A8-vagrant-%E5%AE%89%E8%A3%9D-nginx-php5-fpm-mysql/</guid>
      <description>Vagrant - Development environments made easy. 就是這個軟體的宗旨，把它想做是 ghost 吧！我們開發網站或是測試一些多機器架構時，常不小心就把自己的電腦或是測試主機搞到爛掉，租機器又慢又花錢，搞到爛重灌更麻煩。因此這個軟體基於 VirtualBox 做出了令人方便設定的功能，讓我們可以快速架設安裝環境並測試，尤其是以多機器架構而言更是方便！例如從最簡單的 Web server + DB server，或是 Web Load Balancer + Application Server * 5 等等的架構，一台電腦就能達成囉！ 今天主要是以安裝 Vagrant 及架設出 Nginx + php5-fpm 的架構，下一篇打算另外建構一台 mongodb server，達到 Vagrant 最主要的多機器設定功能~
Vagrant 基本設定  先下載 VirtualBox 吧！
 下載 Vagarnt 套件 http://downloads.vagrantup.com/
安裝好後，可能會需要加 path，至少 1.3.0 當時我是自己加的，現在 1.3.5 就不清楚了~
 接下來就可以開始加入 box (可以把它想為 ghost 檔)，並開始設定 Vagrant。  vagrant box add {你想要的Box名稱} {下載網址}  輸入後就會開始下載該 box 了！ 範例：</description>
    </item>
    
    <item>
      <title>[Android] thread 處理 UI update (2)</title>
      <link>https://blog.kerkerj.in/2012/06/android-thread-%E8%99%95%E7%90%86-ui-update-2/</link>
      <pubDate>Tue, 12 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/06/android-thread-%E8%99%95%E7%90%86-ui-update-2/</guid>
      <description>這是第一篇: [[Android] thread 處理 UI update]
在那之後自己在寫一些東西時也用到 runOnUiThread
不過有別的方法可以不用像 runOnUiThread 寫的比較雜亂
那就是用 AsyncTask , 剛剛自己也順手寫了一個 Test 放在 Github 上
我覺得使用 AsyncTask 可以不用處理 thread, 而且寫法上比較清楚~</description>
    </item>
    
    <item>
      <title>[PHP] checkbox check/uncheck all</title>
      <link>https://blog.kerkerj.in/2012/06/php-checkbox-check-uncheck-all/</link>
      <pubDate>Tue, 12 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/06/php-checkbox-check-uncheck-all/</guid>
      <description>今天在做 checkbox 時, 想做全選/取消全選
多使用一個 checkbox, 若勾選則是全選, 再點一次則全不選
於是就產生了這段 code&amp;hellip;</description>
    </item>
    
    <item>
      <title>[Ubuntu] [RoR] install with rvm</title>
      <link>https://blog.kerkerj.in/2012/04/ubuntu-ror-install-with-rvm/</link>
      <pubDate>Fri, 27 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/ubuntu-ror-install-with-rvm/</guid>
      <description>以下都是以 Ubuntu 11.10為操作環境
主要目標為使用 rvm (Ruby Version Manager)來管理 ruby 版本並安裝 ruby 和 rails
先安裝一些必要套件 ( ex. openssl, zlib1g-dev &amp;hellip;.etc. )
$sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev nodejs  安裝完基本套件後, 有兩種選擇:
 直接在系統上安裝 ruby ( sudo apt-get install ruby ) 使用 rvm 來管理 ruby 版本  基本上有 rvm 來管理 ruby 版本是比較方便的, 可以隨時切換不同的 ruby 版本
(不過在使用一些套件上會有一些問題需要排解, 本篇最底下有 trouble shooting)</description>
    </item>
    
    <item>
      <title>[Ubuntu] 安裝設定ssh</title>
      <link>https://blog.kerkerj.in/2012/04/ubuntu-%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9Assh/</link>
      <pubDate>Fri, 20 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/ubuntu-%E5%AE%89%E8%A3%9D%E8%A8%AD%E5%AE%9Assh/</guid>
      <description>Ubuntu 裝完是沒辦法透過別台機器 ssh 進這台機器
只能夠 ssh 出去, 所以來安裝一下
$sudo apt-get update $sudo apt-get install ssh  裝完後修改一下設定檔 : $sudo vi /etc/ssh/sshd_config
預設 port 為 22 可以改成別的 ( 可以到 /etc/services 看有沒有沒再用的 port 並指給它 ) (optional)
Port 22 找到這行, 意思為允許 root 登入 (optional)
PermitRootLogin yes 將 yes 改成 no, 不允許 root 登入.
另外可以設定 /etc/hosts.allow 和 /etc/hosts.deny 更精準的限制連線 (optional)
例如: 我只要 192.168.11.11 登入我這台機器
則編輯 /etc/hosts.allow , 加入: sshd:192.168.11.11 :allow
編輯 /etc/hosts.deny , 讓其他人都無法連入, 加入這行: sshd:all:deny</description>
    </item>
    
    <item>
      <title>[Android] thread 處理 UI update</title>
      <link>https://blog.kerkerj.in/2012/04/android-thread-%E8%99%95%E7%90%86-ui-update/</link>
      <pubDate>Wed, 18 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/android-thread-%E8%99%95%E7%90%86-ui-update/</guid>
      <description>不知道大家在寫 Android 用 thread 處理 UI 更新時，有沒有遇過這樣的錯誤：
 Only the original thread that created a view hierarchy can touch its views.
 通常這是因為自己產生的 thread 不能去更動到 原本 main thread 的 view
只有 main thread 可以去動 UI，因此我們必須透過 runOnUiThread 這個方法來對 UI 做操作
這裡以下面這個 ProgressDialog 做例子：
package org.twgg.kerkerj; import android.app.Activity; import android.app.ProgressDialog; import android.os.Bundle; import android.os.Handler; import android.os.Message; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.TextView; public class PDExample extends Activity implements Runnable { private String pi=&amp;quot;null&amp;quot;; private Button btn; private TextView text; private ProgressDialog pd; public void onCreate(Bundle icicle) { super.</description>
    </item>
    
    <item>
      <title>[Android] 安裝開發環境</title>
      <link>https://blog.kerkerj.in/2012/04/android-%E5%AE%89%E8%A3%9D%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/</link>
      <pubDate>Wed, 18 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/android-%E5%AE%89%E8%A3%9D%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83/</guid>
      <description>最近電腦重裝的關係，順便把 Android 開發環境整理一下，
不得不說 Android 在 Eclipse 上的外掛開發的越來越不錯了！
Step1. 到 Oracle Java SE downloads 點擊 Java Platform (JDK) 並選擇作業系統
Step2. 安裝 Eclipse IDE for Java EE Developers
Step3. 到 Android Developers 下載 Android SDK 並安裝 
Step4. 安裝 ADT Plugin for Eclipse ( 官方文件 )
 a. 開啟 Eclipse， [Help] -&amp;gt; [Install New Software&amp;hellip;.] b. 點選 [Add] 輸入名稱及網址 ( APT / https://dl-ssl.google.com/android/eclipse/ ) c. 等待 pending 結束後會看到可以勾選的 Developer Tools ，選擇 next 並 accept 開始安裝</description>
    </item>
    
    <item>
      <title>[Hardware] Asus 1215N 拆解</title>
      <link>https://blog.kerkerj.in/2012/04/hardware-asus-1215n-%E6%8B%86%E8%A7%A3/</link>
      <pubDate>Mon, 16 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/hardware-asus-1215n-%E6%8B%86%E8%A7%A3/</guid>
      <description>某天筆電的鍵盤卡卡的，所以找了資料並拆解了一下
大致的步驟是這樣：
 拆觸控板的板子，這塊板子其實是用卡榫卡住的，我是用一字螺絲起子慢慢從邊邊打開的。因為是卡榫，所以要小心不要把它弄斷，弄斷裝回去時卡不住會鬆鬆的。
另外要注意的是，觸控板有一條排線連接著主機板，不要扯下來，扯下來觸控板也和你說掰掰了。
 拆觸控板的目的是要將鍵盤的螺絲轉開，若你已經將觸控板大致扳開後，就會看到鎖鍵盤的螺絲了。這時候一樣是用一字起子慢慢將鍵盤扳開，它也是卡榫，所以還是要注意～
 這時候鍵盤應該就被拔下來了XD
 這是只有拆鍵盤的部分，我有找到換硬碟的說明，不過我沒有試過，所以沒辦法提供注意事項，不過仍然附註在下面。
  拆硬碟的步驟同上述1,2,3點，不過在這1,2,3點前，需要先做第0點：
0.將筆電翻到背面，有個可以用螺絲起子打開的記憶體插槽，將它打開後，裡面可以看到4,5顆螺絲，除了四個角落外，有一塊記憶體的下方還藏有一個，所以要先把記憶體拔掉，再將該螺絲轉開。
1,2,3. 接著就重複上面的1,2,3點。
4.鍵盤拆了以後就可以看見鍵盤下面有一大塊不鏽鋼板，一樣有螺絲固定，將螺絲拆了以後拿下不鏽鋼板就可以看見硬碟了。
5.硬碟也有螺絲固定，螺絲拆了後就可以換硬碟。</description>
    </item>
    
    <item>
      <title>[Ubuntu] 磁碟分配</title>
      <link>https://blog.kerkerj.in/2012/04/ubuntu-%E7%A3%81%E7%A2%9F%E5%88%86%E9%85%8D/</link>
      <pubDate>Mon, 16 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/ubuntu-%E7%A3%81%E7%A2%9F%E5%88%86%E9%85%8D/</guid>
      <description>我的筆電分割大概是這樣：
HD: 250G
 /boot : 200MB
/ : 5GB
/usr :10GB
/var : 5GB
/usr/local : 10GB
/tmp : 5GB
swap : 5GB
/home : 40GB
 no use: 170G ( 可以拿來灌Win7 )</description>
    </item>
    
    <item>
      <title>[Blogger] 隱藏上方的導覽列</title>
      <link>https://blog.kerkerj.in/2012/04/blogger-%E9%9A%B1%E8%97%8F%E4%B8%8A%E6%96%B9%E7%9A%84%E5%B0%8E%E8%A6%BD%E5%88%97/</link>
      <pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/blogger-%E9%9A%B1%E8%97%8F%E4%B8%8A%E6%96%B9%E7%9A%84%E5%B0%8E%E8%A6%BD%E5%88%97/</guid>
      <description>新版的Blogger佈景沒有導覽列，
不過應該大部分的人都還是使用舊版的佈景，
如果不是使用自訂佈景的話，內建佈景中上方總是有條導覽列，
我個人是覺得醜醜的想把它拿掉，所以就找了一下資料，
先到這邊：

改的方法有幾種：
1.直接使用 css 的 display:none; 語法把導覽列隱藏，在 &amp;lt;head&amp;gt; 標籤下加入
.Navbar {visibility:hidden;display:none;}
有個缺點，雖然導覽列不見了，但是導覽列的區塊還是會留著。
2.改變整個 body 的位置，將 body 往上移約 40px，產生導覽列看不見的錯覺XD (我個人使用這種)
body {margin: -40px 0 0 0;}
最後，導覽列不見了很棒，但是沒辦法方便的登入，怎麼辦？

加入個 POWER BY BLOGGER 吧，按下去就可以登入了XD</description>
    </item>
    
    <item>
      <title>[Android] 遠端主機已強制關閉一個現存的連線</title>
      <link>https://blog.kerkerj.in/2012/04/android-%E9%81%A0%E7%AB%AF%E4%B8%BB%E6%A9%9F%E5%B7%B2%E5%BC%B7%E5%88%B6%E9%97%9C%E9%96%89%E4%B8%80%E5%80%8B%E7%8F%BE%E5%AD%98%E7%9A%84%E9%80%A3%E7%B7%9A/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/android-%E9%81%A0%E7%AB%AF%E4%B8%BB%E6%A9%9F%E5%B7%B2%E5%BC%B7%E5%88%B6%E9%97%9C%E9%96%89%E4%B8%80%E5%80%8B%E7%8F%BE%E5%AD%98%E7%9A%84%E9%80%A3%E7%B7%9A/</guid>
      <description>不知道大家在寫Android程式時使用實體機接PC時會不會很常出現這個錯誤
我個人還蠻常出現的，在測試時是非常緩慢的
Google了一下，找到了強者自己寫的adb.exe
檔案在討論串裡：http://code.google.com/p/android/issues/detail?id=12141
Nov 28, 2011 New patched version of adb (1.0.29) Patch (diff) the same as early adb.exe 478 KB Download  Download: adb.exe
下載後，到Android的SDK資料夾，進platform-tool資料夾，
將原本的adb.exe做備份，再將新的複製到原本的exe檔所在的地方，
重新啟動adb就可以了 (進DDMS重新啟動，或者重新啟動Eclipse也行)</description>
    </item>
    
    <item>
      <title>[Android] 開機啟動與解鎖啟動</title>
      <link>https://blog.kerkerj.in/2012/04/android-%E9%96%8B%E6%A9%9F%E5%95%9F%E5%8B%95%E8%88%87%E8%A7%A3%E9%8E%96%E5%95%9F%E5%8B%95/</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/04/android-%E9%96%8B%E6%A9%9F%E5%95%9F%E5%8B%95%E8%88%87%E8%A7%A3%E9%8E%96%E5%95%9F%E5%8B%95/</guid>
      <description>BroadcastReceiver 開機啟動與解鎖啟動
主要是這兩個intent:
 Intent.ACTION_BOOT_COMPLETED //開機
Intent.ACTION_USER_PRESENT //解鎖
 只要建立下面的 Receiver
public class MyReceiver extends BroadcastReceiver { @Override public void onReceive(final Context context, final Intent intent) { final String action = intent.getAction(); if (Intent.ACTION_BOOT_COMPLETED.equals(action)) { // TODO 開機啟動 } else if (Intent.ACTION_USER_PRESENT.equals(action)) { // TODO 解鎖啟動 } } }  並且在 AndroidManifest.xml 裡宣告就可以了</description>
    </item>
    
    <item>
      <title>[Codeigniter] Disallowed Key Characters</title>
      <link>https://blog.kerkerj.in/2012/01/codeigniter-disallowed-key-characters/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/01/codeigniter-disallowed-key-characters/</guid>
      <description>Codeigniter 顯示 Disallowed Key Characters
我的情況是：
表單(form)名稱型態不符合格式。
不得使用中文。
＜input name=&amp;quot;姓名&amp;quot; type=&amp;quot;checkbox&amp;quot; value=&amp;quot;1&amp;quot; /＞
改掉就好了
ref: Codeigniter 顯示 Disallowed Key Characters</description>
    </item>
    
    <item>
      <title>[PHP] 上傳檔案的限制</title>
      <link>https://blog.kerkerj.in/2012/01/php-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E7%9A%84%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/01/php-%E4%B8%8A%E5%82%B3%E6%AA%94%E6%A1%88%E7%9A%84%E9%99%90%E5%88%B6/</guid>
      <description>php.ini
 max_execution_time - Script執行時間上限(單位：秒)
 max_input_time - Script處理資料時間上限(單位：秒)
 memory_limit - 系統記憶體 (要比4,5大
 post_max_size - 表單的POST發送量
 upload_max_filesize - 單次上傳檔案容量
 default_socket_timeout - Socket無回應斷線時間(單位：秒)
 mysql.connect_timeout - 無回應斷線時間(單位：秒；-1代表不斷線一直等)
 </description>
    </item>
    
    <item>
      <title>[PHP] 取得目前時間</title>
      <link>https://blog.kerkerj.in/2012/01/php-%E5%8F%96%E5%BE%97%E7%9B%AE%E5%89%8D%E6%99%82%E9%96%93/</link>
      <pubDate>Tue, 31 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2012/01/php-%E5%8F%96%E5%BE%97%E7%9B%AE%E5%89%8D%E6%99%82%E9%96%93/</guid>
      <description>很簡單，也很常忘，所以記下來 Orz
$now =date(&amp;quot;Y-m-d H:i:s&amp;quot;,time());</description>
    </item>
    
    <item>
      <title>[Codeigniter] remove index.php &amp; 圖片無法讀取問題</title>
      <link>https://blog.kerkerj.in/2011/12/codeigniter-remove-index.php-%E5%9C%96%E7%89%87%E7%84%A1%E6%B3%95%E8%AE%80%E5%8F%96%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Tue, 20 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/12/codeigniter-remove-index.php-%E5%9C%96%E7%89%87%E7%84%A1%E6%B3%95%E8%AE%80%E5%8F%96%E5%95%8F%E9%A1%8C/</guid>
      <description>首先，是先簡單說明使用 Codeigniter framework 時移除 URL 中的 index.php
在 Codeigniter 的根目錄新增一 .htaccess 檔案
並放入以下內容
RewriteEngine on RewriteCond $1 !^(index\.php|js|robots\.txt|css) RewriteRule ^(.*)$ index.php/$1 [L]  另外還要修改 Codeigniter 的 config.php 設定
$config[&#39;index_page&#39;] = &#39;&#39;&amp;quot;;
不過上面的 rewrite rule 有些問題，
情境是這樣的：
我在 Codeigniter 根目錄新增一資料夾為 uploads ，
放置上傳的圖片與影片，
但是因為 rewrite rule routing 的關係沒辦法讀取到圖片，
因此我將 .htaccess 檔修改如下：
RewriteEngine on RewriteCond $1 !^(index\.php|images|css|js|robots\.txt|favicon\.ico) RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule ^(.*)$ ./index.php?/$1 [L,QSA]  主要是在三四行的 %{REQUEST_FILENAME}
這樣修改完就解決問題了!
ref: CodeIgniter 如何去掉 URL 中的 index.</description>
    </item>
    
    <item>
      <title>[Android] AlertDialog with Edittext</title>
      <link>https://blog.kerkerj.in/2011/08/android-alertdialog-with-edittext/</link>
      <pubDate>Tue, 30 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/08/android-alertdialog-with-edittext/</guid>
      <description>AlertDialog.Builder alert = new AlertDialog.Builder(this); alert.setTitle(&amp;quot;Title&amp;quot;); alert.setMessage(&amp;quot;Message&amp;quot;); // Set an EditText view to get user input final EditText input = new EditText(this); alert.setView(input); alert.setPositiveButton(&amp;quot;Ok&amp;quot;, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int whichButton) { String value = input.getText(); Do something with value! } }); alert.setNegativeButton(&amp;quot;Cancel&amp;quot;, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int whichButton) { // Canceled. } }); alert.show();  就這樣XD
ref: http://www.androidsnippets.com/prompt-user-input-with-an-alertdialog</description>
    </item>
    
    <item>
      <title>[Ubuntu] 將 Big5 文字檔轉成 UTF-8 </title>
      <link>https://blog.kerkerj.in/2011/08/ubuntu-%E5%B0%87-big5-%E6%96%87%E5%AD%97%E6%AA%94%E8%BD%89%E6%88%90-utf-8/</link>
      <pubDate>Mon, 15 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/08/ubuntu-%E5%B0%87-big5-%E6%96%87%E5%AD%97%E6%AA%94%E8%BD%89%E6%88%90-utf-8/</guid>
      <description>$ iconv -f big5 -t utf-8 &amp;quot;要轉的big5檔案路徑&amp;quot; -o &amp;quot;轉好後要輸出的檔案名&amp;quot; $ iconv -f big5 -t utf-8 /home/test/bigtext.txt -o /home/test/utf8text.txt  也可以輸入和輸出是同一個檔案
$ iconv -f big5 -t utf-8 /home/test/text.txt -o /home/test/text.txt </description>
    </item>
    
    <item>
      <title>[Eclipse] 將eclipse改成utf-8編碼</title>
      <link>https://blog.kerkerj.in/2011/07/eclipse-%E5%B0%87eclipse%E6%94%B9%E6%88%90utf-8%E7%B7%A8%E7%A2%BC/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/07/eclipse-%E5%B0%87eclipse%E6%94%B9%E6%88%90utf-8%E7%B7%A8%E7%A2%BC/</guid>
      <description>直接附圖囉~~XD</description>
    </item>
    
    <item>
      <title>[Arch linux] 安裝雜記</title>
      <link>https://blog.kerkerj.in/2011/06/arch-linux-%E5%AE%89%E8%A3%9D%E9%9B%9C%E8%A8%98/</link>
      <pubDate>Thu, 30 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/06/arch-linux-%E5%AE%89%E8%A3%9D%E9%9B%9C%E8%A8%98/</guid>
      <description>Arch linux 安裝雜記
本來要研究如何弄到USB上安裝的, 但發現教室有光碟, 所以就沒去研究了
以下是安裝Arch linux的一點簡單紀錄
首先不得不說Arch linux的維基
用關鍵字查詢會有許多結果, 包含中文翻譯
雖然目前還是簡體字較多, 但總比直接看英文還來的快些
若安裝上有問題或是對某個套件的詳細內容有興趣可以到這查
我這次安裝主要是先參考此篇文章: ArchLinux 推廣教學起跑！(09.7.5更新)
寫得很詳細, 雖然是2009年的文章, 但仍非常有參考價值
前半段的步驟會和此篇文章有點類似
 使用光碟開機後
進入 arch linux 安裝介面, 輸入 arch 或是 root 登入,
再輸入 /arch/setup 進入安裝程式
 印象中流程和此篇文章不太一樣, 但是就是照螢幕上所提示的, 你的狀況是什麼就選擇什麼
例如若是用光碟安裝就選擇用光碟安裝, 一步一步由上而下照著主選單目錄作：
 Prepare Hard Drive: 我是使用整顆硬碟所以不需要太繁複的步驟
 Select Package: 我使用預設值, 也不需要什麼步驟
 Install package: 不能跳著作,一定要選擇package後才能安裝,沒選擇package也不會繼續往下作
 Configure System: 照網頁作, 他問什麼就回答自己的情況就好
 文字編輯器我選擇 vi (其實之後裝了vim,我比較熟悉vim,不會用vi的話要選nano)
 必須先編輯兩個檔案: /etc/rc.conf /etc/locale.gen
 rc.</description>
    </item>
    
    <item>
      <title>[Java] ByteArray 的 toString 函式</title>
      <link>https://blog.kerkerj.in/2011/06/java-bytearray-%E7%9A%84-tostring-%E5%87%BD%E5%BC%8F/</link>
      <pubDate>Wed, 15 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/06/java-bytearray-%E7%9A%84-tostring-%E5%87%BD%E5%BC%8F/</guid>
      <description>byte[] 的toString() 是回傳記憶體位置。</description>
    </item>
    
    <item>
      <title>[Java] String split 字串分割</title>
      <link>https://blog.kerkerj.in/2011/06/java-string-split-%E5%AD%97%E4%B8%B2%E5%88%86%E5%89%B2/</link>
      <pubDate>Wed, 15 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/06/java-string-split-%E5%AD%97%E4%B8%B2%E5%88%86%E5%89%B2/</guid>
      <description>String temp = &amp;quot;data1, data2, data3, data4&amp;quot;; //欲分割的字串 String data[] = temp.split(&amp;quot;,&amp;quot;); //分割後存進字串陣列 //印出每一個陣列元素 for(String result:data){ System.out.println(result); } </description>
    </item>
    
    <item>
      <title>[Android] 移除 Activity的 Title bar</title>
      <link>https://blog.kerkerj.in/2011/06/android-%E7%A7%BB%E9%99%A4-activity%E7%9A%84-title-bar/</link>
      <pubDate>Mon, 06 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/06/android-%E7%A7%BB%E9%99%A4-activity%E7%9A%84-title-bar/</guid>
      <description>&amp;lt;activity android:name=&amp;quot;.MyMainClass&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot; android:theme=&amp;quot;@android:style/Theme.NoTitleBar&amp;quot;&amp;gt; &amp;lt;/activity&amp;gt;  style/Theme.NoTitleBar</description>
    </item>
    
    <item>
      <title>[Java] Hex String &amp; Byte Array 轉換</title>
      <link>https://blog.kerkerj.in/2011/06/java-hex-string-byte-array-%E8%BD%89%E6%8F%9B/</link>
      <pubDate>Wed, 01 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/06/java-hex-string-byte-array-%E8%BD%89%E6%8F%9B/</guid>
      <description>public String toHexString(byte[] in){ BigInteger temp = new BigInteger(in); return temp.toString(16); } public byte[] fromHexString(String in){ BigInteger temp = new BigInteger(in, 16); return temp.toByteArray(); }  文章參考自此</description>
    </item>
    
    <item>
      <title>[Anrdroid] 中華電信 APN</title>
      <link>https://blog.kerkerj.in/2011/05/anrdroid-%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1-apn/</link>
      <pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/anrdroid-%E4%B8%AD%E8%8F%AF%E9%9B%BB%E4%BF%A1-apn/</guid>
      <description>若不小心把APN砍掉了可以新增回來(不過通常會有&amp;rdquo;回復預設值&amp;rdquo;的選項)
CHT emome
1. 名稱：CHT emome 2. APN：emome  CHT internet
1. 名稱：CHT internet 2. APN：internet  CHT mms
1. 名稱：CHT mms 2. APN：emome 3. Proxy：10.1.1.1 4. 連線埠：8080 5. MMSC：http://mms.emome.net:8002 6. MMS proxy：10.1.1.1 7. MMSN連線埠：8080 8. MCC：466 9. MNC：92 10. APN類型：mms </description>
    </item>
    
    <item>
      <title>[CS] IEEE 754 表示式</title>
      <link>https://blog.kerkerj.in/2011/05/cs-ieee-754-%E8%A1%A8%E7%A4%BA%E5%BC%8F/</link>
      <pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/cs-ieee-754-%E8%A1%A8%E7%A4%BA%E5%BC%8F/</guid>
      <description>2的補數複習一下 http://entry.hit.edu.tw/~bd92043/1.htm
另一篇IEEE 754 http://tw.myblog.yahoo.com/nicholas-kang/article?mid=39&amp;amp;l=f&amp;amp;fid=5 
PTT 轉錄 https://www.ptt.cc/bbs/CYCU-IM/M.1233932341.A.13C.html
以下是我的筆記：
 IEEE 754 結構 (以下皆只討論Single Precision)
==== S(1) + Exponent(8) + Fraction(23) 共32 bits ====
S判斷正負
作業例子： (-13.625)ten 使用IEEE 754 表示
p.s. IEEE 754表示式是在第一個bit來判斷正負
1. 先轉二進位
(-13)ten = (-1101)two
(0.625)ten = (5&amp;frasl;8)ten = (101&amp;frasl;1000)two
=&amp;gt; (-13.625)ten = (-1101.101)two
2. 正規化表示 (就像科學記號表示法一樣)
=&amp;gt; (-1101.101)two = -1.101101 x 2^3
3. 因此可以得到
=&amp;gt; 1 ________ 10110100000000000000000
4. E = 指數加上 bias 即可 不用二的補數 (IEEE 754的偏差設為127)</description>
    </item>
    
    <item>
      <title>[Java] GridBagLayout</title>
      <link>https://blog.kerkerj.in/2011/05/java-gridbaglayout/</link>
      <pubDate>Tue, 31 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/java-gridbaglayout/</guid>
      <description>只有連結，因為看連結就好了，圖解很累ＸＤ
 (圖片來源：http://blog.csdn.net/dmgactive/archive/2009/06/28/4304567.aspx )
http://download.oracle.com/javase/tutorial/uiswing/layout/gridbag.html http://felixcic.blogspot.com/2010/11/gridbaglayout.html http://home.so-net.net.tw/idealist/Java/AWT/GridBagLayout.html
大致上是設定以下參數
public int anchor public int fill public gridheight Public gridweight public girdx public gridy public Insets insets public int ipadx public int ipady public double weightx public double weighty  大概是這樣</description>
    </item>
    
    <item>
      <title>[Android] 樣式,主題開發雜記</title>
      <link>https://blog.kerkerj.in/2011/05/android-%E6%A8%A3%E5%BC%8F%E4%B8%BB%E9%A1%8C%E9%96%8B%E7%99%BC%E9%9B%9C%E8%A8%98/</link>
      <pubDate>Sat, 28 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/android-%E6%A8%A3%E5%BC%8F%E4%B8%BB%E9%A1%8C%E9%96%8B%E7%99%BC%E9%9B%9C%E8%A8%98/</guid>
      <description>就是改變Android 預設的介面,主題樣式，例如按鈕的樣子
(以下殘體文)
1. style属性在某个空间中起作用，而theme属性则会在整个activity和application中起作用。可以用theme统一整个程序的风格，再用 style微调其中的某些风格。andorid中的某些widget并不遵守theme所定义的风格，比如button上的字。如果你在 activity甚至在application范围内使用theme，button的字还是白色的！估计是这个空间没有引用android:textColor风格，此时只能用button的style属性来改变它了。 (引用自此)
2. Android Styles &amp;amp; Themes（上）——Style
3. Android Styles &amp;amp; Themes（下）——Theme
4. 去掉默认ACTIVITY背景图
5. Button的应用(for android)
6. { Android学习指南 }
(以下為英,中文)
7. custom-button-style-and-theme
(好站!! http://blog.androgames.net/category/android-tutorials/)
8. 使用Android SDK提供的Draw9Patch Tool 
9. 在Android中使用客製化按鈕</description>
    </item>
    
    <item>
      <title>[Git] 一小時搞懂Git</title>
      <link>https://blog.kerkerj.in/2011/05/git-%E4%B8%80%E5%B0%8F%E6%99%82%E6%90%9E%E6%87%82git/</link>
      <pubDate>Thu, 26 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/git-%E4%B8%80%E5%B0%8F%E6%99%82%E6%90%9E%E6%87%82git/</guid>
      <description>這次只貼 Reference, 因為我也還沒看ＸＤ
* http://people.debian.org.tw/~chihchun/2009/01/05/understand-git-in-one-hour/
文中所說的影片：
* http://gitcasts.com/</description>
    </item>
    
    <item>
      <title>[Java] Bouncy Castle Cryptography</title>
      <link>https://blog.kerkerj.in/2011/05/java-bouncy-castle-cryptography/</link>
      <pubDate>Thu, 26 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/java-bouncy-castle-cryptography/</guid>
      <description>這是為了ECT作業所作的筆記 Bouncy Castle Cryptography
這次作業用到了密碼學的技術，助教給了這個網站的library讓大家方便實作
作業內容是：可讀取文字, 圖片, 聲音
先初始化轉成byte後，利用SHA512進行訊息摘要，
再對檔案做RSA加密, 解密,接著是 AES 加密, 解密,
最後使用解密後的內容作還原的動作,
若input的檔案與output的檔案內容一樣表示成功。
以下是這次作業會用到的class
* SHA512Digest 產生訊息摘要MD * AESEngine (對稱式加密) * RSAEngine (非對稱式加密) * RSAKeyParameters ，用來產生RSA的公鑰、私鑰 * KeyParameter * BigInteger  p.s. 以下是在寫作業時遇到的問題解決網址
其實用到了什麼class也是google後從學長的部落格看來的XD
SHA512: SHA512 ouput 問題
發現除了 SHA 的 out 外
其他的加解密產生 output 值要印出時都可以用到：
用： String.format(&amp;quot;%0128x&amp;quot;, new BigInteger(1, byteData));
來取代 Hex.encode(byteData);
RSA:
JavaWorld - 在RSA 解密時的問題 
使用Java進行RSA加解密
RSA using BouncyCastle (有問題 不過解決了 &amp;ndash;&amp;gt; JavaClassCastException)</description>
    </item>
    
    <item>
      <title>[Android] 程式開發雜記</title>
      <link>https://blog.kerkerj.in/2011/05/android-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E9%9B%9C%E8%A8%98/</link>
      <pubDate>Fri, 06 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/android-%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E9%9B%9C%E8%A8%98/</guid>
      <description>最近在寫和Android程式，因此把一些重點筆記下來：
Android中各種JAVA包的功能描述 (ref: http://huenlil.pixnet.net/blog/post/24346240)
在Android的應用程序開發中，通常使用的是JAVA語言，除了需要熟悉JAVA語言的基礎知識之外，還需要瞭解Android提供的擴展的JAVA功能。 在Android中，各種包寫成android.*的方式，重要包的描述如下所示：
* android.app ：提供高層的程序模型、提供基本的運行環境 * android.content ：包含各種的對設備上的數據進行訪問和發佈的類 * android.database ：通過內容提供者瀏覽和操作數據庫 * android.graphics ：底層的圖形庫，包含畫布，顏色過濾，點，矩形，可以將他們直接繪製到屏幕上 * android.location ：定位和相關服務的類 * android.media ：提供一些類管理多種音頻、視頻的媒體接口 * android.net ：提供幫助網絡訪問的類，超過通常的java.net.* 接口 * android.os ：提供了系統服務、消息傳輸、IPC機制 * android.opengl ：提供OpenGL的工具 * android.provider ：提供類訪問Android的內容提供者 * android.telephony ：提供與撥打電話相關的API交互 * android.view ：提供基礎的用戶界面接口框架 * android.util ：涉及工具性的方法，例如時間日期的操作 * android.webkit ：默認瀏覽器操作接口 * android.widget ：包含各種UI元素（大部分是可見的）在應用程序的屏幕中使用  Empty Process, Background Process, Service Process, Visible Process, Foreground Process 初探 (ref: [Android 教學課程] Empty Process , Background Process , Service Process , Visible Process , Foreground Process 初探 )</description>
    </item>
    
    <item>
      <title>[Ubuntu] 11.04 Dropbox 啟動問題</title>
      <link>https://blog.kerkerj.in/2011/05/ubuntu-11.04-dropbox-%E5%95%9F%E5%8B%95%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/05/ubuntu-11.04-dropbox-%E5%95%9F%E5%8B%95%E5%95%8F%E9%A1%8C/</guid>
      <description>我從 Dropbox 上下載 for Ubuntu 的套件，安裝完後，設定的頁面卻遲遲不出來，這真是非常的詭異，所以就查了解決方法。
http://www.webupd8.org/2011/03/get-dropbox-appindicator-to-work-in.html#more
 一樣也是先去下載
 然後執行以下指令（一行一行)
  $cd $wget http://webupd8.googlecode.com/files/fixdropbox $chmod +x fixdropbox $./fixdropbox  應該就可以了，如果要多作設定再：gedit ~/.dropbox.sh
好像有什麼秒數的東西設定吧~~</description>
    </item>
    
    <item>
      <title>[PHP] 簡單的資料庫連結</title>
      <link>https://blog.kerkerj.in/2011/01/php-%E7%B0%A1%E5%96%AE%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E9%80%A3%E7%B5%90/</link>
      <pubDate>Wed, 26 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2011/01/php-%E7%B0%A1%E5%96%AE%E7%9A%84%E8%B3%87%E6%96%99%E5%BA%AB%E9%80%A3%E7%B5%90/</guid>
      <description>我是PHP新手，超級嫩，所以就寫寫簡單的東西，今天來寫關於資料庫的連結。
環境同之前寫的，就是 FreeBSD、MySQL、phpMyadmin 啦~
我將他分成兩個檔案來寫：
一個是負責連結資料庫：connectDB.inc.php
另一個則是測試的 php ：test.php
在 connectDB.inc.php 中設定好 SQL 主機的 IP、使用者名稱密碼等等資料，
然後由 test.php 來呈現資料，直接看 code 最快：
connectDB.inc.php
&amp;lt;?php $cfgDB_HOST = &amp;quot;localhost&amp;quot;; //主機名稱或ip位址 $cfgDB_PORT = &amp;quot;80&amp;quot;; //主機開放連線的port $cfgDB_USERNAME = &amp;quot;account&amp;quot;; //登入主機帳號 $cfgDB_PASSWORD = &amp;quot;password&amp;quot;; //登入主機密碼 $cfgDB_NAME = &amp;quot;db_name&amp;quot;; //資料庫名稱 //建立資料庫連線 $link = mysql_connect($cfgDB_HOST . &amp;quot;:&amp;quot; . $cfgDB_PORT, $cfgDB_USERNAME, $cfgDB_PASSWORD) or die(&amp;quot;Could not connect MySQL&amp;quot;); //選擇資料庫 mysql_select_db($cfgDB_NAME, $link) or die(&amp;quot;Could not select database&amp;quot;); //讓中文正常顯示 mysql_query(&amp;quot;SET NAMES &#39;utf8&#39;&amp;quot;); ?&amp;gt;  test.</description>
    </item>
    
    <item>
      <title>[Win7] 使用Win7 DVD 修復開機選單</title>
      <link>https://blog.kerkerj.in/2010/10/win7-%E4%BD%BF%E7%94%A8win7-dvd-%E4%BF%AE%E5%BE%A9%E9%96%8B%E6%A9%9F%E9%81%B8%E5%96%AE/</link>
      <pubDate>Tue, 26 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2010/10/win7-%E4%BD%BF%E7%94%A8win7-dvd-%E4%BF%AE%E5%BE%A9%E9%96%8B%E6%A9%9F%E9%81%B8%E5%96%AE/</guid>
      <description>灌雙系統 (Win7 / Ubuntu) 後, 刪除Ubuntu不當的話, 重開機可能會出現： (連Win7都進不去)
error : no such partition grub secure&amp;gt;  此時只要將 Win7 光碟放入, 進入修復，選擇命令提示字元, 並輸入：
bootrec.exe /fixboot bootrec.exe /fixmbr  重開機後 Win7 就回來囉</description>
    </item>
    
  </channel>
</rss>