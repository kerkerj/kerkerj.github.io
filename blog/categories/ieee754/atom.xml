<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ieee754 | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/ieee754/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-03T21:52:41+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[CS] IEEE 754 表示式]]></title>
    <link href="http://kerkerj.github.io/blog/2011/05/31/ieee-754/"/>
    <updated>2011-05-31T18:08:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2011/05/31/ieee-754</id>
    <content type="html"><![CDATA[<p>2的補數複習一下  <a href="http://scribefire-next/" title="http://entry.hit.edu.tw/~bd92043/1.htm">http://entry.hit.edu.tw/~bd92043/1.htm</a>
另一篇IEEE 754   <a href="http://tw.myblog.yahoo.com/nicholas-kang/article?mid=39&amp;l=f&amp;fid=5" title="http://tw.myblog.yahoo.com/nicholas-kang/article?mid=39&amp;l=f&amp;fid=5">http://tw.myblog.yahoo.com/nicholas-kang/article?mid=39&amp;l=f&amp;fid=5   </a></p>

<p>作者: Liroy (優白白) 看板: Army-Sir
標題: [教學] 計概 IEEE754 表示式
時間: Fri Jan 14 21:47:11 2011
IEEE754為一種二進位小數的標準表示式，以精確度分成單倍精和雙倍精。</p>

<h1>單倍精(32bit)</h1>

<p>以32個bit來表示一個二進位小數，格式如下
<code>
s(1 bit) exp(8 bit)  fraction(23 bit) =&gt; 1+8+23=32 bit(沒錯吧XXXD)
</code>
化簡方式分成幾步驟(十進位->IEEE754)：
        1. 十進位->二進位
        2. 二進位正規化
        3. exp加上bias值
        4. fraction扣去隱藏位元
eg:  -5(10)化成IEEE754表示式
        1. -5(10) = -101
        2. -101 = -1.01 x 2<sup>2</sup>
        3. 2 + 127 = 129(10) = 10000001(2) - 這個只要一般二進位表示即可
                                           不需用二的補數，因為你已經加上bias了
                s    exp        fraction
        ＝＞    1 10000001 01000000000000000000000
  ps:可能有人會問127是什麼？127為bias，再化成IEEE754時都固定要加上這個值, 又有人問，幹麻加這個，因為這樣的化簡可以簡化兩個IEEE754小數做運算時的步驟,怎樣的簡化，就不在這裡討論範圍內了。(詳見白算盤XXXXD)
  ps2:有人會問幹麻把小數點前的那個1隱藏起來呀。答案是，因為正規化時，小數點前一定是1，所以可以省略，這樣就可以多一個bit來表示小數，可增加小數精確度
  ps3:exp只需要用二進位表示就好了，因為你已經加上bias了，所以不會變負的，不需要用到二的補數來表示這個部份。</p>

<h1>雙倍精(64 bit)</h1>

<p>以64個bit來表示一個二進位小數，格式如下
<code>
s(1 bit) exp(11 bit)  fraction(52 bit) =&gt; 1+11+52=64 bit(沒錯吧XXXD)
</code>
化簡方式分成幾步驟(十進位->IEEE754)：
        1. 十進位->二進位
        2. 二進位正規化
        3. exp加上bias值
        4. fraction扣去隱藏位元
eg:  -5(10)化成IEEE754表示式
        1. -5(10) = -101
        2. -101 = -1.01 x 2<sup>2</sup>
        3. 2 + 1023 = 1025(10) = 10000000001(2)  - 這個只要一般二進位表示即可
        4. 1.01 -> .01 (1被隱藏起來了，剩下小數點後面的東西)
                s     exp        fraction
        ＝＞    1 10000000001 0100&hellip;0(好多零～囧 1後面一共有50 bit，自己算吧)
  備註：雙倍精bias為1023  (因為exp bit一共有11個)</p>

<hr />

<p>另外單倍精exp最多只能到11111110 ，最小也只能到達00000001
妳會納悶11111111 和 00000000 怎麼不用- -a
因為呀！！ 這兩個拿來當另外處理的
exp＝255  fraction≠0   =>NaN (表非數字)
exp＝255  fraction＝0   =>±∞(依s來區別是正還是負)
exp＝0    fraction≠0   =>不足位,underflow,denormalized(太小了，小到無法表示)
exp＝0    fraction＝0   =>用來表示0.0這個數 (有的版本還會分正負零)
雙倍精依此類推，exp無法使用11111111111 和 00000000000
例外處理所表示的跟單倍精一樣，只是255改成2047
<code>
......|-------------------|..|..|-------------------|......
      *--可用IEEE754表示--*  0  *--可用IEEE754表示--*
</code>
亮粉紅表示overflow，數字太大無法表示，∞
亮黃色表示underflow，數字太小無法表示，denormalized number
&ndash; 表示可用IEEE754正規表示式表示的範圍 (中間的0也可以表示喔！！別把他忽略了)</p>

<hr />

<p>此外補充：
IEEE754 單倍精正規表示範圍最大正數：≒  2 x 10<sup>38</sup>
                          最小正數：≒  2 x 10^-38
                          最大負數：≒ -2 x 10^-38
                          最大負數：≒ -2 x 10<sup>38</sup>
IEEE754 雙倍精正規表示範圍最大正數：≒  2 x 10<sup>308</sup>
                          最小正數：≒  2 x 10^-308
                          最大負數：≒ -2 x 10^-308
                          最大負數：≒ -2 x 10<sup>308</sup></p>

<hr />

<h1>最大數和最小數證明</h1>

<p> IEEE754單倍精最大正數->0 11111110 11111111111111111111111  (IEEE754)
  => + 1.11111111111111111111111 x 2<sup>254-127</sup> ≒ 2.0 x 2<sup>127</sup> ≒  2 x 10<sup>38</sup>
      ^^^^^^^^^^^^^^^^^^^^^^^^^->大約等於2.0，大家應該沒異議吧！
 IEEE754單倍精最小正數->0 00000001 00000000000000000000000  (IEEE754)
  => + 1.00000000000000000000000 x 2<sup>1-127</sup>  ≒ 1.0 x 2^-126 ≒  2 x 10^-38
其他依此類推，我懶著打了ˊˋ。數零數到我眼睛都花了～ε(┬┬＿┬┬)3
這應該就全部IEEE754的精隨了！！～有問題再問吧&lt;(<em>.</em>)></p>

<p>&mdash;以上為轉錄
以下是我的筆記：
 IEEE 754 結構 (以下皆只討論Single Precision)
 ==== S(1) + Exponent(8) + Fraction(23)   共32 bits ====
 S判斷正負
 作業例子：  (-13.625)ten 使用IEEE 754 表示
 p.s. IEEE 754表示式是在第一個bit來判斷正負
 1. 先轉二進位
 (-13)ten = (-1101)two
 (0.625)ten = (5/8)ten = (101/1000)two
 => (-13.625)ten = (-1101.101)two
 2. 正規化表示 (就像科學記號表示法一樣)
 => (-1101.101)two = -1.101101 x 2<sup>3</sup>
 3. 因此可以得到
 => 1 ________ 10110100000000000000000
 4. E = 指數加上 bias 即可   不用二的補數  (IEEE 754的偏差設為127)
 => 剛剛算出來的指數是3，所以
 => 3 + 127 = 130
 => 130 轉二進位為：1000 0010
 因此 (-13.625)ten = 1 1000 0010 10110100000000000000000  (空白只是觀看容易)
 驗證一下ㄎㄎ
 <a href="http://www.h-schmidt.net/FloatApplet/IEEE754.html" title="http://www.h-schmidt.net/FloatApplet/IEEE754.html">http://www.h-schmidt.net/FloatApplet/IEEE754.html</a></p>
]]></content>
  </entry>
  
</feed>
