<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rvm | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/rvm/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-08-26T16:42:04+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Sublime Text 2] Integration With RVM and Rspec]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/09/sublime-text-2-integration-with-rvm-and-rspec/"/>
    <updated>2014-01-09T02:17:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/09/sublime-text-2-integration-with-rvm-and-rspec</id>
    <content type="html"><![CDATA[<p>Ruby:</p>

<p><code>~/Library/Application\ Support/Sublime\ Text\ 2/Packages/Ruby/Ruby.sublime-build</code>
```json
{
  &ldquo;env&rdquo;:{</p>

<pre><code>  "PATH":"${HOME}/.rvm/bin:${PATH}"
</code></pre>

<p>  },
  &ldquo;cmd&rdquo;: [&ldquo;rvm-auto-ruby&rdquo;, &ldquo;$file&rdquo;],
  &ldquo;file_regex&rdquo;: &ldquo;^(&hellip;<em>?):([0-9]</em>):?([0-9]*)&rdquo;,
  &ldquo;selector&rdquo;: &ldquo;source.ruby&rdquo;
}
```</p>

<p><a href="http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/">http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] RoR Environment]]></title>
    <link href="http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment/"/>
    <updated>2013-12-20T03:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment</id>
    <content type="html"><![CDATA[<h2>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)</h2>

<p>p.s.
If you don&rsquo;t use RVM, you can just follow the instruction from <a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu">Passenger offcial website</a>. It will be easier.
Plus, I installed all these things by Vagrant.</p>

<h2>First thing to do</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get upgrade
</code></p>

<h2>Pre-setup: install necessary packages</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
</code></p>

<h2>Get .bashrc from my repo (Optional)</h2>

<p><code>
$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
</code></p>

<h2>Get .vimrc from my repo (Optional)</h2>

<p><code>
$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
</code></p>

<h2>RVM and Ruby 2.0 (RVM: Ruby version management)</h2>

<p>```
$ \curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile
$ rvm requirements
$ echo &lsquo;gem: &mdash;no-ri &mdash;no-rdoc&rsquo;  >> ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile</p>

<p>add this line to .bash_rc or .bash_profile (if you don&rsquo;t use my .bash_profile)
[[ -s &ldquo;$HOME/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; . &ldquo;$HOME/.rvm/scripts/rvm&rdquo; # Load RVM function</p>

<p>$ rvm use 2.0.0 &mdash;default
<code>
Now we should be using ruby2.0.0 by RVM, let's check:
</code>
$ rvm list
=<em> ruby-2.0.0-p353 [ x86_64 ]
// => &ndash; current
// =</em> &ndash; current &amp;&amp; default
//  * &ndash; default
```</p>

<h2>Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)</h2>

<p><code>
$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev
</code></p>

<h2>Passenger with NGINX</h2>

<p>```
$ gem install passenger
$ rvmsudo passenger-install-nginx-module
choose 2: customize</p>

<pre><code>a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
c. default
</code></pre>

<p>```</p>

<h2>Get nginx script</h2>

<p>If you use /opt/nginx as root dir, you don&rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from <a href="https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin">linode</a>)
<code>
$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
</code>
The nginx default public folder will be in <code>/etc/nginx/html</code>
check nginx version:
<code>
$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
</code></p>

<h2>Install php5-fpm</h2>

<p><code>``
$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini
//(find and change to</code>cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify
location ~ .php$ {</p>

<pre><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;
# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
# With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
include fastcgi_params;
</code></pre>

<p>}
$ echo &ldquo;&lt;?php phpinfo(); ?>&rdquo; | sudo tee -a /etc/nginx/html/phpinfo.php
<code>
Restart all:
</code>
$ sudo service php5-fpm restart
$ sudo service nginx restart
```</p>

<h2>Install rails</h2>

<p><code>
$ gem install rails
</code></p>

<h2>RoR environment check</h2>

<p><code>
$ ruby -v
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
</code>
If you passed, you are good to go!</p>

<h2>Deploy Rails application by nginx:</h2>

<p>Assume your rails application path is: <code>/home/vagrant/projects/subapp/</code>
(by <code>rails new subapp</code>)
then, the <code>/etc/nginx/conf/nginx.conf</code> will be:
```
http {</p>

<pre><code>...
server {
    listen 80;
    server_name localhost;
    root /etc/nginx/html;

    # This block has been added.
    location ~ ^/subapp(/.*|$) {
        passenger_base_uri /subapp;
        alias /home/vagrant/projects/subapp/public$1;  # &lt;-- be sure to point to 'public'!
        passenger_app_root /home/vagrant/projects/subapp;
        passenger_enabled on;
        rails_env development; # or production
    }
}
...
</code></pre>

<p>}
<code>``
restart nginx, you can access the url:</code><a href="http://localhost/subapp/">http://localhost/subapp/</a>`</p>

<h2>Install MySQL and Mysql adapter</h2>

<p><code>
$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
</code></p>

<blockquote><p>The gem you installed is placed in RVM&rsquo;s ruby, if you are using RVM&rsquo;s ruby.</p></blockquote>

<p>If you use MySQL in your rails application, remember to change the database.yml.</p>

<p>p.s. If you want to use phpmyadmin, you can do:<br/>
<code>
$ sudo apt-get install php5-mysql
</code>
download phpmyadmin, then extract to <code>/etc/nginx/html/phpmyadmin</code><br/>
then start the server, access: <code>http://localhost/phpmyadmin/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] [RoR] Install With Rvm]]></title>
    <link href="http://kerkerj.github.io/blog/2012/04/27/ubuntu-ror-install-with-rvm/"/>
    <updated>2012-04-27T16:44:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2012/04/27/ubuntu-ror-install-with-rvm</id>
    <content type="html"><![CDATA[<p>以下都是以 Ubuntu 11.10為操作環境
主要目標為使用 rvm (Ruby Version Manager)來管理 ruby 版本並安裝 ruby 和 rails</p>

<p>先安裝一些必要套件 ( ex. openssl, zlib1g-dev &hellip;.etc. )
<code>
$sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev nodejs
</code>
安裝完基本套件後, 有兩種選擇:
1. 直接在系統上安裝 ruby ( sudo apt-get install ruby )
2. 使用 rvm 來管理 ruby 版本
基本上有 rvm 來管理 ruby 版本是比較方便的, 可以隨時切換不同的 ruby 版本
(不過在使用一些套件上會有一些問題需要排解, 本篇最底下有 trouble shooting)</p>

<h1>RVM</h1>

<p>安裝:
<code>
$bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
$echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code>
Load RVM function:  <code>~/.bash_profile</code></p>

<p>指令:</p>

<blockquote><p>rvm info &ndash;> 查看 rvm 做的設定
rvm list known &ndash;> 列出所有可安裝的套件
rvm list &ndash;> 列出目前已安裝的套件
rvm install &ldquo;package_name&rdquo; &ndash;> 安裝套件
rvm remove &ldquo;package_name&rdquo; &ndash;> 移除套件
rvm 1.9.2 &mdash;default &ndash;> 設定預設的 ruby 版本</p></blockquote>

<p>假設系統上的 ruby 版本是 1.9.1, 而我用 rvm 安裝了 ruby1.9.3
那麼目前系統上的預設 ruby 版本是 1.9.3, 用 <code>ruby -v</code> 測試看看
如果要切換回系統的 ruby 版本, 則使用 <code>rvm system</code>
要切換回來的話,則:</p>

<pre><code>    `rvm 1.9.3` (直接輸入有安裝過的 ruby 版號即可)
    or
    `rvm use 1.9.3`
</code></pre>

<p>以上是 rvm 的一些簡單指令, 因為今天是要安裝 ruby on rails
所以先安裝 ruby 吧:
<code>
$rvm pkg install openssl (詳見最後的 trouble shooting)
$rvm install 1.9.3 --with-openssl-dir=$rvm_path/usr
</code></p>

<h1>Gem</h1>

<p>指令:</p>

<blockquote><p>gem list &ndash;> 列出目前已安裝的套件
gem install &ldquo;package_name&rdquo; &ndash;> 安裝套件不同的 ruby 版本有不同的 gem</p></blockquote>

<p>如果 rvm 裡有 1.9.1 和 1.9.3 兩個乾淨的 ruby 版本
目前使用的 ruby 版本是 1.9.3
則在 gem install rails 後
使用 gem list 則會看到 一大堆的套件
接著切換到 1.9.1 執行 gem list 後則會發現沒有任何東西</p>

<p>在安裝 gem 套件時可以加上一些參數
如: 不想要有說明文件 (通常這些東西都蠻肥大的) 就可以加上
<code>gem install "gem_name" --no-ri --no-rdoc</code>
以上是 gem 在 rvm 裡的一些概念, 因為今天是要安裝 ruby on rails
所以來安裝 rails 吧:
<code>gem install rails --no-ri --no-rdoc (不要安裝文件, 速度會比較快)</code>
如果發現用 gem 安裝套件時需要 root 權限, 表示目前使用的 ruby 版本是系統的版本</p>

<h1>Gemset</h1>

<p>rvm 提供了方便的功能 gemset, 就把它看作 gem 的分類資料夾
如果說我想要在 ruby 1.9.2 底下安裝兩種 rails 版本, 又怕會衝突該怎麼辦?
就可以用 gemset 了</p>

<p>樹狀架構大概如下:</p>

<pre><code>    rvm -&gt; 1.9.1 -&gt; gemset: rails-2.3.9
                            rails-3.1.1*
        -&gt; 1.9.3 -&gt; gemset: rails-2.3.9
                            rails-3.1.1
</code></pre>

<p>可以解釋為: 在 rvm 的 ruby 1.9.1 底下有兩個 gemset, 分別是 rails-2.3.9 和 rails-3.1.1</p>

<p>指令:</p>

<blockquote><p>rvm gemset list &ndash;> 查看目前建立的 gemset
rvm 1.9.2@rails-3.1.1 &ndash;> 在 ruby 1.9.2 版本底下使用 rails-3.1.1 這個 gemset
rvm gemset create &ldquo;gemset_name&rdquo; &ndash;> 建立 gemset
rvm gemset use &ldquo;gemset_name&rdquo; &ndash;> 使用某個 gemset
rvm gemset empty &ldquo;gemset_name&rdquo; &ndash;> 清空某個 gemset (只是清空)
rvm gemset delete &ldquo;gemset_name&rdquo; &ndash;> 刪除某個 gemset以上就是關於 rvm 的二三事, 做到這邊, ruby 和 rails 套件應該就安裝完了</p></blockquote>

<p>最後安裝資料庫的 adapter , 這裡是用 sqlite
<code>gem install sqlite3 --no-ri --no-rdoc</code>
接著就可以建立第一個 rails 專案:</p>

<blockquote><p>mkdir project
cd project
rails new demo
rails server連上 localhost:3000 就是起始畫面了</p></blockquote>

<h1>Trouble shooting:</h1>

<h2>Error message1: openssl  LoadError</h2>

<blockquote><p>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError)
or
Gem::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B</p></blockquote>

<p>Solution:</p>

<blockquote><p>rvm pkg install openssl
rvm remove 1.9.3
rvm install 1.9.3 &mdash;with-openssl-dir=$rvm_path/usr
然後將 rvm 裡的 ssl certs 資料夾移除, 改成直接讀系統的 ssl certs
rmdir $rvm_path/usr/ssl/certs
ln -s /etc/ssl/certs $rvm_path/usr/ssl</p></blockquote>

<h2>Error message2:</h2>

<blockquote><p>when excuting the command &ldquo;gem install rails&rdquo;
ERROR:  Loading command: install (LoadError)
cannot load such file &mdash; zlib
ERROR:  While executing gem &hellip; (NameError)
uninitialized constant Gem::Commands::InstallCommand</p></blockquote>

<p>Solution:</p>

<blockquote><p>rvm remove 1.9.3 (depends on your ruby version, if your system also has ruby, remove it, too.)
sudo apt-get install zlib1g-dev先將 rvm 的 ruby 和 system 的 ruby 移除
然後安裝 zlib1g-dev
安裝 system 和 rvm 的 ruby 就可以了
Remove system&rsquo;s ruby, and all ruby versions in rvm
Install zlib1g-dev, then install ruby in system and rvm.</p></blockquote>

<h2>Error message3:</h2>

<blockquote><p>ExecJS::RuntimeUnavailable</p></blockquote>

<p>Solution:
<code>sudo apt-get install nodejs</code>
Reference:
<a href="http://www.openfoundry.org/tw/tech-column/8513-rvm-ruby-environment-version-manager">RVM &ndash; Ruby enVironment (Version) Manager</a></p>
]]></content>
  </entry>
  
</feed>
