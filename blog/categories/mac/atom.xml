<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-27T23:12:36+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Lua on Mac]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/06/writing-lua-on-mac/"/>
    <updated>2014-08-06T01:36:57+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/06/writing-lua-on-mac</id>
    <content type="html"><![CDATA[<h2>Install lua on mac</h2>

<p>I&rsquo;m not sure that whether Lua is built on mac originally.</p>

<p><span style="color:red;">(Ok, tested on Mac OSX 10.9, there is Lua in it.)</span></p>

<p>So I installed Lua via <a href="http://brew.sh/">Homebrew</a>.</p>

<p>Install homebrew (optional)</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>Install Lua by homebrew</p>

<pre><code>brew install lua
</code></pre>

<h2>Writing Lua</h2>

<p>You can use command: <code>lua</code> to interact with lua. (just like <code>php -a</code> or <code>irb</code>)</p>

<pre><code class="lua hello.lua">print("Hello World")
</code></pre>

<pre><code class="lua fact.lua">function fact(n)
    if n == 0 then
        return 1
    else
        return n * fact(n-1)
    end
end

print("enter a number:")
num = io.read("*number") 
print(fact(num))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac] Update Openssl on Mac]]></title>
    <link href="http://kerkerj.github.io/blog/2014/06/16/mac-update-openssl-on-mac/"/>
    <updated>2014-06-16T09:16:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/06/16/mac-update-openssl-on-mac</id>
    <content type="html"><![CDATA[<p>First of all, you need &lsquo;brew&rsquo; (<a href="http://brew.sh/">http://brew.sh/</a>)</p>

<pre><code>$ brew update
$ brew install openssl
$ brew link --force openssl

$openssl version -a
</code></pre>

<p>If it&rsquo;s still the old version, you shoud:</p>

<pre><code>$ sudo rm /usr/bin/openssl  #remove the old binary 
$ sudo ln -s /usr/local/Cellar/openssl/1.0.1h/bin/openssl /usr/local/bin
(1.0.1h -&gt; the latest version)
</code></pre>

<p>ref: <a href="http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x">http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac OSX] Bash-it]]></title>
    <link href="http://kerkerj.github.io/blog/2013/11/13/mac-osx-bash-it/"/>
    <updated>2013-11-13T08:43:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/11/13/mac-osx-bash-it</id>
    <content type="html"><![CDATA[<p>bash-it:
<code>
$git clone http://github.com/revans/bash-it.git ~/.bash_it
$~/.bash_it/install.sh
</code>
他會幫你自動備份原來的 <code>.bash_profile</code> 為 <code>.bash_profile.bak</code> 所以別擔心
當他在問你要使用什麼 completion 或 script 之類的東西時，
選擇 &lsquo;some&rsquo; 就可以自己選擇~</p>

<p>有許多的 theme 及 package , completion 等等可以用，很方便！</p>

<p><a href="http://www.scholarslab.org/research-and-development/customizing-bash/">http://www.scholarslab.org/research-and-development/customizing-bash/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac OSX] Homebrew Update Error]]></title>
    <link href="http://kerkerj.github.io/blog/2013/11/13/mac-osx-homebrew-update-error/"/>
    <updated>2013-11-13T08:24:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/11/13/mac-osx-homebrew-update-error</id>
    <content type="html"><![CDATA[<p>failed log:
<code>
$sudo brew update
error: Your local changes to the following files would be overwritten by merge:
    Library/Aliases/gperftools
    Library/Aliases/hashdeep
    Library/Aliases/htop
    Library/Aliases/nodejs
    Library/Aliases/ocio
    Library/Aliases/oiio
        ....
error: The following untracked working tree files would be overwritten by merge:
    Library/Aliases/gperftools
    Library/Aliases/hashdeep
    Library/Aliases/htop
    Library/Aliases/nodejs
    Library/Aliases/ocio
    Library/Aliases/oiio
        ....
Aborting
Error: Failure while executing: git pull -q origin refs/heads/master:refs/remotes/origin/master
</code></p>

<p>Solution:
<code>
$ cd /usr/local
$ git fetch origin
$ git reset --hard origin/master
</code></p>

<p><a href="http://stackoverflow.com/questions/10762859/brew-update-the-following-untracked-working-tree-files-would-be-overwritten-by">reference</a>
<a href="http://git-scm.com/2011/07/11/reset.html">[read]</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac OSX] Slow-Opening Terminal Windows]]></title>
    <link href="http://kerkerj.github.io/blog/2013/11/13/mac-osx-slow-opening-terminal-windows/"/>
    <updated>2013-11-13T07:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/11/13/mac-osx-slow-opening-terminal-windows</id>
    <content type="html"><![CDATA[<p>最近在開 mac 的 iTerm.app 或者是內建的終端機都覺得卡卡的，
之前以為是 .bashrc 載入太多東西導致的，所以把一些掛載的 bin 目錄都註解掉，
但是還是沒解決，心想不對勁，就順手 google 了一下&hellip;</p>

<p>我執行了下列語法：
&#8220;`
$ time /usr/libexec/path_helper
PATH=&ldquo;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/Users/ABC/android-sdks/platform-tools:/Users/ABC/android-sdks/tools:/Application/Vagrant/bin&rdquo;; export PATH;</p>

<p>real    0m0.043s
user    0m0.001s
sys 0m0.002s
<code>``
接著我把</code>PATH<code>的內容寫進</code>.bash_profile`，問題竟然就解決了&hellip;
速度飛快～～</p>

<p>後來看到一篇 <a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">.bash_profile vs.bashrc</a>
雖然大家都知道 <code>.bash_profile</code> 是在登入時執行（即是輸入帳號密碼時），
而 <code>.bashrc</code> 是在系統內非登入狀態時開啟 prompt 時執行，
但是！！ Mac OSX 是個例外～是個例外～是個例外～&hellip;&hellip;.=.=</p>

<blockquote><p>Mac OS X — an exception
An exception to the terminal window guidelines is Mac OS X&rsquo;s Terminal.app, which runs a login shell by default for each new terminal window, calling .bash_profile instead of .bashrc. Other GUI terminal emulators may do the same, but most tend not to.</p></blockquote>

<p>所以通常解決方法是在 <code>.bash_profile</code> 寫入以下 script:
<code>
if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi
</code></p>

<p>不過我之前就這樣做了，這次成功的方式是直接在 <code>.bash_profile</code> 寫入 PATH 路徑&hellip;
猜想應該是在 <code>.bash_profile</code> 預先讀取而加快速度的
如果把原本的 <code>.bashrc</code> 的 <code>PATH</code> 註解掉都移到 <code>.bash_profile</code> 會再稍快一些</p>
]]></content>
  </entry>
  
</feed>
