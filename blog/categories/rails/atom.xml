<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-23T15:04:15+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capistrano With Rails - Basic Notes]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/05/capistrano-with-rails-basic-notes/"/>
    <updated>2014-08-05T22:36:48+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/05/capistrano-with-rails-basic-notes</id>
    <content type="html"><![CDATA[<p>詳細的東西還是看 project&rsquo;s github page 比較快 - <a href="https://github.com/capistrano/capistrano">Capistrano@github</a></p>

<p>Capistrano 剛開始寫 deploy script 時真的會有點搞不太懂 XD<br/>
記錄一下使用 &lsquo;capistrano&rsquo; 把特定的 github repo 抓到 remote server</p>

<h2>安裝</h2>

<p>先在 Gemfile 加入:</p>

<pre><code>gem 'capistrano', '~&gt; 3.2.0'   
</code></pre>

<p>然後安裝~</p>

<pre><code>bundle install
</code></pre>

<p>步驟大概會是：</p>

<p>假設已經寫完 capistrano 了，執行 script 時，<br/>
capistrano 會先利用 script 裡提供的 server ip 以及 public key，<br/>
先連線到 remote server，接著再到 github 上拉 code 到指定的目錄裡，<br/>
再重開 server。</p>

<h2>產生相關檔案</h2>

<pre><code>bundle exec cap install 
</code></pre>

<p>會產生以下檔案:  (copy from <a href="https://github.com/capistrano/capistrano">Capistrano@github</a>)</p>

<pre><code>├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
</code></pre>

<p>deploy.rb 通常是設定 source control 的類型 (可以設定 git, hg, svn)， <br/>
project repo 的路徑，要 deploy 到 server 的哪個目錄等等，<br/>
<code>config/deploy/*</code> 底下的檔案則是根據不同的 stage 分別設定，<br/>
以下是 deploy.rb, production.rb 的一些簡單設定</p>

<pre><code class="ruby deploy.rb"># config valid only for Capistrano 3.1
lock '3.2.1'

set :application, 'application_name'
set :repo_url, 'github_repo_url'

set :deploy_via, :copy

# Default branch is :master
# ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }.call

# Default deploy_to directory is /var/www/my_app
set :deploy_to, '/server/www/path/'

# Default value for :scm is :git
set :scm, :git

# Default value for :format is :pretty
set :format, :pretty

# Default value for :log_level is :debug
set :log_level, :debug

# Default value for :pty is false
# set :pty, true

# Default value for :linked_files is []
# set :linked_files, %w{config/database.yml}

# Default value for linked_dirs is []
# set :linked_dirs, %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

# Default value for default_env is {}
# set :default_env, { path: "/opt/ruby/bin:$PATH" }

# Default value for keep_releases is 5
# set :keep_releases, 5

namespace :deploy do

  desc 'Restart application'
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # Your restart mechanism here, for example:
      execute :mkdir, '-p', "#{ release_path }/tmp"
      execute :touch, release_path.join('tmp/restart.txt')
    end
  end

  after :publishing, :restart

  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #  execute :rake, 'cache:clear'
      # end
    end
  end

end
</code></pre>

<pre><code class="ruby production.rb"># Simple Role Syntax
# ==================
# Supports bulk-adding hosts to roles, the primary server in each group
# is considered to be the first unless any hosts have the primary
# property set.  Don't declare `role :all`, it's a meta role.

role :app, %w{app@server}
role :web, %w{web@server}
role :db,  %w{db@server}


# Extended Server Syntax
# ======================
# This can be used to drop a more detailed server definition into the
# server list. The second argument is a, or duck-types, Hash and is
# used to set extended properties on the server.

server 'server_ip', user: 'server_user', roles: %w{app}, my_property: :my_value


# Custom SSH Options
# ==================
# You may pass any option but keep in mind that net/ssh understands a
# limited set of options, consult[net/ssh documentation](http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start).
#
# Global options
# --------------
#  set :ssh_options, {
#    keys: %w(/home/rlisowski/.ssh/id_rsa),
#    forward_agent: true
#    auth_methods: %w(password)
#  }
#
# And/or per server (overrides global)
# ------------------------------------
 server 'server_ip',
   user: 'server_user',
   ssh_options: {
     keys: %w(/user/.ssh/id_rsa),
     forward_agent: false,
     auth_methods: %w(publickey password)
   }
</code></pre>

<p>設定完後，因為這邊是設定 production.rb<br/>
因此執行以下指令 deploy 到 production server
<code>console
bundle exec cap production deploy
</code></p>

<p>如果 <code>exit status 0 (successful).</code> <br/>
那就是成功啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Rails Server Env With Rbenv on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04/"/>
    <updated>2014-07-30T11:36:54+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<pre><code>nodejs v0.10.25 (for rails javascript engine)

rbenv 0.4.0-98-g13a474c

ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]

Rails 4.1.4

nginx version: nginx/1.6.0

Phusion Passenger version 4.0.48

mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3
</code></pre>

<h2>Installing Ruby &amp; Rails</h2>

<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm
</code></pre>

<p>Use rbenv</p>

<pre><code>cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
exec $SHELL

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
exec $SHELL

rbenv install 2.1.2
exec $SHELL

rbenv global 2.1.2
ruby -v
</code></pre>

<p>Don&rsquo;t install rdoc when installing gems</p>

<pre><code>echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc
</code></pre>

<p>Install rails</p>

<pre><code>gem install rails
exec $SHELL
rails -v
</code></pre>

<h2>Installing Nginx with passenger</h2>

<pre><code># Install Phusion's PGP key to verify packages
gpg --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
gpg --armor --export 561F9B9CAC40B2F7 | sudo apt-key add -

# Add HTTPS support to APT
sudo apt-get install apt-transport-https

# Add the passenger repository
sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' &gt;&gt; /etc/apt/sources.list.d/passenger.list"
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update

# Install nginx and passenger
sudo apt-get install nginx-full passenger
</code></pre>

<p>Edit passenger configuration in <code>/etc/nginx/nginx.conf</code></p>

<pre><code>##
# Phusion Passenger
##
# Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
##

passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;

passenger_ruby /usr/bin/ruby; #change this line

# passenger_ruby /home/yourpath/.rbenv/shims/ruby; # If you use rbenv
# Use `which ruby`
</code></pre>

<h2>Installing MySQL</h2>

<pre><code>sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></pre>

<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] ActionController::InvalidAuthenticityToken When Useing Rails4 as API]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/03/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails-as-api/"/>
    <updated>2014-07-03T04:02:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/03/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails-as-api</id>
    <content type="html"><![CDATA[<p>change<br/>
<code>protect_from_forgery with: :exception</code><br/>
to<br/>
<code>protect_from_forgery with: :null_session</code><br/>
in <code>ApplicationController</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] PUT v.s. PATCH]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/02/rails-put-vs-patch/"/>
    <updated>2014-01-02T07:39:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/02/rails-put-vs-patch</id>
    <content type="html"><![CDATA[<p>According to rails convention,</p>

<p>PUT is used for updating an existing resource</p>

<p>POST is used for creating a new resource</p>

<p>In rails 4, PUT has been changed to PATCH to avoid confusion.</p>

<pre><code>     posts GET    /posts(.:format)                            {:action=&gt;"index", :controller=&gt;"posts"}
          POST   /posts(.:format)                            {:action=&gt;"create", :controller=&gt;"posts"}
 new_post GET    /posts/new(.:format)                        {:action=&gt;"new", :controller=&gt;"posts"}
edit_post GET    /posts/:id/edit(.:format)                   {:action=&gt;"edit", :controller=&gt;"posts"}
     post GET    /posts/:id(.:format)                        {:action=&gt;"show", :controller=&gt;"posts"}
          PUT    /posts/:id(.:format)                        {:action=&gt;"update", :controller=&gt;"posts"}
          DELETE /posts/:id(.:format)                        {:action=&gt;"destroy", :controller=&gt;"posts"}
</code></pre>

<p>延伸閱讀：ihower - <a href="http://ihower.tw/blog/archives/6483">HTTP Verbs: 談 POST, PUT 和 PATCH 的應用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] List of Rails Model Type (MySQL)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql/"/>
    <updated>2014-01-02T07:38:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql</id>
    <content type="html"><![CDATA[<p>:binary<br/>
:boolean<br/>
:date<br/>
:datetime<br/>
:decimal<br/>
:float<br/>
:integer<br/>
:primary_key<br/>
:string<br/>
:text<br/>
:time<br/>
:timestamp</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column">http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column</a></p>
]]></content>
  </entry>
  
</feed>
