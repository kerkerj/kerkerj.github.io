<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-18T18:33:24+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Swift-d18] - Basic - Customize TableViewCell]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/18/swift-d18/"/>
    <updated>2014-10-18T18:28:23+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/18/swift-d18</id>
    <content type="html"><![CDATA[<p>今天的主題延續昨天的 Navigation + TableView</p>

<p>我們要來客製化 TableViewCell</p>

<p>通常 TableView 可以被拿來做很多事情，不僅只是像是 ListView 而已</p>

<p>而 TableViewCell 可以做更深度的切版，排列元素</p>

<p>因此自定 TableViewCell 是一件算是還蠻重要的事情</p>

<p>下面的 Code 是延續昨天的專案</p>

<p>我先把已更改過的程式碼貼上來:</p>

<pre><code class="swift">import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    @IBOutlet var tableView: UITableView!

    var arr = ["A", "B", "C"]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return arr.count;
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        var cell: CustomTableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as CustomTableViewCell?

        if cell == nil {
            var objects = NSBundle.mainBundle().loadNibNamed("CustomTableViewCell", owner: self, options: nil)
            cell = objects[0] as? CustomTableViewCell
        }

        cell!.textLabel?.text = arr[indexPath.row]

        return cell!
    }

    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        var detailViewController = DetailViewController()
        detailViewController.title = arr[indexPath.row]
        self.navigationController?.pushViewController(detailViewController, animated: true)
    }

    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return 165.0
    }
}
</code></pre>

<p>今天要新增一個檔案, 我們就稱之為 CustomTableViewCell</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.36.49.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.37.37.png" alt="image" /></p>

<p>就會出現一份 .swift 檔案以及 .xib 檔案了</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.38.06.png" alt="image" /></p>

<p>接下來我們簡單編輯 .xib 檔案，將背景顏色換成其他顏色，以及將它的長度拉高</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.39.49.png" alt="image" /></p>

<p>這樣其實就很簡單地完成了一個小客製化的 TableViewCell 了</p>

<p>那我們要怎麼讓原本的 TableView 吃到這個 TableViewCell 呢?</p>

<p>看以下的 function:</p>

<pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
    var cell: CustomTableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as CustomTableViewCell?

    if cell == nil {
        var objects = NSBundle.mainBundle().loadNibNamed("CustomTableViewCell", owner: self, options: nil)
        cell = objects[0] as? CustomTableViewCell
    }

    cell!.textLabel?.text = arr[indexPath.row]

    return cell!
}
</code></pre>

<p>我們將 cell 的類別更改成了 CustomTableViewCell</p>

<p>直接使用剛剛產生的 .swift 類別來產生新的 TableViewCell</p>

<p>並且如果 cell == nil ，則會將 Nib 載入</p>

<p>最後設定該 textLabel ，返回 cell</p>

<p>若使用最一開始的程式碼 apply changes</p>

<p>執行！</p>

<p>應該就可以看到成果了!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2012.01.35.png" alt="image" /></p>

<p>p.s. 這篇可能實作上會有 bug (我寫的), 就先跳過吧 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d17] - Basic - Navigation View + TableView]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/17/swift-d17/"/>
    <updated>2014-10-17T21:17:03+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/17/swift-d17</id>
    <content type="html"><![CDATA[<p>今天要把 Navigation View 和 Table View 結合起來!</p>

<p>把 NavigationController 拉進 Storyboard</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.47.53.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.48.28.png" alt="image" /></p>

<p>將程式進入點指向 NavigationController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.48.28.png" alt="image" /></p>

<p>把原本程式自動產生的 UIViewController 刪除</p>

<p>把自動產生的 TableViewController 刪除!</p>

<p>拉一個新的 UIViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.06.29.png" alt="image" /></p>

<p>將 NavigationController 的 RootViewController 指向新的 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.07.20.png" alt="image" /></p>

<p>把 TableView 拉進 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.08.48.png" alt="image" /></p>

<p>再將 TableViewCell 拉進 TableView</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.09.16.png" alt="image" /></p>

<p>再點選 ViewController, 到右上角中找尋 Custom Class</p>

<p>將 ViewController.swift 指定給該 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.18.11.png" alt="image" /></p>

<p>接著把 UITableView 引進程式碼裡做關聯</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.19.25.png" alt="image" /></p>

<p>再來就是實作 Table 的 data 了</p>

<pre><code class="swift">class ViewController: UIViewController, UITableViewDataSource {
</code></pre>

<pre><code>class ViewController: UIViewController, UITableViewDataSource {

    @IBOutlet var tableView: UITableView!

    var arr = ["A", "B", "C"]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return arr.count;
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {

        var cell: UITableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as? UITableViewCell

        if cell == nil {
            cell = UITableViewCell(style: UITableViewCellStyle.Default , reuseIdentifier: "cell")
        }
        cell!.textLabel?.text = arr[indexPath.row]

        return cell!
    }
}
</code></pre>

<p>code 實作完後，記得拉 dataSource 及 delegate</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.27.19%EF%BC%882%EF%BC%89.png" alt="image" /></p>

<p>執行後就是 TableView + NavigationController 了</p>

<p>接下來就要加入換頁:</p>

<p>到 storyboard 再加入一個 ViewController，並從 tableView 的 cell 中建立連結到新的 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.33.35.png" alt="image" /></p>

<p>再來新增一個 DetailViewController, 用來顯示下一頁的資料</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.35.29.png" alt="image" /></p>

<p>記得先去做 class 關聯</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.36.03.png" alt="image" /></p>

<p>再來加入這個 function:</p>

<pre><code>override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if segue.identifier == "showDetail" {
            let index = self.tableView.indexPathForSelectedRow()?.row
            ((segue.destinationViewController) as DetailViewController).title = arr[index!]
        }
    }
</code></pre>

<p>回到 storyboard, 點選 UITableView 和 UIView 中間的連線，設定 storyboard 的 identifier</p>

<p>設定為 <code>showDetail</code> 以便和程式一樣</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.37.36.png" alt="image" /></p>

<p>另外回到 Storyboard 中的 TableView, 設定 cell 的 identifier 和程式一樣</p>

<p>以便 reuse</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.47.03.png" alt="image" /></p>

<p>接著都設定完畢後，就可以執行了!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.49.13.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.49.18.png" alt="image" /></p>

<p>這樣就完成啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d16] - Basic - Table View 2 換頁 (Delegate)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/16/swift-d16/"/>
    <updated>2014-10-16T18:39:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/16/swift-d16</id>
    <content type="html"><![CDATA[<p>昨天我們實際操作了 tableView 的實作，今天要加入換頁</p>

<p>意思就是假設我點了名為 &ldquo;99&rdquo; 的 cell，點擊後會跳轉到另外一頁，同樣顯示 &ldquo;99&rdquo;</p>

<p>所以除了跳頁外，還要加入值的傳遞</p>

<p>首先打開昨天的專案，我們要繼續下去</p>

<p>回到 storyboard 中，昨天我們加入了 dataSource，今天要加入 delegate:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.01.50.png" alt="image" /></p>

<p>回到程式碼中 ViewController.swift</p>

<p>在 class 的宣告再加上 UITableViewDataSource</p>

<pre><code class="swift">class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
</code></pre>

<p>再來就要設計換頁的流程了</p>

<p>回到 storyboard</p>

<p>拉一個新的 ViewController 到空白處</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.04.50.png" alt="image" /></p>

<p>接著點擊左邊的 TableViewCell, 按住 ctrl + 拖曳，拉到剛剛建立的 ViewController 上</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.07.11.png" alt="image" /></p>

<p>選擇 show detail</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.07.44.png" alt="image" /></p>

<p>就會長這樣:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.06.55.png" alt="iamge" /></p>

<p>再來新增一個 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.09.15.png" alt="image" /></p>

<p>接著讓新的 storyboard viewcontroller 連接到剛剛新增的 DetailViewController 程式碼</p>

<p>記得先點選 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.10.36.png" alt="image" /></p>

<p>在 storyboard 的 DetailViewController 中拉一個 label</p>

<p>並且將該 label 連接到 DetailViewController 的程式碼中</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.13.04.png" alt="image" /></p>

<p>因此 DetailViewController 就會變這樣:</p>

<pre><code>class DetailViewController: UIViewController {
    @IBOutlet var label: UILabel!
</code></pre>

<p>接著再來把 DetailViewController 加入兩行 code:</p>

<pre><code>class DetailViewController: UIViewController {
    @IBOutlet var label: UILabel!

    var index: Int = 0

    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.

        label.text = "\(index)"
    }
</code></pre>

<p>新增一個 index 變數，再來就是在 viewDidLoad 時，將該 label 的文字改成 index</p>

<p>這個 index 的值會在 TableView 中傳遞給 DetailViewController</p>

<p>接下來就要改變 index 的值了，回到 ViewController.swift 中</p>

<p>加入以下程式碼:</p>

<pre><code>func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {

    let cell = tableView.cellForRowAtIndexPath(indexPath)
    self.performSegueWithIdentifier("showDetail", sender: cell)

}

override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    if segue.identifier == "showDetail" {
        let indexPath = self.tableSample.indexPathForSelectedRow()?.row
    ((segue.destinationViewController) as DetailViewController).index=indexPath!
    }
}
</code></pre>

<p>大家可能會覺得好奇裡頭有個 identifier 叫做 &lsquo;showDetail&#8217;，這個東西是自己自定的，一定要定，不然在傳遞時會不知道要抓哪個 segue</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.30.24.png" alt="image" /></p>

<p>再來確認一下是否 dataSource 與 delegate 是否都有 reference 到</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.32.38.png" alt="image" /></p>

<p>執行，就可以發現可以點進去了!</p>

<p>不過因為我們還沒有和 NavigationView 做結合，因此要自己做按鈕點回去 XD</p>

<p>在這邊就先不做了，因為明天就可以兩個結合起來了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d15] - Basic - Table View 1 直接給值 Datasource, (Table View Scroll)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/15/swift-d15/"/>
    <updated>2014-10-15T18:34:40+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/15/swift-d15</id>
    <content type="html"><![CDATA[<p>今天要來練習新的東西 - TableView</p>

<p>據同事說明，TableView 是最常用到的 View 之一</p>

<p>在我們的實戰開發中也會用到 TableView</p>

<p>因此今天就先簡單的來建立出單頁純顯示資料的 TableView</p>

<p>TableView 的概念大概是如下圖:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.30.44.png" alt="image" /></p>

<p>長得有點像 ListView 但是每一行又可以多切開，放一些東西</p>

<p>每一行都稱之為一個 TableViewCell</p>

<p>今天就來要簡單寫一個資料已經預先定義好，並且會顯示在 view 上面的 TableView</p>

<p>要進行下去之前當然就先開一個新的練習專案囉</p>

<p>開啟完專案後，首先第一件事情就是進 storyboard</p>

<p>選擇 TableView 拉進 storyboard 裏</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.34.28.png" alt="image" /></p>

<p>接著再選擇 TableViewCell 拉進 TableView 中</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.35.16.png" alt="image" /></p>

<p>透過此圖，我們了解到可以打開 storyboard 的 tree 來看看它們之間的關係</p>

<p>下面此步驟很重要，資料的連接就靠這條線:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.38.16.png" alt="image" /></p>

<p>先選取 TableView (可以使用階層樹或是點擊 storyboard)，然後選擇右方的 connection inspector (右上角的最右邊的那一個按鈕)</p>

<p>裡頭有個 dataSource 以及 delegate</p>

<p>我們先按住 dataSource 右邊的空心圓按鈕，拖曳拉到 storyboard 中的 ViewController，如上圖所示</p>

<p>這樣子等等在程式碼中產生的資料才會有和 storyboard 的 UI 做連結</p>

<p>最後一個和 storyboard 相關的操作是將 storyboard 的 TableView 和 程式碼做連結，好方便我們在程式碼中對 storyborad 的 TableView 做操作</p>

<p>之前就有做過類似的事情了，就是按著 ctrl + 拖曳拉進程式碼中：</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.42.32.png" alt="image" /></p>

<p>給他個名稱：</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.44.57.png" alt="image" /></p>

<p>這時候的程式應該會長這樣:</p>

<pre><code class="swift">import UIKit

class ViewController: UIViewController {

    @IBOutlet var tableSample: UITableView!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}
</code></pre>

<p>再來就是程式的部分了</p>

<p>先直接貼出 ViewController 的程式碼:</p>

<pre><code class="swift">import UIKit

class ViewController: UIViewController, UITableViewDataSource {

    @IBOutlet var tableSample: UITableView!

    var items: [String] = []

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.

        for var i = 0 ; i &lt;= 100 ; i++ {
            items.append("\(i)")
        }

        self.tableSample.registerClass(UITableViewCell.self, forCellReuseIdentifier: "cell")
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return self.items.count
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell{

        var cell: UITableViewCell = self.tableSample.dequeueReusableCellWithIdentifier("cell") as UITableViewCell
        cell.textLabel?.text = self.items[indexPath.row]

        return cell
    }
}
</code></pre>

<p>這中間了幾件事:</p>

<p>viewDidload 產生一個 0 ~ 100 的陣列，並且向 tableSample 註冊了一個 cell 物件，並且設定該物件的 identifier 為 &ldquo;cell&rdquo;</p>

<p>接著下面兩個 function 是實作顯示資料以及資料行數的部分:</p>

<pre><code>func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
    return self.items.count
}

func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell{

    var cell: UITableViewCell = self.tableSample.dequeueReusableCellWithIdentifier("cell") as UITableViewCell
    cell.textLabel?.text = self.items[indexPath.row]

    return cell
}
</code></pre>

<p>第一個 tableView 的方法是回傳這個 tableView 的資料有多少筆</p>

<p>第二個 tableView 則是根據每一行的值，產生一個 cell，將陣列值丟進該 cell 的文字，並且回傳</p>

<p>這樣理論上就會顯示 0 ~ 100 個 cell，裡面的值分別是依據順序而顯示號碼</p>

<p>注意在程式的 class 那一行</p>

<pre><code>class ViewController: UIViewController, UITableViewDataSource {
</code></pre>

<p>有多一個 UITableViewDataSource, 因為我們要將資料丟到 UITableView 中，因此需要使用繼承該類別</p>

<p>等明天我們要做換頁功能時，就要加入其他的類別了</p>

<p>程式撰寫好後，執行看看吧!</p>

<p>應該就會長這樣子喲:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%202.56.47.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d14] - Basic - Navigation View 2 + ViewController]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/14/swift-d14/"/>
    <updated>2014-10-14T22:40:36+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/14/swift-d14</id>
    <content type="html"><![CDATA[<p>延續昨天的主題，今天我們要做的事情是：</p>

<ol>
<li>爲新的 ViewController 實際加入程式碼 (ViewController2.swift)</li>
<li>加入一個 button 來控制是否前進下一頁或後退</li>
</ol>


<p>我們先新增一個檔案:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.04.30.png" alt="image" /></p>

<p>接著選擇 CocoaTouch Class:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.05.56.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.06.45.png" alt="image" /></p>

<p>回到 storyboard, 選擇第二個 ViewController</p>

<p>並按照下圖，將 Class 指定給 View2Controller</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.07.15.png" alt="image" /></p>

<p>這樣子 storyboard 的 View2 就會指定到 View2Controller 了</p>

<p>我們在 View2Controller 的 viewDidLoad 方法中加入一行程式碼</p>

<p>來驗證他是否有吃到 View2Controller</p>

<pre><code class="swift">self.title = "View2 by me"
</code></pre>

<p>Run 起來看的話就會是這樣:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.10.52.png" alt="image" /></p>

<p>的確是有吃到程式碼的</p>

<p>再來就是要加入按鈕了:</p>

<p>我們先拉一個 Button 進 View2Controller</p>

<p>並且將該 Button 拉進 View2Controller 的 code</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.11.41.png" alt="image" /></p>

<p>設定該 button 爲 Action, 並且名稱是 &lsquo;backToView&rsquo;</p>

<p>意即我們要讓點下 View2Controller 的 Button 行為為回到上一個 View</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.12.50.png" alt="image" /></p>

<p>另外對 View2 為他加入一個 storyboard ID, View2，等等會用到:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.20.21.png" alt="image" /></p>

<p>View1 同樣也加入一個 Button, 並且也是拉到 View1 的 code 中，</p>

<p>同樣是設定 Action ，action name 定義為 &lsquo;goView2&rsquo;</p>

<p>就是按下 button 後會到 View2</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.13.59.png" alt="image" /></p>

<p>接著我們分別在 ViewController 及 View2Controller 的程式碼中加入以下程式碼:</p>

<p>View1 -</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.15.48.png" alt="image" /></p>

<pre><code class="swift">@IBAction func goView2(sender: AnyObject){
self.navigationController?.pushViewController(self.storyboard?.instantiateViewControllerWithIdentifier("View2") as View2Controller, animated: true)
}
</code></pre>

<p>View2 -</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.15.56.png" alt="image" /></p>

<pre><code class="swift">@IBAction func backToView(sender: AnyObject) {
    self.navigationController?.popViewControllerAnimated(true)
}
</code></pre>

<p>在這邊 Navigation 用到的是 Push, Pop 的概念，使用 View stack</p>

<p>進到下一個 View 時，就 push 欲前往的 View</p>

<p>回到上一個 View 時，就 pop 出上一個 View</p>

<p>在 goView2 中，我們使用到了 storyboard 的 identifier</p>

<p>先讓 storyboard 抓有沒有 identifier 名為 &ldquo;View2&rdquo; 的物件</p>

<p>有的話就抓起來，並且使用 as 轉型成 View2Controller, push 進 stack</p>

<p>做完上述事情後，執行程式碼就可以看到結果囉!</p>
]]></content>
  </entry>
  
</feed>
