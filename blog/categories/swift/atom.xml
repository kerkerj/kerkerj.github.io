<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-05T16:47:43+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Swift-d5] - Playground - Array, Dictionary, Controll Flow]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/05/swift-d5/"/>
    <updated>2014-10-05T16:40:23+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/05/swift-d5</id>
    <content type="html"><![CDATA[<h2>Array</h2>

<h3>宣告</h3>

<pre><code class="swift">// var VARIABLE_NAME: [TYPE] = .....

var fruits: [String] = ["apple", "banana"]
var nums: [Int] = [1, 2]

// 或是讓 Swift 自行判斷類型:
var fruits = ["apple", "banana"]
var nums = [1, 2]

// 初始化:
var cars = [String]()
</code></pre>

<p>ps. Beta 版時的寫法是 <code>var fruits: String[]</code></p>

<p>現在已經變成了 <code>var fruits: [String]</code></p>

<h3>操作</h3>

<pre><code>// 判斷該陣列是否有值，回傳 true 或 false
fruits.isEmpty 

// 增加元素
fruits.append("watermelon")
fruits += ["lemon"]

// 取值 
fruits[0]
fruits[0...2]

// 刪除值 - 將 apple 移除，banana 會自動補上
fruits.removeAtIndex(0)
fruits[0]

// 兩個陣列合併 (必須相同類別 e.g. String)
fruits + cars

// 陣列元素數量
fruits.count
</code></pre>

<h2>Dictionary</h2>

<h3>宣告</h3>

<p>由於 Dictionary 是 key/value 為一組 (pair)，</p>

<p>因此宣告時必須宣告 key 和 value 分別是哪種型別</p>

<pre><code>var httpStatus: Dictionary&lt;Int, String&gt; = Dictionary&lt;Int, String&gt;()

var httpStatus: Dictionary&lt;Int, String&gt; = [200: "Success", 404: "Not found"]
</code></pre>

<h3>操作</h3>

<pre><code>// 一樣有 isEmpty 方法
httpStatus.isEmpty

// 取值
httpStatus[200] // = "Success"

// 加入值
httpStatus[500] = "Internal Server Error"

// 修改值
httpStatus[200] = "True"
httpStatus.updateValue("internal server error", forKey: 500)

// 刪除值
httpStatus.removeValueForKey(200)

// 字典元素數量
httpStatus.count
</code></pre>

<h2>Controll Flow</h2>

<h3>For loop</h3>

<pre><code>for fruit in fruits {
    println(fruit)
}

for var index = 0; index &lt; fruits.count; ++index {
    println(fruits[index])
}
</code></pre>

<h3>While</h3>

<pre><code>var index = 0
while index &lt; fruits.count {
    println(fruits[index])
    index++
}
</code></pre>

<h3>Do-while</h3>

<pre><code>var index = 0
do {
    println(fruits[index])
    index++ 
} while (index &lt; fruits.count)
</code></pre>

<h3>If</h3>

<pre><code>var index = 5566

if index = 5566 {
    println("5566 不能亡")
}

if index = 5566 {
    println("5566 不能亡")
} else {
    println("You are not 5566")
}

if index = 5566 {
    println("5566 不能亡")
} else if index &lt; 5566 {
    println("You are less than 5566")
} else {
    println("You are bigger than 5566")
}
</code></pre>

<h3>Switch</h3>

<pre><code>var index = 0

switch index {
case 0, 1, 2
    println("small")
case 8, 9, 11 
    println("big")
default:
    println("others")
}
</code></pre>

<p>引入 Tuple</p>

<pre><code>let httpStatus = (200, "Success")

switch httpStatus {
case (let statusCode, "Error"):
    println("(\(statusCode)) is Error")
case (200, let msg):
    println("(\(msg))'s statusCode is 200")
}
</code></pre>

<h2>Switch - break, continue, fallthrough</h2>

<h3>Continue</h3>

<p>continue 會使該次的 loop 停止，並繼續執行下一個 loop</p>

<p>continue 不存在於單一的 switch, 只會在 loop 裡的 switch 語句時才能使用</p>

<pre><code>var fruits = ["apple", "banana", "lemon", "waterlemon", "orange"]
for fruit in fruits {
    println("Start")

    switch fruit {
    case "banana":
        continue
    default:
        println(fruit)
    }

    println("End")
}
</code></pre>

<p>Start 和 End 理論上都要被印五次，</p>

<p>但是加入了 continue 後，banana case 當次 loop 的 End 就沒有被執行了</p>

<h3>Break</h3>

<p>通常是用在不想處理某個 case 或，特別想要處理時 (?) 反之嘛 XD</p>

<p>當使用了 break，會立即中斷 switch 程式碼的執行，並且跳到 switch 區塊程式碼結束的大括號後 (}) 的第一行程式</p>

<p>暫時想不到什麼好例子&hellip;.</p>

<p>先借別人的例子來用吧:</p>

<pre><code>let numberSymbol: Character = "三"  // 簡體中文裡的數字 3
var possibleIntegerValue: Int?
switch numberSymbol {
case "1", "١", "一", "๑":
    possibleIntegerValue = 1
case "2", "٢", "二", "๒":
    possibleIntegerValue = 2
case "3", "٣", "三", "๓":
    possibleIntegerValue = 3
case "4", "٤", "四", "๔":
    possibleIntegerValue = 4
default:
    break
}
if let integerValue = possibleIntegerValue {
    println("The integer value of \(numberSymbol) is \(integerValue).")
} else {
    println("An integer value could not be found for \(numberSymbol).")
}
// 輸出 "The integer value of 三 is 3.
</code></pre>

<h3>Fallthrough</h3>

<p>在 Swift 中，掃到第一個符合的 case 後，就會中斷 switch 的執行了，避免掉入一些 case 處理的錯誤</p>

<p>而 fallthrough, 很有趣, 宣告後，會讓 switch 繼續掃下一個 case</p>

<pre><code>let num = 5
var description = "\(num) is"
switch num {
case 2, 3, 5, 7, 11, 13, 17, 19:
    description += " a prime, also"
    fallthrough
case 5: 
    println("I'm here")
default:
    description += " an integer."
}
println(description)
// I'm here
// 5 is a prime, also an integer.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d4] - Playground - Optional, ! And ?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/"/>
    <updated>2014-10-04T18:53:03+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/04/swift-d4</id>
    <content type="html"><![CDATA[<h1>Playground - Optional, ! and ?</h1>

<p>今天要來探討 Optional 型別，我認為這塊是初學 Swift 常遇到的問題<br/>
大家搞不懂 &ldquo;!&rdquo; &ldquo;?&rdquo; 到底在幹什麼，所以今天就來了解一下</p>

<p>在 Swift 中，所有的資料型別都不能賦予 nil<br/>
也就是以下這件事是不成立的：</p>

<pre><code class="Swift">var x: String = "test"
x = nil
</code></pre>

<p>所以在 Swift 底下，就要使用 Optional 來處理值可能不存在的情況<br/>
當一個變數 x 被宣告成 Optional 型別時，該變數就會有兩個情況：</p>

<pre><code>1. 有值，等於 x
2. 沒有值
</code></pre>

<p>要宣告一個變數可能為 nil 時的方式是使用問號 &lsquo;?&#8217;：</p>

<pre><code>// 此時 x = "yaya"
var x: String? = "yaya"

// 此時 x 沒有值
x = nil
</code></pre>

<p>拿以下程式在 Playground 執行看看：</p>

<pre><code>var str: String = ""
println(str)
str = "yaya"
println(str)

var str2: String?
println(str2)
str2 = "yaya"
println(str2)
</code></pre>

<p>可以看一下 Playground 右邊的輸出框，觀察兩個 string 的差異<br/>
當 str2 被賦予 Optional 型別後，<br/>
str2  已經不是單純的 String 型別了，</p>

<p>那如何強制以 String 型別拿到 str2 的資料呢?
試著在 str2 後面加上驚嘆號，並觀察右方輸出結果:</p>

<pre><code>println(str2!)
</code></pre>

<p>請注意！若要強制取值，一定要確保此 Optional 型別中一定有值，
否則將會導致執行錯誤，以下是錯誤範例：</p>

<pre><code>var str2: String? = "yaya"
println(str2)
str2 = nil
println(str2!)
</code></pre>

<p>程式將會在第四行返回錯誤，因此使用驚嘆號強制取值前請先確保 Optional 裡有值。</p>

<p>在 Objective-C 中，nil 是指向一個不存在物件的指標；
而 Swift 中，nil 是一種非常明確地值 － 他就是代表「不存在」。</p>

<p>在 Playground 中多試試看囉~~</p>

<p>ps. Swift 的 ? 和 Ruby 的 ? 是完全不同意思的XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/"/>
    <updated>2014-10-03T21:07:41+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/03/swift-d3</id>
    <content type="html"><![CDATA[<h2>變數與常數</h2>

<p>定義一個變數:</p>

<pre><code class="Swift">var obj: String = ""
</code></pre>

<p>var 是保留字，宣告 obj 是一個變數名稱，冒號後面接資料形態<br/>
以此例子來說，宣告了一個字串變數叫做 obj，並且初始化為 &ldquo;&rdquo; 空字串</p>

<pre><code>let obj: String = ""
</code></pre>

<p>let 同樣是用來宣告一個變數，但是宣告此變數後，該變數的值無法被改變，<br/>
無法被改變的數值其實正正的名字就叫做常數
以上面的例子來說， 若我們多做一件事:</p>

<pre><code>let obj: String = ""
obj = "test"
</code></pre>

<p>若我們試圖去更改 obj，讓 obj 從空字串變成 &ldquo;test&rdquo; 時， <br/>
Xcode 就會報錯，不能更改該值</p>

<p>再來是宣告的變型，其實宣告時不一定要給資料形態，<br/>
Swift 會自動從後面的值來判斷 x 可能是什麼資料形態，<br/>
只是由於筆者的習慣，會儘量在後面加上該變數的資料型別</p>

<pre><code>var x = "test"
</code></pre>

<p>一行內宣告多值：</p>

<pre><code>var x = 0.0, y = 0.0, z = 0.0
</code></pre>

<p>我們就可以在 Playground 裡面試著宣告一些變數看看，並且使用昨天的輸出函式來輸出變數:</p>

<pre><code>var str: String = "測試"
let fixString: String = "fixed"

var x = 0, y = 1, z = 2

println(str)
println(x)
println(y)
println(z)
</code></pre>

<h2>註解</h2>

<pre><code>// 單行註解

/*
多行註解
多行註解
多行註解
*/
</code></pre>

<h2>基本資料型別</h2>

<p>Swift 是一個強型別語言，意即若是以下的程式碼是會出錯的:</p>

<pre><code>var x = "test"
x = 2
</code></pre>

<p>由於 x 已經被先 Swift 判定是 String 了，後面想指定 Int 資料給 x 就會出錯</p>

<p>Int 整數:
Swift 提供了 Int 還另外提供了 8, 16, 32, 64 位元的有號和無號整數型別<br/>
若在 32 位元平台，宣告 Int 的話， Int 的長度和 Int32 是一樣的<br/>
若在 64 位元平台，宣告 Int 的話， Int 的長度和 Int64 是一樣的</p>

<p>浮點數：
3.2, 0.0 之類的數字，可以用
Double - 64 位元浮點數 (至少 15 位數)
Float - 32 位元浮點數 (至少 6 位數)</p>

<p>布林值：
true/false</p>

<p>Tuples:
Tuple 可以將多個值組合成一個值，例如：</p>

<pre><code>//賦值
let httpSucess = (200, "Success")

// 反過來接值
let (statusCode, statusMessage) = httpSucess

// 若只需要其中一個值，另一個值可以用 _ 代替，但是不能沒有 _ 
let (statusCode, _) = httpSucess

// 也可以用索引的方式拿值
println(httpSucess.0)

// 宣告 tuples 時也可以直接給予參數一個名稱
let httpSucess = (statusCode: 200, statusMessage: "Success")

// 拿值時就可以:
println(httpSucess.statusCode)
</code></pre>

<p>同時結合 function 這樣就可以多值回傳了！</p>

<p>下一篇會接續今天變數相關的主題~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d2] - 安裝及 Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/"/>
    <updated>2014-10-02T20:19:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d2</id>
    <content type="html"><![CDATA[<p>首先，你必須要有一台 Mac。<br/>
我也不知道要如何用虛擬機 build 一台 Mac VM 出來，<br/>
所以就是，先買一台 Mac XD</p>

<p>若已經有了 Mac，只要到 Appstore 下載 Xcode 即可，<br/>
注意是要 Xcode 6.0 以上， Xcode 6 才有支援 Swift ，舊版的 Xcode 5 是無法開發 Swift 的</p>

<p>安裝完 Xcode 後</p>

<p>首先開啓 Xcode<br/>
選擇 &ldquo;Create a playground&rdquo;<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.24.32.png" alt="p1" /></p>

<p>輸入 Playground 名稱並選擇儲存位置<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.13.png" alt="p2" /></p>

<p>就進入了 Playground 了！</p>

<p>可以看到 Xcode 已經預先載入了幾行程式碼了
來稍微看一下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.26.png" alt="p4" /></p>

<pre><code>// Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"
</code></pre>

<p>第一行，使用了 <code>//</code>，有寫過程式的話一定都知道這是註解 <br/>
在 Swift 裡面使用 <code>//</code> 及 <code>/* .... */</code> 來註解程式碼</p>

<p>第二行意思則是將 UIKit 引入到 playground 中，<br/>
借此使用 UIKit 的函示物件等等，目前還都不會用到</p>

<p>第三行的意思則是宣告了一個變數，該變數為一個字串，內容為 &ldquo;Hello World!&rdquo;</p>

<p>在 Playground 中，很有意思的是右邊的灰色區塊，<br/>
Xcode 會即時顯示該變數的值、型別、以及輸出結果，<br/>
對於剛入門 Swift 的開發者來說是一個非常好的功能來練習語法，
也因此未來幾天都會使用 Playground 來練習 Swift 基本語法!</p>

<p>最後當然要不免俗的撰寫最經典的程式 - Hello World!</p>

<p>加入:
<code>
println(str)
</code></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.27.21.png" alt="p5" /></p>

<p>馬上就可以在右邊看到結果囉!</p>

<p><code>println(args)</code> 是 Swift 標準輸出的函示，算是使用率蠻高的一個 method，只要將參數代入即可顯示該參數的內容，<br/>
有興趣也可以透過 Xcode 的 autocomplete 來看看和 <code>print</code> 有關的 method，<br/>
例如 <code>print()</code>，可以試試看，有些許不一樣哦!</p>

<p>未來一個禮拜都會來練習一些基本語法!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d1] - 介紹]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/"/>
    <updated>2014-10-02T01:37:44+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d1</id>
    <content type="html"><![CDATA[<p>Swift 是 2014 年由蘋果公司在其開發者大會 WWDC 上所發佈的程式語言</p>

<p>The Swift Programming Language 一書中提到：</p>

<ol>
<li>Swift 用來撰寫 iOS 及 Mac OSX 的程式。</li>
<li>Swift 吸收了 C 和 Objective-C 的優點，使其在設計更具彈性、容易，且撰寫時有更多樂趣。</li>
<li>Swift 是基於成熟而且倍受喜愛的 Cocoa 和 Cocoa Touch framework，意即 Swift 可以直接使用這些現有的框架</li>
<li>Swift 兼具編譯語言的性能，以及直譯式語言的特性。</li>
</ol>


<p>** 什麼是 Cocoa/Cocoa Touch framework: <br/>
Cocoa framework 是 Apple 爲 Mac OSX 所建立的環境，用來開發 OSX 的程式，<br/>
而 Cocoa Touch framework 則是建立於 Cocoa framework 之上，用來開發 iOS 作業系統程式，<br/>
此兩種 framework 皆遵循 MVC 軟體架構，開發時必須遵循此架構。</p>

<p>若之前從未接觸過 Objective-C 但又想嘗試開發 iOS app 的話，<br/>
現在是個入門的好時機，Swift 去除了 Objective-C 的繁瑣語法，<br/>
且相較於 Objective-C 是個更好入門的程式語言。</p>

<p>對於非 Objective-C 開發者而言，若先前有過程式語言開發經驗的話，語法上手不會太難，<br/>
只是需要花時間學習 Cocoa/Cocoa Touch framework，但是，都要學習撰寫 iOS app 了，<br/>
不學 Cocoa/Cocoa Touch framework 應該也說不過去 :D</p>

<p>而對於 Objective-C 開發者而言，由於已經非常熟悉 Cocoa/Cocoa Touch framework 了，<br/>
在 Swift 使用 Cocoa/Cocoa Touch framework 是幾乎無痛轉換的，因為函式、變數名稱完全一樣，<br/>
只需要熟悉 Swift 語法，不出一天即可快速上手，也因此 Objectiv-C 開發者也不需過於擔心飯碗被搶走 XD<br/>
接觸過 Cocoa/Cocoa Touch framework 的開發者來說還是有相當大的優勢的。</p>

<p>由於筆者之前從未接觸過 Objective-C/ Cocoa/ Cocoa Touch framework，<br/>
只有些許 java/php/ruby 撰寫經驗，<br/>
選擇 Swift 的原因之一即是語法上手容易，並且有 playground 可以馬上執行撰寫的程式，<br/>
也因此希望能夠透過學習 Swift ，了解 iOS app 開發架構，實際打造出一款 app！</p>
]]></content>
  </entry>
  
</feed>
