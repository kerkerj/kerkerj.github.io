<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-19T21:24:10+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Swift-d19] - Basic - 橋接第三方 Objc Library - Reachability and Bridge.h]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/swift-d19/"/>
    <updated>2014-10-19T21:19:28+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/swift-d19</id>
    <content type="html"><![CDATA[<p>本日專案的 <a href="https://github.com/kerkerj/ithome-BridgeObjcDemo">Github link</a></p>

<p>由於 Swift 剛推出不到一年</p>

<p>有許多的 third-party library 一定還沒轉換成 Swift</p>

<p>或者是作者沒心力轉會成 Swift</p>

<p>但是有些套件非常方便，那在 Swift 要怎麼使用 Objective-C 的套件呢?</p>

<p>Xcode 有提供橋接的方式，非常好用</p>

<p>接下來就介紹一下如何使用吧!</p>

<p>以下的例子是一個叫做 <code>Reachability</code> 的套件</p>

<p>它可以簡單地幫我們判斷是否有網路連線 3g or wifi 之類的</p>

<p>所以我們先下載這個套件吧!</p>

<p><a href="https://github.com/tonymillion/Reachability">https://github.com/tonymillion/Reachability</a></p>

<p>下載解壓縮後</p>

<p>將 .h 和 .m 檔拖曳進 Xcode 專案中</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.27.17.png" alt="image" /></p>

<p>接下來 Xcode 就會問一個非常重要的問題!:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.26.24.png" alt="image" /></p>

<p>是否要建立橋接的 .h 檔案!</p>

<p>當然是選擇建立囉~</p>

<p>此時的專案結構就會變成這樣:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.26.38.png" alt="image" /></p>

<p>再來編輯 bridge-header.h 檔</p>

<p>將想要橋接的 objc 套件 import 進去</p>

<pre><code class="swift">#import "Reachability.h"
</code></pre>

<p>這樣我們就可以在 Swift 中直接使用該套件的類別與方法了!</p>

<p>接下來就讓我們試試看!</p>

<p>在 ViewController 中加入以下程式碼:</p>

<pre><code>//
//  ViewController.swift
//  BridgeObjcDemo
//
//  Created by Jerry Huang on 2014/10/18.
//  Copyright (c) 2014年 kerkerj. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.


        var isConnected = checkNetworkConnection()

        let alert = UIAlertView()
        alert.title = "Network Connection"

        if isConnected {
            alert.message = "You're online!"
        } else {
            alert.message = "You're offline!"
        }

        alert.addButtonWithTitle("OK")
        alert.show()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func checkNetworkConnection() -&gt; Bool {
        let reachability: Reachability = Reachability.reachabilityForInternetConnection()
        let networkStatus: NetworkStatus = reachability.currentReachabilityStatus()

        println(networkStatus.toRaw())

        switch (networkStatus.toRaw()) {
        case 0:
            println("[Network Status]: NotReachable")
        case 1:
            println("[Network Status]: ReachableViaWWAN")
        case 2:
            println("[Network Status]: ReachableViaWiFi")
        default:
            break
        }

        return networkStatus.toRaw() != 0
    }
}
</code></pre>

<p>簡單的說，我們寫了一個方法，使用 Reachability 偵測網路連線</p>

<p>在 ViewDidLoad 時，偵測是否有網路連線</p>

<p>跳一個 Alert 會告訴你是有連線還是沒有連線</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.42.45.png" alt="image" /></p>

<p>不過在這邊，我不曉得如何讓模擬器關掉連線，</p>

<p>所以沒辦法提供 offline 的圖</p>

<p>但是我實際安裝到手機後，將 wifi 功能關掉後的確是有跳出 offline 的</p>

<p>哈哈 雖然說沒圖沒真相但是&hellip;XD</p>

<p>橋接第三方套件就是那麼簡單! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - Push/Pop Views Delay]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/swift-push-slash-pop-views-delay/"/>
    <updated>2014-10-19T00:33:11+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/swift-push-slash-pop-views-delay</id>
    <content type="html"><![CDATA[<p>請大家先看看下面的小短片，注意一下過場動畫的流暢度</p>

<p>一開始是沒有加過場動畫，後來改程式碼變成有過場動畫</p>

<p><a href="http://www.youtube.com/watch?feature=player_embedded&v=dqxDFv-iieU
" target="_blank"><img src="http://img.youtube.com/vi/dqxDFv-iieU/0.jpg"
alt="IMAGE ALT TEXT HERE" width="420" height="315" border="10" /></a></p>

<p><a href="https://www.youtube.com/watch?v=dqxDFv-iieU">direct link</a></p>

<p>後來發現給一個預設的 backgroundColor 後就不會發生殘影的問題了</p>

<p>是因為 push 的 view 沒有 backgroundColor</p>

<p>和同事討論後發現:</p>

<p><a href="https://developer.apple.com/library/IOs/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instp/UIView/backgroundColor">Apple Developer Reference</a></p>

<p>UIView 的 backgroundColor 的 default 值是 null!</p>

<blockquote><p>Discussion
Changes to this property can be animated. The default value is nil, which results in a transparent background color.</p></blockquote>

<p>所以是這個原因導致在轉場的時候有殘影</p>

<p>不過切換 View 時 target view 沒有 backgroundColor 的情況應該比較少吧&hellip;(?)</p>

<p>剛好在寫鐵人賽的 app 想先把流程弄出來時遇到了這個雷 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d18] - Basic - Customize TableViewCell]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/18/swift-d18/"/>
    <updated>2014-10-18T18:28:23+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/18/swift-d18</id>
    <content type="html"><![CDATA[<p>今天的主題延續昨天的 Navigation + TableView</p>

<p>我們要來客製化 TableViewCell</p>

<p>通常 TableView 可以被拿來做很多事情，不僅只是像是 ListView 而已</p>

<p>而 TableViewCell 可以做更深度的切版，排列元素</p>

<p>因此自定 TableViewCell 是一件算是還蠻重要的事情</p>

<p>下面的 Code 是延續昨天的專案</p>

<p>我先把已更改過的程式碼貼上來:</p>

<pre><code class="swift">import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    @IBOutlet var tableView: UITableView!

    var arr = ["A", "B", "C"]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return arr.count;
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
        var cell: CustomTableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as CustomTableViewCell?

        if cell == nil {
            var objects = NSBundle.mainBundle().loadNibNamed("CustomTableViewCell", owner: self, options: nil)
            cell = objects[0] as? CustomTableViewCell
        }

        cell!.textLabel?.text = arr[indexPath.row]

        return cell!
    }

    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        var detailViewController = DetailViewController()
        detailViewController.title = arr[indexPath.row]
        self.navigationController?.pushViewController(detailViewController, animated: true)
    }

    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat {
        return 165.0
    }
}
</code></pre>

<p>今天要新增一個檔案, 我們就稱之為 CustomTableViewCell</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.36.49.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.37.37.png" alt="image" /></p>

<p>就會出現一份 .swift 檔案以及 .xib 檔案了</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.38.06.png" alt="image" /></p>

<p>接下來我們簡單編輯 .xib 檔案，將背景顏色換成其他顏色，以及將它的長度拉高</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2011.39.49.png" alt="image" /></p>

<p>這樣其實就很簡單地完成了一個小客製化的 TableViewCell 了</p>

<p>那我們要怎麼讓原本的 TableView 吃到這個 TableViewCell 呢?</p>

<p>看以下的 function:</p>

<pre><code>func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {
    var cell: CustomTableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as CustomTableViewCell?

    if cell == nil {
        var objects = NSBundle.mainBundle().loadNibNamed("CustomTableViewCell", owner: self, options: nil)
        cell = objects[0] as? CustomTableViewCell
    }

    cell!.textLabel?.text = arr[indexPath.row]

    return cell!
}
</code></pre>

<p>我們將 cell 的類別更改成了 CustomTableViewCell</p>

<p>直接使用剛剛產生的 .swift 類別來產生新的 TableViewCell</p>

<p>並且如果 cell == nil ，則會將 Nib 載入</p>

<p>最後設定該 textLabel ，返回 cell</p>

<p>若使用最一開始的程式碼 apply changes</p>

<p>執行！</p>

<p>應該就可以看到成果了!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2012.01.35.png" alt="image" /></p>

<p>p.s. 這篇可能實作上會有 bug (我寫的), 就先跳過吧 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d17] - Basic - Navigation View + TableView]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/17/swift-d17/"/>
    <updated>2014-10-17T21:17:03+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/17/swift-d17</id>
    <content type="html"><![CDATA[<p>今天要把 Navigation View 和 Table View 結合起來!</p>

<p>把 NavigationController 拉進 Storyboard</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.47.53.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.48.28.png" alt="image" /></p>

<p>將程式進入點指向 NavigationController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2019.48.28.png" alt="image" /></p>

<p>把原本程式自動產生的 UIViewController 刪除</p>

<p>把自動產生的 TableViewController 刪除!</p>

<p>拉一個新的 UIViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.06.29.png" alt="image" /></p>

<p>將 NavigationController 的 RootViewController 指向新的 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.07.20.png" alt="image" /></p>

<p>把 TableView 拉進 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.08.48.png" alt="image" /></p>

<p>再將 TableViewCell 拉進 TableView</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.09.16.png" alt="image" /></p>

<p>再點選 ViewController, 到右上角中找尋 Custom Class</p>

<p>將 ViewController.swift 指定給該 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.18.11.png" alt="image" /></p>

<p>接著把 UITableView 引進程式碼裡做關聯</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.19.25.png" alt="image" /></p>

<p>再來就是實作 Table 的 data 了</p>

<pre><code class="swift">class ViewController: UIViewController, UITableViewDataSource {
</code></pre>

<pre><code>class ViewController: UIViewController, UITableViewDataSource {

    @IBOutlet var tableView: UITableView!

    var arr = ["A", "B", "C"]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return arr.count;
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&gt; UITableViewCell {

        var cell: UITableViewCell? = tableView.dequeueReusableCellWithIdentifier("cell") as? UITableViewCell

        if cell == nil {
            cell = UITableViewCell(style: UITableViewCellStyle.Default , reuseIdentifier: "cell")
        }
        cell!.textLabel?.text = arr[indexPath.row]

        return cell!
    }
}
</code></pre>

<p>code 實作完後，記得拉 dataSource 及 delegate</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.27.19%EF%BC%882%EF%BC%89.png" alt="image" /></p>

<p>執行後就是 TableView + NavigationController 了</p>

<p>接下來就要加入換頁:</p>

<p>到 storyboard 再加入一個 ViewController，並從 tableView 的 cell 中建立連結到新的 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.33.35.png" alt="image" /></p>

<p>再來新增一個 DetailViewController, 用來顯示下一頁的資料</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.35.29.png" alt="image" /></p>

<p>記得先去做 class 關聯</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.36.03.png" alt="image" /></p>

<p>再來加入這個 function:</p>

<pre><code>override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if segue.identifier == "showDetail" {
            let index = self.tableView.indexPathForSelectedRow()?.row
            ((segue.destinationViewController) as DetailViewController).title = arr[index!]
        }
    }
</code></pre>

<p>回到 storyboard, 點選 UITableView 和 UIView 中間的連線，設定 storyboard 的 identifier</p>

<p>設定為 <code>showDetail</code> 以便和程式一樣</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.37.36.png" alt="image" /></p>

<p>另外回到 Storyboard 中的 TableView, 設定 cell 的 identifier 和程式一樣</p>

<p>以便 reuse</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.47.03.png" alt="image" /></p>

<p>接著都設定完畢後，就可以執行了!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.49.13.png" alt="image" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-17%2020.49.18.png" alt="image" /></p>

<p>這樣就完成啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d16] - Basic - Table View 2 換頁 (Delegate)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/16/swift-d16/"/>
    <updated>2014-10-16T18:39:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/16/swift-d16</id>
    <content type="html"><![CDATA[<p>昨天我們實際操作了 tableView 的實作，今天要加入換頁</p>

<p>意思就是假設我點了名為 &ldquo;99&rdquo; 的 cell，點擊後會跳轉到另外一頁，同樣顯示 &ldquo;99&rdquo;</p>

<p>所以除了跳頁外，還要加入值的傳遞</p>

<p>首先打開昨天的專案，我們要繼續下去</p>

<p>回到 storyboard 中，昨天我們加入了 dataSource，今天要加入 delegate:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.01.50.png" alt="image" /></p>

<p>回到程式碼中 ViewController.swift</p>

<p>在 class 的宣告再加上 UITableViewDataSource</p>

<pre><code class="swift">class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
</code></pre>

<p>再來就要設計換頁的流程了</p>

<p>回到 storyboard</p>

<p>拉一個新的 ViewController 到空白處</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.04.50.png" alt="image" /></p>

<p>接著點擊左邊的 TableViewCell, 按住 ctrl + 拖曳，拉到剛剛建立的 ViewController 上</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.07.11.png" alt="image" /></p>

<p>選擇 show detail</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.07.44.png" alt="image" /></p>

<p>就會長這樣:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.06.55.png" alt="iamge" /></p>

<p>再來新增一個 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.09.15.png" alt="image" /></p>

<p>接著讓新的 storyboard viewcontroller 連接到剛剛新增的 DetailViewController 程式碼</p>

<p>記得先點選 ViewController</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.10.36.png" alt="image" /></p>

<p>在 storyboard 的 DetailViewController 中拉一個 label</p>

<p>並且將該 label 連接到 DetailViewController 的程式碼中</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.13.04.png" alt="image" /></p>

<p>因此 DetailViewController 就會變這樣:</p>

<pre><code>class DetailViewController: UIViewController {
    @IBOutlet var label: UILabel!
</code></pre>

<p>接著再來把 DetailViewController 加入兩行 code:</p>

<pre><code>class DetailViewController: UIViewController {
    @IBOutlet var label: UILabel!

    var index: Int = 0

    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.

        label.text = "\(index)"
    }
</code></pre>

<p>新增一個 index 變數，再來就是在 viewDidLoad 時，將該 label 的文字改成 index</p>

<p>這個 index 的值會在 TableView 中傳遞給 DetailViewController</p>

<p>接下來就要改變 index 的值了，回到 ViewController.swift 中</p>

<p>加入以下程式碼:</p>

<pre><code>func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {

    let cell = tableView.cellForRowAtIndexPath(indexPath)
    self.performSegueWithIdentifier("showDetail", sender: cell)

}

override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
    if segue.identifier == "showDetail" {
        let indexPath = self.tableSample.indexPathForSelectedRow()?.row
    ((segue.destinationViewController) as DetailViewController).index=indexPath!
    }
}
</code></pre>

<p>大家可能會覺得好奇裡頭有個 identifier 叫做 &lsquo;showDetail&#8217;，這個東西是自己自定的，一定要定，不然在傳遞時會不知道要抓哪個 segue</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.30.24.png" alt="image" /></p>

<p>再來確認一下是否 dataSource 與 delegate 是否都有 reference 到</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-15%203.32.38.png" alt="image" /></p>

<p>執行，就可以發現可以點進去了!</p>

<p>不過因為我們還沒有和 NavigationView 做結合，因此要自己做按鈕點回去 XD</p>

<p>在這邊就先不做了，因為明天就可以兩個結合起來了!</p>
]]></content>
  </entry>
  
</feed>
