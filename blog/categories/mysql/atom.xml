<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-07-27T00:34:50+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[MySQL] Several Useful Statements (GROUP_CONCAT, Ifnull, DATE_FORMAT)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/05/06/mysql-several-useful-statements-group-concat-ifnull-date-format/"/>
    <updated>2014-05-06T06:10:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/05/06/mysql-several-useful-statements-group-concat-ifnull-date-format</id>
    <content type="html"><![CDATA[<ol>
<li><p>將 query 出來的多筆記錄結合成一個欄位<br/>
例如原本的 query 結果為：<br/>
<code>SELECT 'fruits' FROM 'fruits_table'</code><br/>
apple<br/>
banana<br/>
kiwi<br/>
<code>SELECT group_concat('fruits' separator ',') FROM 'fruits_table'</code><br/>
result: apple,banana,kiwi</p></li>
<li><p>改變 datetime 欄位的顯示結果<br/>
<code>SELECT DATE_FORMAT( 'created_at', '%Y/%m/%d %H:%i') AS 'created_at' FROM 'message_table'</code><br/>
result: 2014/05/06 18:20</p></li>
<li><p>若某個欄位的值為空，則給予預設值<br/>
<code>SELECT ifnull('is_success', 0) AS 'is_success' FROM ....</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] List of Rails Model Type (MySQL)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql/"/>
    <updated>2014-01-02T07:38:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql</id>
    <content type="html"><![CDATA[<p>:binary<br/>
:boolean<br/>
:date<br/>
:datetime<br/>
:decimal<br/>
:float<br/>
:integer<br/>
:primary_key<br/>
:string<br/>
:text<br/>
:time<br/>
:timestamp</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column">http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] RoR Environment]]></title>
    <link href="http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment/"/>
    <updated>2013-12-20T03:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment</id>
    <content type="html"><![CDATA[<h2>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)</h2>

<p>p.s.
If you don&rsquo;t use RVM, you can just follow the instruction from <a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu">Passenger offcial website</a>. It will be easier.
Plus, I installed all these things by Vagrant.</p>

<h2>First thing to do</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get upgrade
</code></p>

<h2>Pre-setup: install necessary packages</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
</code></p>

<h2>Get .bashrc from my repo (Optional)</h2>

<p><code>
$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
</code></p>

<h2>Get .vimrc from my repo (Optional)</h2>

<p><code>
$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
</code></p>

<h2>RVM and Ruby 2.0 (RVM: Ruby version management)</h2>

<p>```
$ \curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile
$ rvm requirements
$ echo &lsquo;gem: &mdash;no-ri &mdash;no-rdoc&rsquo;  >> ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile</p>

<p>add this line to .bash_rc or .bash_profile (if you don&rsquo;t use my .bash_profile)
[[ -s &ldquo;$HOME/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; . &ldquo;$HOME/.rvm/scripts/rvm&rdquo; # Load RVM function</p>

<p>$ rvm use 2.0.0 &mdash;default
<code>
Now we should be using ruby2.0.0 by RVM, let's check:
</code>
$ rvm list
=<em> ruby-2.0.0-p353 [ x86_64 ]
// => &ndash; current
// =</em> &ndash; current &amp;&amp; default
//  * &ndash; default
```</p>

<h2>Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)</h2>

<p><code>
$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev
</code></p>

<h2>Passenger with NGINX</h2>

<p>```
$ gem install passenger
$ rvmsudo passenger-install-nginx-module
choose 2: customize</p>

<pre><code>a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
c. default
</code></pre>

<p>```</p>

<h2>Get nginx script</h2>

<p>If you use /opt/nginx as root dir, you don&rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from <a href="https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin">linode</a>)
<code>
$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
</code>
The nginx default public folder will be in <code>/etc/nginx/html</code>
check nginx version:
<code>
$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
</code></p>

<h2>Install php5-fpm</h2>

<p><code>``
$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini
//(find and change to</code>cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify
location ~ .php$ {</p>

<pre><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;
# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
# With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
include fastcgi_params;
</code></pre>

<p>}
$ echo &ldquo;&lt;?php phpinfo(); ?>&rdquo; | sudo tee -a /etc/nginx/html/phpinfo.php
<code>
Restart all:
</code>
$ sudo service php5-fpm restart
$ sudo service nginx restart
```</p>

<h2>Install rails</h2>

<p><code>
$ gem install rails
</code></p>

<h2>RoR environment check</h2>

<p><code>
$ ruby -v
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
</code>
If you passed, you are good to go!</p>

<h2>Deploy Rails application by nginx:</h2>

<p>Assume your rails application path is: <code>/home/vagrant/projects/subapp/</code>
(by <code>rails new subapp</code>)
then, the <code>/etc/nginx/conf/nginx.conf</code> will be:
```
http {</p>

<pre><code>...
server {
    listen 80;
    server_name localhost;
    root /etc/nginx/html;

    # This block has been added.
    location ~ ^/subapp(/.*|$) {
        passenger_base_uri /subapp;
        alias /home/vagrant/projects/subapp/public$1;  # &lt;-- be sure to point to 'public'!
        passenger_app_root /home/vagrant/projects/subapp;
        passenger_enabled on;
        rails_env development; # or production
    }
}
...
</code></pre>

<p>}
<code>``
restart nginx, you can access the url:</code><a href="http://localhost/subapp/">http://localhost/subapp/</a>`</p>

<h2>Install MySQL and Mysql adapter</h2>

<p><code>
$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
</code></p>

<blockquote><p>The gem you installed is placed in RVM&rsquo;s ruby, if you are using RVM&rsquo;s ruby.</p></blockquote>

<p>If you use MySQL in your rails application, remember to change the database.yml.</p>

<p>p.s. If you want to use phpmyadmin, you can do:<br/>
<code>
$ sudo apt-get install php5-mysql
</code>
download phpmyadmin, then extract to <code>/etc/nginx/html/phpmyadmin</code><br/>
then start the server, access: <code>http://localhost/phpmyadmin/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[FreeBSD] FNMP (Nginx)]]></title>
    <link href="http://kerkerj.github.io/blog/2010/12/16/freebsdnginxphpmysql/"/>
    <updated>2010-12-16T06:43:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2010/12/16/freebsdnginxphpmysql</id>
    <content type="html"><![CDATA[<p>就是網頁伺服器 Nginx
FreeBSD + Nginx + php + MySQL</p>

<p>我個人是直接把 apache 直接換成 Nginx
其他只是多安裝一些模組而已，因此換起來還好, 不過還是稍微會寫一些安裝上的順序。</p>

<h1>安装MySQL </h1>

<p>參閱 <a href="http://kerkerj.logdown.com/posts/2010/10/05/freebsd81-famp">此篇文章</a></p>

<h1>安裝PHP</h1>

<p>```</p>

<h1>cd /usr/ports/lang/php5</h1>

<h1>make config install clean</h1>

<p>```</p>

<p>將下面的模組勾一勾，沒有的選項就不管他了～
<code>
[X] CLI        Build CLI version
[X] CGI        Build CGI version
[X] FPM        必勾!!! Nginx處理php時是要交給他處理
[X] APACHE     Build Apache module
[ ] DEBUG      Enable debug
[X] SUHOSIN      Enable Suhosin protection system
[X] MULTIBYTE    Enable zend multibyte support
[ ] IPV6       Enable ipv6 support
[ ] REDIRECT   Enable force-cgi-redirect support (CGI only)
[ ] DISCARD    Enable discard-path support (CGI only)
[X] FASTCGI    Enable fastcgi support (CGI only)
[X] PATHINFO   Enable path-info-check support (CGI only)
</code></p>

<h1>安裝php5-entensions</h1>

<p>```</p>

<h1>cd /usr/ports/lang/php5-extensions/</h1>

<h1>make config install clean</h1>

<p>```</p>

<p>勾選需要的extension，下面必裝，其餘隨意。
<code>
[X] FTP        FTP support
[X] GD      
[X] GETTEXT
[X] MBSTRING
[X] MYSQL
[ ] POSIX //去掉.
[ ] SQLITE //去掉.
[X] ZLIB
</code></p>

<p>```</p>

<h1>cd /usr/local/etc</h1>

<h1>cp php.ini-development php.ini</h1>

<p>```
=>修改PHP設定檔</p>

<h1>安裝nginx</h1>

<p>```</p>

<h1>cd /usr/ports/www/nginx/</h1>

<h1>make install clean</h1>

<p>```
安裝nginx就是這麼簡單～</p>

<p>設定nginx的部份：
編輯 <code>/usr/local/etc/nginx/nginx.conf</code>
將<code>#user nobody;</code> 改成 <code>user www;</code>
找到下面的部份：
<code>
location / {
    root    /usr/local/www/nginx;  //網頁目錄可以換，看你網頁放哪 (ex./home/www)
    index    index.html index.htm;  //記得加入 index.php 等等
}
</code></p>

<p>下面是給 FPM 處理 PHP 的部份，記得先將前面的 # 註解刪掉，
然後將 <code>fastcgi_param</code> 的 <code>/scripts$fastcgi_script.name</code>
更改為: <code>/你的網頁目錄$fastcgi_script.name</code>
例如： <code>/home/www$fastcgi_script.name</code></p>

<p>```</p>

<h1>location ~ .php$ {</h1>

<h1>    fastcgi_pass    127.0.0.1:9000;</h1>

<h1>    fastcgi_index   index.php;</h1>

<h1>    fastcgi_param     SCRIPT_FILENAME    /scripts$fastcgi_script.name;</h1>

<h1>    include      fastcgi_params;</h1>

<h1>}</h1>

<p>```</p>

<p>安裝完後, 記得編輯 <code>/etc/rc.conf</code>, 加入:
<code>
mysql_enable="YES"
nginx_enable="YES"
php_fpm_enable="YES"
</code>
這樣就可以啦<del>~
如果有 phpmyadmin 的話，可以將該資料夾整個複製到網頁根目錄底下，就可以操作了</del></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[FreeBSD] FAMP]]></title>
    <link href="http://kerkerj.github.io/blog/2010/10/04/freebsd81-famp/"/>
    <updated>2010-10-04T18:25:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2010/10/04/freebsd81-famp</id>
    <content type="html"><![CDATA[<p>FAMP:
經典的網頁伺服器組合, 由FreeBSD, Apache, MySQL, PHP所組成 (使用Linux則稱為LAMP)
以下則是在FreeBSD安裝網頁伺服器的過程簡單紀錄及問題排解。</p>

<p>Env: FreeBSD 8.1　（以"此篇"安裝好的FreeBSD接續）
安裝順序為:MySQL-> Apache-> PHP-> PHP-extension &ndash;> phpMyAdmin</p>

<h1>MySQL</h1>

<p>```</p>

<h1>cd /usr/ports/databases/mysql50-server</h1>

<h1>make WITH_CHARSET=utf8 WITH_XCHARSET=all WITH_COLLATION=utf8_unicode_ci BUILD_OPTIMIZED=yes instal clean</h1>

<p>```
=>安裝 mysql server 並設定編碼為utf8</p>

<p>```</p>

<h1>rehash</h1>

<h1>sudo mysql_install_db (記得需要用root權限)</h1>

<p>```
=>安裝資料庫</p>

<p>```</p>

<h1>cp /usr/local/share/mysql/my-medium.cnf /etc/my.cnf</h1>

<p>```
=>複製設定檔</p>

<p>```</p>

<h1>sudo chown -R mysql:mysql /var/db/mysql</h1>

<p>```
=>變更mysql資料庫權限</p>

<p>```</p>

<h1>sudo mysqld_safe &amp;</h1>

<p>```
=>初始啟動</p>

<p>```</p>

<h1>sudo mysqladmin -u root -p password &lsquo;Your_password&rsquo;</h1>

<p>也可以是這樣</p>

<h1>sudo mysqladmin -u root passowrd &lsquo;Your_password&rsquo;</h1>

<p>```
=>新增使用者 root , 前者會出現"Enter Password", 就當做是confirm就好了</p>

<p>```</p>

<h1>sudo mysql -u root</h1>

<p>```
=>進入MySQL, 輸入剛剛設定的密碼即可</p>

<h1>Apache</h1>

<p>```</p>

<h1>cd /usr/ports/www/apache22</h1>

<h1>make install clean</h1>

<p>```
=>安裝apache 皆使用預設設定</p>

<h1>PHP</h1>

<p>```</p>

<h1>cd /usr/ports/lang/php5</h1>

<h1>make config install clean</h1>

<p>p.s.勾選 [X] APACHE Build Apache module
```
=>安裝php</p>

<p>```</p>

<h1>cd /usr/ports/lang/php5-extensions/</h1>

<h1>make config install clean</h1>

<p>```
=>安裝 php5-entensions, 勾選需要的extension</p>

<p>```</p>

<h1>cd /usr/local/etc</h1>

<h1>cp php.ini-development php.ini</h1>

<p>```
=>修改PHP設定檔</p>

<p>修改Apache設定檔:
編輯 <code>/usr/local/etc/apache22/httpd.conf</code>
加入:
<code>
AddType application/x-httpd-php .php
AddType application/x-httpd-php-source .phps
</code>
將 <code>DirectoryIndex index.html</code>
修改成 <code>DirectoryIndex index.php index.html index.htm</code></p>

<p>*如果要變更網站檔案預設路徑的話請見附註</p>

<p>設定開機啟動Apache以及MySQL
編輯 <code>/etc/rc.conf</code>
加入:
<code>
apache22_enable="YES"
apache22_http_accept_enable="YES"
mysql_enable="YES"
</code></p>

<h1>phpMyAdmin</h1>

<p>```</p>

<h1>cd /usr/ports/databases/phpmyadmin</h1>

<h1>make install clean</h1>

<p><code>
</code>
Alias /phpmyadmin/ &ldquo;/usr/local/www/phpMyAdmin/"<br/>
 <Directory "/usr/local/www/phpMyAdmin/"><br/>
     Options Indexes FollowSymLinks<br/>
     AllowOverride None<br/>
     Order allow,deny<br/>
     Allow from all<br/>
 </Directory><br/>
<code>``
編輯</code>httpd.conf`:</p>

<p>```</p>

<h1>cd /usr/local/www/phpmyadmin/</h1>

<h1>cp config.sample.inc.php config.inc.php</h1>

<h1>vim config.inc.php</h1>

<p>```
=>編輯phpMyAdmin的設定檔</p>

<p>把這行 <code>$cfg['blowfish_secret'] = '';</code>
改成 <code>$cfg['blowfish_secret'] = 'aabbccdd'; //裡面的字串可以自己修改</code></p>

<p>重新啟動apache之後就可以連到 <code>http://你的網址/phpmyadmin/</code>看到 phpMyAdmin 的登入畫面
此時可以使用mysql的帳號密碼登入管理資料庫</p>

<h1>安裝後注意：</h1>

<p>啟動： <code>/usr/local/etc/rc.d/mysql-server start</code>
進入command line： <code>#/usr/local/bin/mysql mysql</code>
更改root密碼：
<code>
UPDATE user SET password=password('你的密碼') where user='root';
FLUSH PRIVILEGES;
</code>
新增一使用者（完整權限，localhost登入), 再刪除root</p>

<hr />

<p>狀況A &ndash; 若啟動apache時出現以下狀況<br/>
<code>httpd: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName</code></p>

<p>到 <code>httd.conf</code><br/>
找到 <code>#ServerName www.example.com:80</code><br/>
將註解刪除, 並將 <code>www.example.com</code> 改成自己的 domain
若是自己的測試機就改成 <code>localhost</code> , 這樣重新啟動即可</p>

<hr />

<p>狀況B:<br/>
```</p>

<h1>mysql -u root -p</h1>

<p>Enter password:<br/>
ERROR 1045 (28000): Access denied for user &lsquo;root&rsquo;@&lsquo;localhost&rsquo; (using password: NO)<br/>
<code>
</code></p>

<h1>sudo /usr/local/etc/rc.d/mysql-server stop</h1>

<h1>sudo mysqld_safe &mdash;user=mysql &mdash;skip-grant-tables &mdash;skip-networking &amp;</h1>

<h1>sudo mysql -u root mysql</h1>

<p>mysql> UPDATE user SET Password=PASSWORD(&lsquo;newpassword&rsquo;) where USER=&lsquo;root&rsquo;;
mysql> FLUSH PRIVILEGES;
mysql> quit</p>

<h1>sudo /usr/local/etc/rc.d/mysql-server restart</h1>

<h1>mysql -u root -p</h1>

<p>Enter password: &lt;輸入新設定的密碼></p>

<p>mysql>
```
done!</p>

<hr />

<p>狀況C: 若遇上**警告提示
<code>
Warning: phpinfo() [[function.phpinfo][1]]: It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected 'UTC' for '8.0/no DST' instead in **/.../index.php** on line **2  
</code></p>

<p>通常是出現在5.3.0的版本<br/>
只要修改 <code>php.ini</code> , 加上 <code>'date'.timezone = "Asia/Taipei"</code> 即可解決!</p>

<hr />

<p>狀況D: 進入 phpmyadmin 時，出現 <code>無法讀取 mcrypt 模組,&lt;br /&gt;請檢查 PHP 設定</code></p>

<p>解決方法:<br/>
<code>vim config.inc.php</code><br/>
找出 <code>$cfg['Servers'][$i]['auth_type'] = 'cokies';</code><br/>
改成 <code>$cfg['Servers'][$i]['auth_type'] = 'http';</code><br/>
由原本網頁上面輸入帳號密碼變成跳出對話框來輸入帳號密碼</p>

<hr />

<p>補充:<br/>
更改apache的DocumentRoot<br/>
不想把文件放在 <code>/usr/local/www/apache22/data</code><br/>
想把他放在 <code>/home/www/</code><br/>
因此到 home 目錄去 mkdir 一個 www 資料夾<br/>
再到 <code>httpd.conf</code>, 更改兩個地方, 原本為<br/>
<code>
DocumentRoot "/usr/local/www/apache22/data"
&lt;Directory "/usr/local/www/apache22/data"&gt;
</code></p>

<p>改為<br/>
<code>
DocumentRoot "/home/www/"  
&lt;Directory "/home/www/"&gt;  
</code>
這樣就會連到/home/www/去讀資料了</p>
]]></content>
  </entry>
  
</feed>
