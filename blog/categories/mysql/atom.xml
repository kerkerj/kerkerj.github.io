<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-02T01:41:44+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emoji Data in MySQL]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/06/emoji-data-in-mysql/"/>
    <updated>2014-08-06T18:17:59+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/06/emoji-data-in-mysql</id>
    <content type="html"><![CDATA[<p>Supported MySQL 5.5, 5.6.</p>

<p>First, MySQL should set DB and table to utf8mb4.</p>

<p>utf8 &ndash; 3 byte characters</p>

<p>utf8mb4 &ndash; 4 byte characters</p>

<p>```sql
ALTER DATABASE my_database DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</p>

<p>ALTER TABLE my_table DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</p>

<p>ALTER TABLE my_column CHANGE my_column my_column TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL;
```</p>

<p>Then, when inserting data or selecting data, execute this statement first:</p>

<p>```sql
&mdash;Execute this statement first
SET NAMES utf8mb4;</p>

<p>&mdash;then insert or select
SELECT * FROM my_table
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Rails Server Env With Rbenv on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04/"/>
    <updated>2014-07-30T11:36:54+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>```
nodejs v0.10.25 (for rails javascript engine)</p>

<p>rbenv 0.4.0-98-g13a474c</p>

<p>ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]</p>

<p>Rails 4.1.4</p>

<p>nginx version: nginx/1.6.0</p>

<p>Phusion Passenger version 4.0.48</p>

<p>mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3</p>

<p>```</p>

<h2>Installing Ruby &amp; Rails</h2>

<p><code>
sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm
</code></p>

<p>Use rbenv</p>

<p>```
cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo &lsquo;export PATH=&ldquo;$HOME/.rbenv/bin:$PATH&rdquo;&rsquo; >> ~/.bashrc
echo &lsquo;eval &ldquo;$(rbenv init &ndash;)&rdquo;&rsquo; >> ~/.bashrc
exec $SHELL</p>

<p>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo &lsquo;export PATH=&ldquo;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&rdquo;&rsquo; >> ~/.bashrc
exec $SHELL</p>

<p>rbenv install 2.1.2
exec $SHELL</p>

<p>rbenv global 2.1.2
ruby -v
```</p>

<p>Don&rsquo;t install rdoc when installing gems</p>

<p><code>
echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc
</code></p>

<p>Install rails</p>

<p><code>
gem install rails
exec $SHELL
rails -v
</code></p>

<h2>Installing Nginx with passenger</h2>

<p>```</p>

<h1>Install Phusion&rsquo;s PGP key to verify packages</h1>

<p>gpg &mdash;keyserver keyserver.ubuntu.com &mdash;recv-keys 561F9B9CAC40B2F7
gpg &mdash;armor &mdash;export 561F9B9CAC40B2F7 | sudo apt-key add &ndash;</p>

<h1>Add HTTPS support to APT</h1>

<p>sudo apt-get install apt-transport-https</p>

<h1>Add the passenger repository</h1>

<p>sudo sh -c &ldquo;echo &lsquo;deb <a href="https://oss-binaries.phusionpassenger.com/apt/passenger">https://oss-binaries.phusionpassenger.com/apt/passenger</a> trusty main&rsquo; >> /etc/apt/sources.list.d/passenger.list&rdquo;
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update</p>

<h1>Install nginx and passenger</h1>

<p>sudo apt-get install nginx-full passenger
```</p>

<p>Edit passenger configuration in <code>/etc/nginx/nginx.conf</code></p>

<p>```</p>

<h1>#</h1>

<h1>Phusion Passenger</h1>

<h1>#</h1>

<h1>Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise</h1>

<h1>#</h1>

<p>passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;</p>

<p>passenger_ruby /usr/bin/ruby; #change this line</p>

<h1>passenger_ruby /home/yourpath/.rbenv/shims/ruby; # If you use rbenv</h1>

<h1>Use <code>which ruby</code></h1>

<p>```</p>

<h2>Installing MySQL</h2>

<p><code>
sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></p>

<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[MySQL] Several Useful Statements (GROUP_CONCAT, Ifnull, DATE_FORMAT)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/05/06/mysql-several-useful-statements-group-concat-ifnull-date-format/"/>
    <updated>2014-05-06T06:10:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/05/06/mysql-several-useful-statements-group-concat-ifnull-date-format</id>
    <content type="html"><![CDATA[<ol>
<li><p>將 query 出來的多筆記錄結合成一個欄位<br/>
例如原本的 query 結果為：<br/>
<code>SELECT 'fruits' FROM 'fruits_table'</code><br/>
apple<br/>
banana<br/>
kiwi<br/>
<code>SELECT group_concat('fruits' separator ',') FROM 'fruits_table'</code><br/>
result: apple,banana,kiwi</p></li>
<li><p>改變 datetime 欄位的顯示結果<br/>
<code>SELECT DATE_FORMAT( 'created_at', '%Y/%m/%d %H:%i') AS 'created_at' FROM 'message_table'</code><br/>
result: 2014/05/06 18:20</p></li>
<li><p>若某個欄位的值為空，則給予預設值<br/>
<code>SELECT ifnull('is_success', 0) AS 'is_success' FROM ....</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] List of Rails Model Type (MySQL)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql/"/>
    <updated>2014-01-02T07:38:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/02/rails-list-of-rails-model-type-mysql</id>
    <content type="html"><![CDATA[<p>:binary<br/>
:boolean<br/>
:date<br/>
:datetime<br/>
:decimal<br/>
:float<br/>
:integer<br/>
:primary_key<br/>
:string<br/>
:text<br/>
:time<br/>
:timestamp</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column">http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] RoR Environment]]></title>
    <link href="http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment/"/>
    <updated>2013-12-20T03:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment</id>
    <content type="html"><![CDATA[<h2>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)</h2>

<p>p.s.
If you don&rsquo;t use RVM, you can just follow the instruction from <a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu">Passenger offcial website</a>. It will be easier.
Plus, I installed all these things by Vagrant.</p>

<h2>First thing to do</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get upgrade
</code></p>

<h2>Pre-setup: install necessary packages</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
</code></p>

<h2>Get .bashrc from my repo (Optional)</h2>

<p><code>
$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
</code></p>

<h2>Get .vimrc from my repo (Optional)</h2>

<p><code>
$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
</code></p>

<h2>RVM and Ruby 2.0 (RVM: Ruby version management)</h2>

<p>```
$ \curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile
$ rvm requirements
$ echo &lsquo;gem: &mdash;no-ri &mdash;no-rdoc&rsquo;  >> ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile</p>

<p>add this line to .bash_rc or .bash_profile (if you don&rsquo;t use my .bash_profile)
[[ -s &ldquo;$HOME/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; . &ldquo;$HOME/.rvm/scripts/rvm&rdquo; # Load RVM function</p>

<p>$ rvm use 2.0.0 &mdash;default
<code>
Now we should be using ruby2.0.0 by RVM, let's check:
</code>
$ rvm list
=<em> ruby-2.0.0-p353 [ x86_64 ]
// => &ndash; current
// =</em> &ndash; current &amp;&amp; default
//  * &ndash; default
```</p>

<h2>Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)</h2>

<p><code>
$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev
</code></p>

<h2>Passenger with NGINX</h2>

<p>```
$ gem install passenger
$ rvmsudo passenger-install-nginx-module
choose 2: customize</p>

<pre><code>a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
c. default
</code></pre>

<p>```</p>

<h2>Get nginx script</h2>

<p>If you use /opt/nginx as root dir, you don&rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from <a href="https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin">linode</a>)
<code>
$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
</code>
The nginx default public folder will be in <code>/etc/nginx/html</code>
check nginx version:
<code>
$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
</code></p>

<h2>Install php5-fpm</h2>

<p><code>``
$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini
//(find and change to</code>cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify
location ~ .php$ {</p>

<pre><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;
# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
# With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
include fastcgi_params;
</code></pre>

<p>}
$ echo &ldquo;&lt;?php phpinfo(); ?>&rdquo; | sudo tee -a /etc/nginx/html/phpinfo.php
<code>
Restart all:
</code>
$ sudo service php5-fpm restart
$ sudo service nginx restart
```</p>

<h2>Install rails</h2>

<p><code>
$ gem install rails
</code></p>

<h2>RoR environment check</h2>

<p><code>
$ ruby -v
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
</code>
If you passed, you are good to go!</p>

<h2>Deploy Rails application by nginx:</h2>

<p>Assume your rails application path is: <code>/home/vagrant/projects/subapp/</code>
(by <code>rails new subapp</code>)
then, the <code>/etc/nginx/conf/nginx.conf</code> will be:
```
http {</p>

<pre><code>...
server {
    listen 80;
    server_name localhost;
    root /etc/nginx/html;

    # This block has been added.
    location ~ ^/subapp(/.*|$) {
        passenger_base_uri /subapp;
        alias /home/vagrant/projects/subapp/public$1;  # &lt;-- be sure to point to 'public'!
        passenger_app_root /home/vagrant/projects/subapp;
        passenger_enabled on;
        rails_env development; # or production
    }
}
...
</code></pre>

<p>}
<code>``
restart nginx, you can access the url:</code><a href="http://localhost/subapp/">http://localhost/subapp/</a>`</p>

<h2>Install MySQL and Mysql adapter</h2>

<p><code>
$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
</code></p>

<blockquote><p>The gem you installed is placed in RVM&rsquo;s ruby, if you are using RVM&rsquo;s ruby.</p></blockquote>

<p>If you use MySQL in your rails application, remember to change the database.yml.</p>

<p>p.s. If you want to use phpmyadmin, you can do:<br/>
<code>
$ sudo apt-get install php5-mysql
</code>
download phpmyadmin, then extract to <code>/etc/nginx/html/phpmyadmin</code><br/>
then start the server, access: <code>http://localhost/phpmyadmin/</code></p>
]]></content>
  </entry>
  
</feed>
