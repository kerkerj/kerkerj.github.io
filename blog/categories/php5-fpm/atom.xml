<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Php5-fpm | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/php5-fpm/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-08-05T23:29:31+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] RoR Environment]]></title>
    <link href="http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment/"/>
    <updated>2013-12-20T03:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment</id>
    <content type="html"><![CDATA[<h2>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)</h2>

<p>p.s.
If you don&rsquo;t use RVM, you can just follow the instruction from <a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu">Passenger offcial website</a>. It will be easier.
Plus, I installed all these things by Vagrant.</p>

<h2>First thing to do</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get upgrade
</code></p>

<h2>Pre-setup: install necessary packages</h2>

<p><code>
$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
</code></p>

<h2>Get .bashrc from my repo (Optional)</h2>

<p><code>
$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
</code></p>

<h2>Get .vimrc from my repo (Optional)</h2>

<p><code>
$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
</code></p>

<h2>RVM and Ruby 2.0 (RVM: Ruby version management)</h2>

<p>```
$ \curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile
$ rvm requirements
$ echo &lsquo;gem: &mdash;no-ri &mdash;no-rdoc&rsquo;  >> ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile.
//If not, source ~/.profile</p>

<p>add this line to .bash_rc or .bash_profile (if you don&rsquo;t use my .bash_profile)
[[ -s &ldquo;$HOME/.rvm/scripts/rvm&rdquo; ]] &amp;&amp; . &ldquo;$HOME/.rvm/scripts/rvm&rdquo; # Load RVM function</p>

<p>$ rvm use 2.0.0 &mdash;default
<code>
Now we should be using ruby2.0.0 by RVM, let's check:
</code>
$ rvm list
=<em> ruby-2.0.0-p353 [ x86_64 ]
// => &ndash; current
// =</em> &ndash; current &amp;&amp; default
//  * &ndash; default
```</p>

<h2>Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)</h2>

<p><code>
$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev
</code></p>

<h2>Passenger with NGINX</h2>

<p>```
$ gem install passenger
$ rvmsudo passenger-install-nginx-module
choose 2: customize</p>

<pre><code>a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
c. default
</code></pre>

<p>```</p>

<h2>Get nginx script</h2>

<p>If you use /opt/nginx as root dir, you don&rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from <a href="https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin">linode</a>)
<code>
$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
</code>
The nginx default public folder will be in <code>/etc/nginx/html</code>
check nginx version:
<code>
$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
</code></p>

<h2>Install php5-fpm</h2>

<p><code>``
$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini
//(find and change to</code>cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify
location ~ .php$ {</p>

<pre><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;
# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
# With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
include fastcgi_params;
</code></pre>

<p>}
$ echo &ldquo;&lt;?php phpinfo(); ?>&rdquo; | sudo tee -a /etc/nginx/html/phpinfo.php
<code>
Restart all:
</code>
$ sudo service php5-fpm restart
$ sudo service nginx restart
```</p>

<h2>Install rails</h2>

<p><code>
$ gem install rails
</code></p>

<h2>RoR environment check</h2>

<p><code>
$ ruby -v
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
</code>
If you passed, you are good to go!</p>

<h2>Deploy Rails application by nginx:</h2>

<p>Assume your rails application path is: <code>/home/vagrant/projects/subapp/</code>
(by <code>rails new subapp</code>)
then, the <code>/etc/nginx/conf/nginx.conf</code> will be:
```
http {</p>

<pre><code>...
server {
    listen 80;
    server_name localhost;
    root /etc/nginx/html;

    # This block has been added.
    location ~ ^/subapp(/.*|$) {
        passenger_base_uri /subapp;
        alias /home/vagrant/projects/subapp/public$1;  # &lt;-- be sure to point to 'public'!
        passenger_app_root /home/vagrant/projects/subapp;
        passenger_enabled on;
        rails_env development; # or production
    }
}
...
</code></pre>

<p>}
<code>``
restart nginx, you can access the url:</code><a href="http://localhost/subapp/">http://localhost/subapp/</a>`</p>

<h2>Install MySQL and Mysql adapter</h2>

<p><code>
$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
</code></p>

<blockquote><p>The gem you installed is placed in RVM&rsquo;s ruby, if you are using RVM&rsquo;s ruby.</p></blockquote>

<p>If you use MySQL in your rails application, remember to change the database.yml.</p>

<p>p.s. If you want to use phpmyadmin, you can do:<br/>
<code>
$ sudo apt-get install php5-mysql
</code>
download phpmyadmin, then extract to <code>/etc/nginx/html/phpmyadmin</code><br/>
then start the server, access: <code>http://localhost/phpmyadmin/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Vagrant] 使用 Vagrant 安裝 Nginx, Php5-fpm, MySQL]]></title>
    <link href="http://kerkerj.github.io/blog/2013/10/22/vagrant-vagrant-nginx-php5-fpm/"/>
    <updated>2013-10-22T13:21:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/10/22/vagrant-vagrant-nginx-php5-fpm</id>
    <content type="html"><![CDATA[<h1><a href="http://www.vagrantup.com/">Vagrant</a> &ndash; Development environments made easy.</h1>

<p>就是這個軟體的宗旨，把它想做是 ghost 吧！我們開發網站或是測試一些多機器架構時，常不小心就把自己的電腦或是測試主機搞到爛掉，租機器又慢又花錢，搞到爛重灌更麻煩。因此這個軟體基於 VirtualBox 做出了令人方便設定的功能，讓我們可以快速架設安裝環境並測試，尤其是以多機器架構而言更是方便！例如從最簡單的 Web server + DB server，或是 Web Load Balancer + Application Server * 5 等等的架構，一台電腦就能達成囉！
今天主要是以安裝 Vagrant 及架設出 Nginx + php5-fpm 的架構，下一篇打算另外建構一台 mongodb server，達到 Vagrant 最主要的多機器設定功能~</p>

<h1>Vagrant 基本設定</h1>

<ol>
<li>先下載 VirtualBox 吧！</li>
<li>下載 Vagarnt 套件 <a href="http://downloads.vagrantup.com/">http://downloads.vagrantup.com/</a><br/>
安裝好後，可能會需要加 path，至少 1.3.0 當時我是自己加的，現在 1.3.5 就不清楚了~</li>
<li>接下來就可以開始加入 box (可以把它想為 ghost 檔)，並開始設定 Vagrant。
<code>
vagrant box add {你想要的Box名稱} {下載網址}
</code>
輸入後就會開始下載該 box 了！ 範例：
<code>
$vagrant box add devbox http://ﬁles.vagrantup.com/precise64.box   
$mkdir my_box  
$cd my_box  
$vagrant init devbox (將 my_box 這個專案資料夾以 devbox 這個 box 檔案初始化)  
</code>
box 官方有提供 Ubuntu 的，在 <a href="http://www.vagrantbox.es/">vagrantbox.es</a> 很多，可以自己找～ 當然自己做應該也是可以的！</li>
</ol>


<h1>Vagrant 基本指令</h1>

<p><code>
vagrant up 開機  
vagrant ssh 登⼊  
vagrant suspend 暫停  
vagrant halt 關機  
vagrant destroy 刪除  
</code></p>

<h1>進入新裝好的機器吧！</h1>

<p><code>
$vagrant up  //開機  
$vagrant ssh //登入  
</code></p>

<h1>Vagrantfile 設定</h1>

<p>Vagrantfile 這個設定檔可以用很多很強大的設定，在官方網頁裡有教學
不過首先要先做的是： <code>config.vm.forward_port 80, 8088</code>
把虛擬機器裡從 80 port 傳送的東西丟到本機的 8088 port
如此一來在本機瀏覽器輸入 localhost:8088 ，就可以看到網頁了！
另外就是： <code>config.vm.synced_folder "/vagrant", "本機目錄"</code>
如此一來，Ubuntu 底下就有一個 /vargrant 目錄，和自己主機裡的某個目錄是同步的！
也就是在自己主機上寫好程式後，就可以直接讓虛擬機器抓到 code 去執行，超方便的！
只要把 nginx 的網頁目錄設定在 /vagrant 上就可以了！ (後面會說)</p>

<h1>Ubuntu 基本安裝</h1>

<p>進去後是乾淨的 Ubuntu 12.04 64位元版，因此需先做點安裝:
<code>
$sudo apt-get -y update  
$sudo apt-get --no-install-recommends -y install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev libgdbm-dev ncurses-dev automake libtool bison subversion pkg-config libffi-dev vim  
</code>
有些東西其實可以不用裝，就看個人的需求，必裝應該是 build-essential, openssl, curl, git-core, vim XD</p>

<h1>Nginx &amp; php5-fpm 安裝</h1>

<p>安裝 Nginx
<code>
$sudo apt-get install nginx  
</code>
若要更改 Nginx 的網頁目錄，設定檔在 <code>/etc/nginx/</code> 裡，
通常應該是更改 <code>/etc/nginx/sites-enable/default</code> 裡的 <code>root /usr/share/nginx/www/</code>
還要將這段 code 解除註解：
```
location ~ .php$ {</p>

<pre><code>fastcgi_split_path_info ^(.+\.php)(/.+)$;
# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

# With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
include fastcgi_params;
</code></pre>

<p>}
<code>
更改後確認一下 `/etc/nginx/nginx.conf` 是否有 `inculde /etc/nginx/sites-enable/*`
</code>
$sudo service nginx start (開始服務)
<code>
安裝 php5-fpm
</code>
$sudo apt-get install php5-fpm<br/>
$sudo vim /etc/php5/fpm/php.ini (找到並更改 cgi.fix_pathinfo = 0 )<br/>
$sudo vim /etc/php5/fpm/pool.d/www.conf<br/>
<code>
找到 `listen = 127.0.0.1:9000`, 換成 `/var/run/php5-fpm.sock`
寫個 phpinfo(); 的 php 檔放入資料夾
</code>
$sudo service php5-fpm restart (開啟服務)
```
在瀏覽器輸入 localhost:8088 就可以看到 nginx 的頁面，再讀取剛剛寫的 php 應該就成功囉！</p>

<p>安裝 MySQL:
<code>
$ sudo apt-get install mysql-server
</code>
過程中會問 root 的密碼，裝完後就可以登入：
<code>
$ mysql -u root -p
</code></p>

<p>下回就是多機器的設定囉～</p>

<p>reference:<br/>
<a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">http://gogojimmy.net/2013/05/26/vagrant-tutorial/</a>
<a href="http://www.slideshare.net/ihower/vagrant-osdc">http://www.slideshare.net/ihower/vagrant-osdc</a>
<a href="https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04">https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04</a></p>

<p>p.s. Vagrantfile 產生器：<a href="https://puphpet.com/#vagrantfile">Puphpet.com/#vagrantfile</a>
這網站有很多值得玩的地方，可以直接幫你產生出這些設定檔真的是太方便了！</p>

<p>p.s.s.有亂入用到的指令記一下：dpkg &mdash;get-selections 列出已安裝的 package
另外提供一下我在研究 Vagrant 的筆記，很亂超級亂，但是有些東西沒有寫在 blog 裡~
<a href="https://www.evernote.com/shard/s81/sh/91ccf490-d9cd-468e-943a-d57c79d052f4/71e0a682b024c6e97fd8c79b90f89f67">Evernote by kerkerj</a></p>
]]></content>
  </entry>
  
</feed>
