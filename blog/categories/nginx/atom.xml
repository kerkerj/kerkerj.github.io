<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nginx | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-24T20:47:09+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Codeigniter on Nginx]]></title>
    <link href="http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx/"/>
    <updated>2014-09-25T16:03:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx</id>
    <content type="html"><![CDATA[<p>I use Ubuntu 14.04, Nginx 1.4.6, php5-fpm, Codeigniter 2.2.0</p>

<p>It will remove index.php, and access Codeigniter site normally.</p>

<p>Clean configuration:</p>

<pre><code class="text "/etc/nginx/site-enabled/default"">server {

#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; START
        listen 80;
        listen [::]:80 default_server ipv6only=on;

        root /YOUR/PROJECT/ROOT;
        index index.html index.htm index.php;

        # Make site accessible from http://localhost/
        server_name localhost;

        #location ~* .(ico|css|js|gif|jpe?g|png)(?[0-9]+)?$ {
        #   expires max;
        #   log_not_found off;
        #}

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.php;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }

        location ~ .php$ {
            root           /YOUR/PROJECT/ROOT;
            try_files $uri =404;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_buffer_size 128k;
            fastcgi_buffers 256 4k;
            fastcgi_busy_buffers_size 256k;
            fastcgi_temp_file_write_size 256k;
        }

#&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; END

        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
        #location /RequestDenied {
        #       proxy_pass http://127.0.0.1:8080;

        #error_page 404 /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page 500 502 503 504 /50x.html;
        #location = /50x.html {
        #       root /usr/share/nginx/html;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #       fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #       # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        #
        #       # With php5-cgi alone:
        #       fastcgi_pass 127.0.0.1:9000;
        #       # With php5-fpm:
        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
        #       fastcgi_index index.php;
        #       include fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}
</code></pre>

<p>Codeigniter config:</p>

<pre><code class="php config.php">$config['index_page'] = '';
$config['uri_protocol'] = 'REQUEST_URI';
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openresty on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/05/openresty-on-ubuntu-14-dot-04/"/>
    <updated>2014-08-05T23:47:39+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/05/openresty-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<p>choose the latest version of Openresty<br/>
I used ngx_openresty-1.7.2.1.tar.gz</p>

<pre><code class="console"># install packages
sudo apt-get install libreadline-dev libpcre3-dev libssl-dev perl  

# get openresty package
wget http://openresty.org/download/ngx_openresty-1.7.2.1.tar.gz   

# unzip
tar xzvf ngx_openresty-1.7.2.1.tar.gz

# install
cd ngx_openresty-1.7.2.1/

# You can setup with ./configure --prefix="the folder you want to install", default is '/usr/local/openresty'
./configure 
make
sudo make install # need permission to copy file to target folder
</code></pre>

<p>Default folder: <code>/usr/local/openresty</code></p>

<h2>Setup</h2>

<p>create work folder in ~<br/>
<code>
mkdir ~/work
cd ~/work
mkdir logs/ conf/
</code></p>

<p>create a new file in <code>~/work/conf/nginx.conf</code>
<code>
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("&lt;p&gt;hello, world&lt;/p&gt;")
            ';
        }
    }
}
</code></p>

<p>because Openresty is installed in <code>/usr/local/openresty</code>,<br/>
we need to add the directory to PATH variable
<code>
PATH=/usr/local/openresty/nginx/sbin:$PATH
export PATH
</code></p>

<p>Then use the way below to start nginx server
<code>
nginx -p `pwd`/ -c conf/nginx.conf
</code></p>

<p>Assume that you have a nginx server originally, and then you installed Openresty, it can be set up at the same time if the port is not confilcted to the origin nginx.</p>

<h2>Use external lua file to keep conf clean</h2>

<p>Edit <code>~/work/conf/nginx.conf</code></p>

<pre><code>worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location /hello {
            content_by_lua_file conf/hello.lua;
        }
    }
}
</code></pre>

<pre><code class="lua hello.lua">-- hello.lua
ngx.say("Hello World")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Rails Server Env With Rbenv on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04/"/>
    <updated>2014-07-30T11:36:54+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<pre><code>nodejs v0.10.25 (for rails javascript engine)

rbenv 0.4.0-98-g13a474c

ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]

Rails 4.1.4

nginx version: nginx/1.6.0

Phusion Passenger version 4.0.48

mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3
</code></pre>

<h2>Installing Ruby &amp; Rails</h2>

<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm
</code></pre>

<p>Use rbenv</p>

<pre><code>cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
exec $SHELL

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
exec $SHELL

rbenv install 2.1.2
exec $SHELL

rbenv global 2.1.2
ruby -v
</code></pre>

<p>Don&rsquo;t install rdoc when installing gems</p>

<pre><code>echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc
</code></pre>

<p>Install rails</p>

<pre><code>gem install rails
exec $SHELL
rails -v
</code></pre>

<h2>Installing Nginx with passenger</h2>

<pre><code># Install Phusion's PGP key to verify packages
gpg --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
gpg --armor --export 561F9B9CAC40B2F7 | sudo apt-key add -

# Add HTTPS support to APT
sudo apt-get install apt-transport-https

# Add the passenger repository
sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' &gt;&gt; /etc/apt/sources.list.d/passenger.list"
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update

# Install nginx and passenger
sudo apt-get install nginx-full passenger
</code></pre>

<p>Edit passenger configuration in <code>/etc/nginx/nginx.conf</code></p>

<pre><code>##
# Phusion Passenger
##
# Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
##

passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;

passenger_ruby /usr/bin/ruby; #change this line

# passenger_ruby /home/yourpath/.rbenv/shims/ruby; # If you use rbenv
# Use `which ruby`
</code></pre>

<h2>Installing MySQL</h2>

<pre><code>sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></pre>

<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] RoR Environment]]></title>
    <link href="http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment/"/>
    <updated>2013-12-20T03:34:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2013/12/20/ubuntu-ror-environment</id>
    <content type="html"><![CDATA[<h2>RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)</h2>

<p>p.s.
If you don&rsquo;t use RVM, you can just follow the instruction from <a href="http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu">Passenger offcial website</a>. It will be easier.
Plus, I installed all these things by Vagrant.</p>

<h2>First thing to do</h2>

<pre><code>$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre>

<h2>Pre-setup: install necessary packages</h2>

<pre><code>$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
</code></pre>

<h2>Get .bashrc from my repo (Optional)</h2>

<pre><code>$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
</code></pre>

<h2>Get .vimrc from my repo (Optional)</h2>

<pre><code>$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
</code></pre>

<h2>RVM and Ruby 2.0 (RVM: Ruby version management)</h2>

<pre><code>$ \curl -sSL https://get.rvm.io | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile
$ rvm requirements
$ echo 'gem: --no-ri --no-rdoc'  &gt;&gt; ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile

add this line to .bash_rc or .bash_profile (if you don't use my .bash_profile)
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function

$ rvm use 2.0.0 --default
</code></pre>

<p>Now we should be using ruby2.0.0 by RVM, let&rsquo;s check:
<code>
$ rvm list
=* ruby-2.0.0-p353 [ x86_64 ]
// =&gt; - current
// =* - current &amp;&amp; default
//  * - default
</code></p>

<h2>Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)</h2>

<pre><code>$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev 
</code></pre>

<h2>Passenger with NGINX</h2>

<pre><code>$ gem install passenger 
$ rvmsudo passenger-install-nginx-module
choose 2: customize
    a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
    b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
    c. default
</code></pre>

<h2>Get nginx script</h2>

<p>If you use /opt/nginx as root dir, you don&rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from <a href="https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin">linode</a>)
<code>
$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
</code>
The nginx default public folder will be in <code>/etc/nginx/html</code>
check nginx version:
<code>
$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
</code></p>

<h2>Install php5-fpm</h2>

<pre><code>$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini 
//(find and change to `cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf 
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify 
location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    # With php5-cgi alone:
    #fastcgi_pass 127.0.0.1:9000;
    # With php5-fpm:
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include fastcgi_params;
}
$ echo "&lt;?php phpinfo(); ?&gt;" | sudo tee -a /etc/nginx/html/phpinfo.php
</code></pre>

<p>Restart all:
<code>
$ sudo service php5-fpm restart
$ sudo service nginx restart
</code></p>

<h2>Install rails</h2>

<pre><code>$ gem install rails
</code></pre>

<h2>RoR environment check</h2>

<pre><code>$ ruby -v 
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
</code></pre>

<p>If you passed, you are good to go!</p>

<h2>Deploy Rails application by nginx:</h2>

<p>Assume your rails application path is: <code>/home/vagrant/projects/subapp/</code>
(by <code>rails new subapp</code>)
then, the <code>/etc/nginx/conf/nginx.conf</code> will be:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http {
</span><span class='line'>    &hellip;
</span><span class='line'>    server {
</span><span class='line'>        listen 80;
</span><span class='line'>        server_name localhost;
</span><span class='line'>        root /etc/nginx/html;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;    # This block has been added.
</span><span class='line'>    location ~ ^/subapp(/.*|$) {
</span><span class='line'>        passenger_base_uri /subapp;
</span><span class='line'>        alias /home/vagrant/projects/subapp/public$1;  # &lt;-- be sure to point to 'public'!
</span><span class='line'>        passenger_app_root /home/vagrant/projects/subapp;
</span><span class='line'>        passenger_enabled on;
</span><span class='line'>        rails_env development; # or production
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>...
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;}
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>restart nginx, you can access the url:&lt;/code&gt;&lt;a href="http://localhost/subapp/"&gt;http://localhost/subapp/&lt;/a&gt;`&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Install MySQL and Mysql adapter&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
</span><span class='line'>$ gem install mysql2 //gem mysql2 is faster than gem mysql  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;The gem you installed is placed in RVM&rsquo;s ruby, if you are using RVM&rsquo;s ruby.&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you use MySQL in your rails application, remember to change the database.yml.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;p.s. If you want to use phpmyadmin, you can do:&lt;br/&gt;
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$ sudo apt-get install php5-mysql
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>download phpmyadmin, then extract to &lt;code&gt;/etc/nginx/html/phpmyadmin&lt;/code&gt;&lt;br/&gt;
</span><span class='line'>then start the server, access: &lt;code&gt;http://localhost/phpmyadmin/&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[[Vagrant] 使用 Vagrant 安裝 Nginx, Php5-fpm, MySQL]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://kerkerj.github.io/blog/2013/10/22/vagrant-vagrant-nginx-php5-fpm/"/&gt;
</span><span class='line'>    &lt;updated&gt;2013-10-22T13:21:00+08:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://kerkerj.github.io/blog/2013/10/22/vagrant-vagrant-nginx-php5-fpm&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;h1&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; - Development environments made easy.&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;就是這個軟體的宗旨，把它想做是 ghost 吧！我們開發網站或是測試一些多機器架構時，常不小心就把自己的電腦或是測試主機搞到爛掉，租機器又慢又花錢，搞到爛重灌更麻煩。因此這個軟體基於 VirtualBox 做出了令人方便設定的功能，讓我們可以快速架設安裝環境並測試，尤其是以多機器架構而言更是方便！例如從最簡單的 Web server + DB server，或是 Web Load Balancer + Application Server * 5 等等的架構，一台電腦就能達成囉！
</span><span class='line'>今天主要是以安裝 Vagrant 及架設出 Nginx + php5-fpm 的架構，下一篇打算另外建構一台 mongodb server，達到 Vagrant 最主要的多機器設定功能~&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Vagrant 基本設定&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>&lt;li&gt;先下載 VirtualBox 吧！&lt;/li&gt;
</span><span class='line'>&lt;li&gt;下載 Vagarnt 套件 &lt;a href="http://downloads.vagrantup.com/"&gt;http://downloads.vagrantup.com/&lt;/a&gt;&lt;br/&gt;
</span><span class='line'>安裝好後，可能會需要加 path，至少 1.3.0 當時我是自己加的，現在 1.3.5 就不清楚了~&lt;/li&gt;
</span><span class='line'>&lt;li&gt;接下來就可以開始加入 box (可以把它想為 ghost 檔)，並開始設定 Vagrant。
</span><span class='line'>&lt;code&gt;
</span><span class='line'>vagrant box add {你想要的Box名稱} {下載網址}
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>輸入後就會開始下載該 box 了！ 範例：
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$vagrant box add devbox http://ﬁles.vagrantup.com/precise64.box   
</span><span class='line'>$mkdir my_box  
</span><span class='line'>$cd my_box  
</span><span class='line'>$vagrant init devbox (將 my_box 這個專案資料夾以 devbox 這個 box 檔案初始化)  
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>box 官方有提供 Ubuntu 的，在 &lt;a href="http://www.vagrantbox.es/"&gt;vagrantbox.es&lt;/a&gt; 很多，可以自己找～ 當然自己做應該也是可以的！&lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Vagrant 基本指令&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;vagrant up 開機  
</span><span class='line'>vagrant ssh 登⼊  
</span><span class='line'>vagrant suspend 暫停  
</span><span class='line'>vagrant halt 關機  
</span><span class='line'>vagrant destroy 刪除  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;進入新裝好的機器吧！&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$vagrant up  //開機  
</span><span class='line'>$vagrant ssh //登入  
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Vagrantfile 設定&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Vagrantfile 這個設定檔可以用很多很強大的設定，在官方網頁裡有教學
</span><span class='line'>不過首先要先做的是： &lt;code&gt;config.vm.forward_port 80, 8088&lt;/code&gt;
</span><span class='line'>把虛擬機器裡從 80 port 傳送的東西丟到本機的 8088 port
</span><span class='line'>如此一來在本機瀏覽器輸入 localhost:8088 ，就可以看到網頁了！
</span><span class='line'>另外就是： &lt;code&gt;config.vm.synced_folder "/vagrant", "本機目錄"&lt;/code&gt;
</span><span class='line'>如此一來，Ubuntu 底下就有一個 /vargrant 目錄，和自己主機裡的某個目錄是同步的！
</span><span class='line'>也就是在自己主機上寫好程式後，就可以直接讓虛擬機器抓到 code 去執行，超方便的！
</span><span class='line'>只要把 nginx 的網頁目錄設定在 /vagrant 上就可以了！ (後面會說)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Ubuntu 基本安裝&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;進去後是乾淨的 Ubuntu 12.04 64位元版，因此需先做點安裝:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$sudo apt-get -y update  
</span><span class='line'>$sudo apt-get --no-install-recommends -y install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev libgdbm-dev ncurses-dev automake libtool bison subversion pkg-config libffi-dev vim  
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>有些東西其實可以不用裝，就看個人的需求，必裝應該是 build-essential, openssl, curl, git-core, vim XD&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Nginx &amp; php5-fpm 安裝&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;安裝 Nginx
</span><span class='line'>&lt;code&gt;
</span><span class='line'>$sudo apt-get install nginx  
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>若要更改 Nginx 的網頁目錄，設定檔在 &lt;code&gt;/etc/nginx/&lt;/code&gt; 裡，
</span><span class='line'>通常應該是更改 &lt;code&gt;/etc/nginx/sites-enable/default&lt;/code&gt; 裡的 &lt;code&gt;root /usr/share/nginx/www/&lt;/code&gt;
</span><span class='line'>還要將這段 code 解除註解：</span></code></pre></td></tr></table></div></figure>
location ~ .php$ {
    fastcgi_split_path_info ^(.+.php)(/.+)$;
    # NOTE: You should have &ldquo;cgi.fix_pathinfo = 0;&rdquo; in php.ini</p>

<pre><code># With php5-cgi alone:
#fastcgi_pass 127.0.0.1:9000;
# With php5-fpm:
fastcgi_pass unix:/var/run/php5-fpm.sock;
fastcgi_index index.php;
include fastcgi_params;
</code></pre>

<p>}
<code>
更改後確認一下 `/etc/nginx/nginx.conf` 是否有 `inculde /etc/nginx/sites-enable/*`
</code>
$sudo service nginx start (開始服務)
<code>
安裝 php5-fpm
</code>
$sudo apt-get install php5-fpm<br/>
$sudo vim /etc/php5/fpm/php.ini (找到並更改 cgi.fix_pathinfo = 0 )<br/>
$sudo vim /etc/php5/fpm/pool.d/www.conf<br/>
<code>
找到 `listen = 127.0.0.1:9000`, 換成 `/var/run/php5-fpm.sock`
寫個 phpinfo(); 的 php 檔放入資料夾
</code>
$sudo service php5-fpm restart (開啟服務)
&#8220;`
在瀏覽器輸入 localhost:8088 就可以看到 nginx 的頁面，再讀取剛剛寫的 php 應該就成功囉！</p>

<p>安裝 MySQL:
<code>
$ sudo apt-get install mysql-server
</code>
過程中會問 root 的密碼，裝完後就可以登入：
<code>
$ mysql -u root -p
</code></p>

<p>下回就是多機器的設定囉～</p>

<p>reference:<br/>
<a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">http://gogojimmy.net/2013/05/26/vagrant-tutorial/</a>
<a href="http://www.slideshare.net/ihower/vagrant-osdc">http://www.slideshare.net/ihower/vagrant-osdc</a>
<a href="https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04">https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04</a></p>

<p>p.s. Vagrantfile 產生器：<a href="https://puphpet.com/#vagrantfile">Puphpet.com/#vagrantfile</a>
這網站有很多值得玩的地方，可以直接幫你產生出這些設定檔真的是太方便了！</p>

<p>p.s.s.有亂入用到的指令記一下：dpkg &ndash;get-selections 列出已安裝的 package
另外提供一下我在研究 Vagrant 的筆記，很亂超級亂，但是有些東西沒有寫在 blog 裡~
<a href="https://www.evernote.com/shard/s81/sh/91ccf490-d9cd-468e-943a-d57c79d052f4/71e0a682b024c6e97fd8c79b90f89f67">Evernote by kerkerj</a></p>
]]></content>
  </entry>
  
</feed>
