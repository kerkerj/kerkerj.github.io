<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-09T21:58:33+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Event-driven I/O Models and Coroutine Notes]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/18/event-driven-i-slash-o-models-and-coroutine/"/>
    <updated>2014-08-18T23:19:51+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/18/event-driven-i-slash-o-models-and-coroutine</id>
    <content type="html"><![CDATA[<h2>Event-driven I/O model</h2>

<p>首先，聽到 Event-driven 是從 <a href="http://nodejs.org/">Node.js</a> 得知，</p>

<blockquote><p>Node.js® is a platform built on <a href="http://code.google.com/p/v8/">Chrome&rsquo;s JavaScript runtime</a> for easily building fast, scalable network applications.</p>

<p>Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.</p></blockquote>

<p>其實剛聽到這詞會有點陌生，我們可以先從 Victor 所寫的文章開始讀起:
<a href="http://blog.ez2learn.com/2010/07/17/talk-about-coroutine-and-gevent/">淺談coroutine與gevent</a></p>

<p>裡面提到了幾種網路模型：</p>

<blockquote><ol>
<li>阻塞式單一行程</li>
<li>阻塞式多行程</li>
<li>阻塞式多行程多執行序</li>
<li>非阻塞式事件驅動</li>
<li>非阻塞式 coroutine</li>
</ol>
</blockquote>

<p>以下是各語言 event-driven 的 model<br/>
(Node.js 就不列出了，本身就是 event-driven 設計)</p>

<pre><code>Event-driven model:
* Ruby  -&gt; [Eventmachine](http://rubyeventmachine.com/)  
            -&gt; [Celluloid::IO](https://github.com/celluloid/celluloid-io)   
            -&gt; [Thin Server](http://code.macournoyer.com/thin)   
* Python    -&gt; [Twisted](https://twistedmatrix.com/trac/)  
            -&gt; [Tornado](http://www.tornadoweb.org/en/stable)   
* Perl   -&gt; [Perl Object Environment (POE)](http://poe.perl.org)    
* PHP       -&gt; [REACT](http://reactphp.org) 
</code></pre>

<p>以 Ruby 建構 API Service 的話，可以使用 Sinatra + Eventmachine + thin proxy + Nginx 的 Solution:<br/>
<a href="http://recipes.sinatrarb.com/p/embed/event-machine">Embedding Sinatra within EventMachine</a></p>

<p>延伸閱讀: <br/>
<a href="https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/">2008 - Eventmachine and Reactor pattern</a> <br/>
<a href="http://developwithstyle.com/articles/2012/05/23/lessons-learnt-from-building-a-rest-based-api/">2012 - Lessons Learnt From Building a REST API</a><br/>
<a href="https://docs.google.com/document/d/1dU-juYN25FMXdp6Ju62KAIT_0tuuZAPEgZkj-aT6kPQ/edit#heading=h.lafes4uxj2b0">年份未知 - 針對各 framework 進行評測 Event Driven I/O Web Application Server Analysis</a><br/>
<a href="http://blog.sina.com.cn/s/blog_704b6af70100py9n.html">Twisted 教程</a></p>

<h4>Reactor 模型</h4>

<p>Node.js 處理 concurrency 是 Reactor mode<br/>
Ruby 的 Goliath framework 也是 Reactor mode<br/>
Golang, Erlang 是 CSP (communicating sequential process)</p>

<p>現在比較流行的是 event-driven 的 Reactor mode, e.g. Node.js, Goliath<br/>
但是 Node.js 比較令人詬病的是 code 難維護，太多層層的 callback 會擾亂邏輯<br/>
畢竟線性處理比較符合人類思維 <br/>
而 Ruby 使用 Fiber 以避免寫出過多的 callback<br/>
Python 的 Twisted 也已經存在好一陣子，穩定發展中</p>

<p>不過以 Node.js 典型的應用的確是 proxy, API server<br/>
因此我們可以參考 Node.js 的特性，使用其他語言來達到同樣的效果<br/>
那就是 event-driven</p>

<h2>Coroutine Programming</h2>

<pre><code>* Golang - goroutine (native) 
* Python - [gevent](http://www.gevent.org/)  
* Ruby - Fiber (native)   
* Lua   
</code></pre>

<p>延伸閱讀:<br/>
<a href="http://www.bigfastblog.com/">Ruby 的 eventmachine 相關討論</a><br/>
<a href="http://www.blogjava.net/killme2008/archive/2010/03/11/315158.html">Ruby Fiber 指南</a><br/>
<a href="http://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/">2012 - Lua - Coroutine introduction</a><br/>
<a href="https://www.igvita.com/2009/05/13/fibers-cooperative-scheduling-in-ruby/">2009 - Fibers &amp; Cooperative Scheduling in Ruby</a><br/>
<a href="http://www.blogjava.net/killme2008/archive/2010/03/02/314264.html">2010 - Lua、LuaJIT Coroutine和Ruby Fiber的切換效率對比</a></p>

<hr />

<p>建構 API Service 考慮到的除了 Server 以外，<br/>
語言的特性通常也必須考慮進去，例如<br/>
sync v.s. async<br/>
coroutine v.s. non-coroutine<br/>
但通常以當前需求而言，其實也不需要 over-design<br/>
只要選擇拿手的，能夠快速方便的開發出雛形，<br/>
我想等到真的快要 10000 per/second request 時，再來煩惱更進一步的架構吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Sublime Text 2] Integration With RVM and Rspec]]></title>
    <link href="http://kerkerj.github.io/blog/2014/01/09/sublime-text-2-integration-with-rvm-and-rspec/"/>
    <updated>2014-01-09T02:17:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/01/09/sublime-text-2-integration-with-rvm-and-rspec</id>
    <content type="html"><![CDATA[<p>Ruby:</p>

<p><code>~/Library/Application\ Support/Sublime\ Text\ 2/Packages/Ruby/Ruby.sublime-build</code>
<code>json
{
  "env":{
      "PATH":"${HOME}/.rvm/bin:${PATH}"
  },
  "cmd": ["rvm-auto-ruby", "$file"],
  "file_regex": "^(...*?):([0-9]*):?([0-9]*)",
  "selector": "source.ruby"
}
</code></p>

<p><a href="http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/">http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] [RoR] Install With Rvm]]></title>
    <link href="http://kerkerj.github.io/blog/2012/04/27/ubuntu-ror-install-with-rvm/"/>
    <updated>2012-04-27T16:44:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2012/04/27/ubuntu-ror-install-with-rvm</id>
    <content type="html"><![CDATA[<p>以下都是以 Ubuntu 11.10為操作環境
主要目標為使用 rvm (Ruby Version Manager)來管理 ruby 版本並安裝 ruby 和 rails</p>

<p>先安裝一些必要套件 ( ex. openssl, zlib1g-dev &hellip;.etc. )
<code>
$sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev nodejs
</code>
安裝完基本套件後, 有兩種選擇:
1. 直接在系統上安裝 ruby ( sudo apt-get install ruby )
2. 使用 rvm 來管理 ruby 版本
基本上有 rvm 來管理 ruby 版本是比較方便的, 可以隨時切換不同的 ruby 版本
(不過在使用一些套件上會有一些問題需要排解, 本篇最底下有 trouble shooting)</p>

<h1>RVM</h1>

<p>安裝:
<code>
$bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
$echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code>
Load RVM function:  <code>~/.bash_profile</code></p>

<p>指令:</p>

<blockquote><p>rvm info -> 查看 rvm 做的設定
rvm list known -> 列出所有可安裝的套件
rvm list -> 列出目前已安裝的套件
rvm install &ldquo;package_name&rdquo; -> 安裝套件
rvm remove &ldquo;package_name&rdquo; -> 移除套件
rvm 1.9.2 &ndash;default -> 設定預設的 ruby 版本</p></blockquote>

<p>假設系統上的 ruby 版本是 1.9.1, 而我用 rvm 安裝了 ruby1.9.3
那麼目前系統上的預設 ruby 版本是 1.9.3, 用 <code>ruby -v</code> 測試看看
如果要切換回系統的 ruby 版本, 則使用 <code>rvm system</code>
要切換回來的話,則:
        <code>rvm 1.9.3</code> (直接輸入有安裝過的 ruby 版號即可)
        or
        <code>rvm use 1.9.3</code>
以上是 rvm 的一些簡單指令, 因為今天是要安裝 ruby on rails
所以先安裝 ruby 吧:
<code>
$rvm pkg install openssl (詳見最後的 trouble shooting)
$rvm install 1.9.3 --with-openssl-dir=$rvm_path/usr
</code></p>

<h1>Gem</h1>

<p>指令:</p>

<blockquote><p>gem list -> 列出目前已安裝的套件
gem install &ldquo;package_name&rdquo; -> 安裝套件不同的 ruby 版本有不同的 gem</p></blockquote>

<p>如果 rvm 裡有 1.9.1 和 1.9.3 兩個乾淨的 ruby 版本
目前使用的 ruby 版本是 1.9.3
則在 gem install rails 後
使用 gem list 則會看到 一大堆的套件
接著切換到 1.9.1 執行 gem list 後則會發現沒有任何東西</p>

<p>在安裝 gem 套件時可以加上一些參數
如: 不想要有說明文件 (通常這些東西都蠻肥大的) 就可以加上
<code>gem install "gem_name" --no-ri --no-rdoc</code>
以上是 gem 在 rvm 裡的一些概念, 因為今天是要安裝 ruby on rails
所以來安裝 rails 吧:
<code>gem install rails --no-ri --no-rdoc (不要安裝文件, 速度會比較快)</code>
如果發現用 gem 安裝套件時需要 root 權限, 表示目前使用的 ruby 版本是系統的版本</p>

<h1>Gemset</h1>

<p>rvm 提供了方便的功能 gemset, 就把它看作 gem 的分類資料夾
如果說我想要在 ruby 1.9.2 底下安裝兩種 rails 版本, 又怕會衝突該怎麼辦?
就可以用 gemset 了</p>

<p>樹狀架構大概如下:
        rvm -> 1.9.1 -> gemset: rails-2.3.9
                                rails-3.1.1*
            -> 1.9.3 -> gemset: rails-2.3.9
                                rails-3.1.1
可以解釋為: 在 rvm 的 ruby 1.9.1 底下有兩個 gemset, 分別是 rails-2.3.9 和 rails-3.1.1</p>

<p>指令:</p>

<blockquote><p>rvm gemset list -> 查看目前建立的 gemset
rvm 1.9.2@rails-3.1.1 -> 在 ruby 1.9.2 版本底下使用 rails-3.1.1 這個 gemset
rvm gemset create &ldquo;gemset_name&rdquo; -> 建立 gemset
rvm gemset use &ldquo;gemset_name&rdquo; -> 使用某個 gemset
rvm gemset empty &ldquo;gemset_name&rdquo; -> 清空某個 gemset (只是清空)
rvm gemset delete &ldquo;gemset_name&rdquo; -> 刪除某個 gemset以上就是關於 rvm 的二三事, 做到這邊, ruby 和 rails 套件應該就安裝完了</p></blockquote>

<p>最後安裝資料庫的 adapter , 這裡是用 sqlite
<code>gem install sqlite3 --no-ri --no-rdoc</code>
接著就可以建立第一個 rails 專案:</p>

<blockquote><p>mkdir project
cd project
rails new demo
rails server連上 localhost:3000 就是起始畫面了</p></blockquote>

<h1>Trouble shooting:</h1>

<h2>Error message1: openssl  LoadError</h2>

<blockquote><p>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError)
or
Gem::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B</p></blockquote>

<p>Solution:</p>

<blockquote><p>rvm pkg install openssl
rvm remove 1.9.3
rvm install 1.9.3 &ndash;with-openssl-dir=$rvm_path/usr
然後將 rvm 裡的 ssl certs 資料夾移除, 改成直接讀系統的 ssl certs
rmdir $rvm_path/usr/ssl/certs
ln -s /etc/ssl/certs $rvm_path/usr/ssl</p></blockquote>

<h2>Error message2:</h2>

<blockquote><p>when excuting the command &ldquo;gem install rails&rdquo;
ERROR:  Loading command: install (LoadError)
cannot load such file &ndash; zlib
ERROR:  While executing gem &hellip; (NameError)
uninitialized constant Gem::Commands::InstallCommand</p></blockquote>

<p>Solution:</p>

<blockquote><p>rvm remove 1.9.3 (depends on your ruby version, if your system also has ruby, remove it, too.)
sudo apt-get install zlib1g-dev先將 rvm 的 ruby 和 system 的 ruby 移除
然後安裝 zlib1g-dev
安裝 system 和 rvm 的 ruby 就可以了
Remove system&rsquo;s ruby, and all ruby versions in rvm
Install zlib1g-dev, then install ruby in system and rvm.</p></blockquote>

<h2>Error message3:</h2>

<blockquote><p>ExecJS::RuntimeUnavailable</p></blockquote>

<p>Solution:
<code>sudo apt-get install nodejs</code>
Reference:
<a href="http://www.openfoundry.org/tw/tech-column/8513-rvm-ruby-environment-version-manager">RVM - Ruby enVironment (Version) Manager</a></p>
]]></content>
  </entry>
  
</feed>
