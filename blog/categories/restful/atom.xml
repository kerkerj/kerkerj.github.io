<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Restful | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/restful/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-17T21:24:07+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d17] - 實戰開發 - 專案結構]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/17/api-d17/"/>
    <updated>2014-10-17T21:17:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/17/api-d17</id>
    <content type="html"><![CDATA[<p>首先我們就在虛擬機的資料夾底下，建立一個專案資料夾吧!</p>

<p>今天會來簡單切割一下我們的專案目錄</p>

<h2>建立新專案目錄:</h2>

<pre><code>$ cd /vagrant/
$ mkdir TODOAPI
$ cd TODOAPI
$ npm init
// 輸入專案資訊
$ 
</code></pre>

<h2>建立專案結構</h2>

<pre><code>/
| - bin/
| - routes/
| - model/
| - node_modules/
| - logs/
| - config/
| - test/
| - app.js
| - package.json
</code></pre>

<p>分別講解一下各個 folder 的工作:</p>

<h3><code>bin</code></h3>

<p>筆者會在 <code>bin</code> 資料夾底下放一個 <code>server.js</code></p>

<p>這個 <code>server.js</code> 就是會專門用來啟動一個 <code>app.js</code> instance</p>

<h3><code>routes</code></h3>

<p>基本上如果了解 MVC 架構的話，<code>routes</code> 就是 <code>controller</code> 的意思，其實如果讀者本身夠了解的話，這個資料夾也可以改成 <code>controller</code> 也 ok，應該說，其實資料夾怎麼放都是看個人隨意即可，只是若是要模組化的話，筆者會這樣來處理一個專案結構。</p>

<h3><code>model</code></h3>

<p>拿來放資料庫 schema 以及相關的資料庫操作的資料夾</p>

<h3><code>node_modules</code></h3>

<p>這其實是之後安裝的模組會放在這個資料夾裡，在這邊可以先不用建立沒關係</p>

<h3><code>logs</code></h3>

<p>由於我們是建立一個 restful service，因此 log 的記錄也是很重要的，我們把 log 放在這個資料夾裡</p>

<h3><code>configs</code></h3>

<p>我們在這個資料夾裡放置一些專案設定，例如 db 設定或者是 log 的設定等等</p>

<h3><code>test</code></h3>

<p>撰寫測試程式的資料夾~</p>

<h3><code>app.js</code></h3>

<p>程式的進入點，可以想像成 index.php~</p>

<h3><code>package.json</code></h3>

<p>專案的資訊以及相關模組的資訊都會被放在這裡!</p>

<hr />

<p>其實關於專案結構有許多不同的討論，<code>express</code> 也有一個專案自動產生器，不過如果對結構內容不了解而使用產生器的話，很容易變成只知表面不知內部運作，因此我們還是一步一步來，先定義好我們專案的需求結構</p>

<p>另外，因為我們是建立 restful API service，在此並沒有用到 html 頁面，也因此就沒有 <code>view</code> 或 <code>public</code> 這兩個資料夾囉~</p>

<p>延伸閱讀:</p>

<p>我們可以透過觀摩別人的專案來參考他們的專案架構:</p>

<p><a href="http://scotch.io/tutorials/javascript/node-and-angular-to-do-app-application-organization-and-structure">Node and Angular To-Do App: Application Organization and Structure</a></p>

<p><a href="http://stackoverflow.com/questions/18789864/node-js-express-global-modules-best-practices-for-application-structure">node.js &amp; express - global modules &amp; best practices for application structure</a></p>

<p>在 Github 上的討論，非常值得一看: <a href="https://gist.github.com/lancejpollard/1398757">Github discussion</a></p>

<p>後來覺得也可以模仿 rails 的分法:</p>

<pre><code>/
| - app/
| - ----controllers/
| - ----models/
| - ----views/
| - ----helpers/
| - node_modules/
| - logs/
| - libs/
| - public/
| - config/
| - test/
| - server.js
| - package.json
</code></pre>

<p>都 OK!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d16] - 實戰開發 - 設定主題及規劃]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/16/api-d16/"/>
    <updated>2014-10-16T18:39:40+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/16/api-d16</id>
    <content type="html"><![CDATA[<p>接下來我們想要做到的是一個 TODO list 的 RESTful API</p>

<p>並且會先使用 <a href="http://apiary.io/">apiary.io</a> 做規劃</p>

<p>實際看看感覺如何</p>

<p>進入網站後，註冊登入後</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-07%201.04.07.png" alt="image" /></p>

<p>左上角的 dropdown list 選擇 create new API</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-07%201.04.18.png" alt="image" /></p>

<p>產生後下方就會跑出範例文擋</p>

<p>這個網站會透過特定格式的編排自己希望的 API endpoint 及範例回傳值後，產生出一份漂亮的文件</p>

<p>網站中間是模式的選擇</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-07%201.10.33.png" alt="image" /></p>

<p>Documentation 是實際讓其他人看的，Editor 則是編輯模式</p>

<p>我們就稍微簡單規劃一下 TODO List 的 RESTful API 吧!</p>

<p>這是我自己規劃的 <a href="http://docs.todolist7.apiary.io/">文件</a></p>

<p>基本上 route 會長這個樣子:</p>

<pre><code>TODOs
GET /user/{user_id}/todos/
POST /user/{user_id}/todos/
GET /user/{user_id}/todos/{id}
PUT /user/{user_id}/todos/{id}
DELETE /user/{user_id}/todos/{id}
</code></pre>

<p>資料格式也都在該文件整理好了</p>

<p><code>/user/{user_id}/</code> 只是用來辨識是哪個 user 的 todo task data</p>

<p>在這個小 API 不會琢磨在使用者系統的建立，只會專注在操作 todo task data</p>

<p>我們可以直接透過 PostMan 來丟丟看</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-07%201.43.06.png" alt="image" /></p>

<p>我們設定必須要使用 API-key 才能存取 API，比較進階的做法就是使用 Oauth 的方式取得 token 來存取 API</p>

<p>不過在這個小 API 也不會建立一個 Oauth Server，我們簡單使用 API-key 來認證即可</p>

<p>接下來的時間我們就會開始依據規劃好的文件，使用 Node.js + express + mongodb 來實作囉!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d15] - [Javascript 番外篇] Javascript Callback, Event]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/15/api-d15/"/>
    <updated>2014-10-15T18:34:37+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/15/api-d15</id>
    <content type="html"><![CDATA[<p>這幾天會探討 javascript 的特性，由於比較少在寫 js ，因此有錯請指正</p>

<p>javascript 有個特性：event</p>

<p>意思就是說，javascript 中，所有的事情都是由事件驅動的</p>

<p>如果說有寫過 web 前端的話，</p>

<p>其實呼叫 button.click function 時</p>

<p>並不會馬上執行 click 裡面的動作</p>

<p>而是加了一個 click 的 listener</p>

<p>等到 button 被 click 後，才會執行 click 裡面的程式碼</p>

<p>所以寫習慣一般 procedure 的程式會有點不太習慣</p>

<p>舉個 procedure 的例子，下面有五件事想要做：</p>

<pre><code class="javascript">煮飯(); // 10 分鐘

接電話(); // 1 分鐘

吃麵(); // 5 分鐘

丟垃圾(); // 7 分鐘
</code></pre>

<p>一般的程式會是照順序執行</p>

<p>也就是 煮飯完 -> 接電話 -> 吃麵 -> 丟垃圾</p>

<p>總執行時間 = 23 分鐘</p>

<p>但是如果把這段 code 丟給 javascript 執行的話</p>

<pre><code>煮飯(); // 10 分鐘

接電話(); // 1 分鐘

吃麵(); // 5 分鐘

丟垃圾(); // 7 分鐘
</code></pre>

<p>就變成同時做煮飯，接電話，吃麵，丟垃圾了！</p>

<p>為了要預防這件事，有些事情還是有順序性的，</p>

<p>因此就要使用到 javascript callback 的特性</p>

<pre><code>煮飯(function() {
    吃飯(function() {
        接電話(function() {
            丟垃圾();
        });
    });
});
</code></pre>

<p>意思就是煮飯完吃飯，吃完飯接電話，接完電話丟垃圾</p>

<p>以下有一個範例：</p>

<pre><code class="javascript">function wash() {
    setTimeout(function() {
        console.log("wash");
    }, 1000);
}

function eat() {
    setTimeout(function() {
        console.log("eat");
    }, 5000);
}

function running() {
    setTimeout(function() {
        console.log("running");
    }, 3000);
}

function doHouseWork() {
    wash();
    eat();
    running();
}

doHouseWork();
</code></pre>

<p>做家事執行了三件事，wash, eat, 和 running</p>

<p>其中每件事都設定不同的完成時間</p>

<p>以 procedure 的程式執行方式來看，在這邊用 ruby 舉例:</p>

<pre><code class="ruby">def wash
  sleep 1
  puts "wash"
end 

def eat
  sleep 5
  puts "eat"
end 

def running 
  sleep 3
  puts "running"
end 

def doHouseWork 
  wash
  eat
  running
end 

doHouseWork
</code></pre>

<p>是會 wash 1 秒後，接著 eat 5 秒，再 running 3 秒</p>

<p>所以總共是 9 秒</p>

<p>output 的順序會是:</p>

<pre><code>wash // 1 秒
eat // 5 秒
running // 3 秒
</code></pre>

<p>但是在 javascript 中，output 的順序卻是:</p>

<pre><code>wash // 1 秒
running // 3 秒
eat // 5 秒
</code></pre>

<p>所以總長度是 5 秒</p>

<p>那今天假設想要讓 javascript 有順序性時該怎麼辦?</p>

<p>拿上面的例子作修改的話:</p>

<pre><code class="javascript">function wash(callback) {
    setTimeout(function() {
        console.log("wash");
        callback.call();
    }, 1000);
}

function eat(callback) {
    setTimeout(function() {
        console.log("eat");
        callback.call();
    }, 5000);
}

function running() {
    setTimeout(function() {
        console.log("running");
    }, 3000);
}

function doHouseWork(callback) {
    console.log("doing house work");
    callback.call();
}

doHouseWork(function(){
    wash(function() {
        eat(function() {
            running();
        });
    });
});
</code></pre>

<p>很不錯的特性，但是也要特別對於這種特性作處理</p>

<p>有個 lib 很好用，<code>async.js</code> <a href="https://github.com/caolan/async">來源</a></p>

<p>下回待續!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d14] - [Javascript 番外篇] Javascript Function Scopes 和 Closures]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/14/api-d14/"/>
    <updated>2014-10-14T22:40:32+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/14/api-d14</id>
    <content type="html"><![CDATA[<p>這幾天會探討 javascript 的特性，由於比較少在寫 js ，因此有錯請指正</p>

<h2>Scope</h2>

<p>例子:</p>

<pre><code class="javascript">function hi() {
    var greetings = "hi";

    console.log("Say: " + greetings);

    function sayYa(newInput) {
        greetings = newInput;
        console.log("Say: " + greetings);
    }

    function sayCool(newInput) {
        var cool = newInput;
        console.log("Say: " + cool);
    }

    sayYa("Yo");
    sayCool("Cool");

    console.log("Say: " + greetings);
}

hi();
</code></pre>

<p>很簡單的概念</p>

<p>greetins 在 sayYa 方法中被覆寫掉了</p>

<p>如果要定義 local 變數必須在 function 裏用 var 定義</p>

<p>例如 sayCool function</p>

<h2>Closure</h2>

<p>例子:</p>

<pre><code>function person(){
    var name = 'default';

    return {
        greetings: function() {
            console.log( name );
        },
        changeName: function(newInput) {
            name = newInput;
        }
    };
}

var me = new person();
me.greetings();
me.changeName("kerkerj");
me.greetings();
</code></pre>

<h2>Self-Executing Anonymous Functions</h2>

<p>使用這種方式通常是避免和其他 js 檔案造成變數混淆</p>

<p>或是初始化</p>

<p>裡面的變數和 function 只被限制在這個範圍內</p>

<p>例子:</p>

<pre><code>(function(){
    var hi = 'Hello';

    function sayHi(name){
        return hi + ' ' + name;
    }

    global.greetings = sayHi
})(global);

console.log(global.greetings("kerkerj"));
console.log(hi); // &lt;- 這會失敗
</code></pre>

<p>必須將 sayHi 指給 global 的某一個變數, 才有辦法使用它</p>

<p>在 node.js 中 global 是全域變數，在瀏覽器中是 window~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d13] - [Javascript 番外篇] Javascript Require/ Module/ Module Pattern]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/13/api-d13/"/>
    <updated>2014-10-13T18:24:17+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/13/api-d13</id>
    <content type="html"><![CDATA[<p>接下來幾天會探討 node.js 的特性，由於比較少在寫 js ，因此有錯請指正</p>

<p>在 node.js 裏，要讀取外部模組都是透過 require 和 exports 來做溝通</p>

<p>以下列出這次最簡單 module 的例子</p>

<pre><code class="javascript">//hello.js
console.log('Hello World');
</code></pre>

<pre><code>// app.js
require('./hello.js');
</code></pre>

<h2>Module 也是有 Pattern 的</h2>

<p>第一種: Global (Not so good)</p>

<pre><code>// foo.js
foo = function() {
    console.log("foo!");
}

// app.js
require('./foo.js');
foo();
</code></pre>

<p>第二種: export an anonymous function</p>

<pre><code>// foo.js
module.exports = function() {
    console.log("foo! YA");
};

// app.js
var test = require("./foo.js");
test();
</code></pre>

<p>第三種： export a named function</p>

<pre><code>// bar.js
exports.bar = function() {
    console.log("bar");
}

// app.js
var bar = require('./bar.js').bar;
bar();
</code></pre>

<p>第四種: exports an anoymous object</p>

<pre><code>// bar4.js
var Bar4 = function() {};

Bar4.prototype.say = function() {
    console.log('bar4');
};

module.exports = new Bar4();

// app.js 
var b = require('./bar4.js');
b.say();
</code></pre>

<p>第五種: export a named object</p>

<pre><code>// bar5.js
var Bar5 = function() {};

Bar5.prototype.say = function() {
    console.log("bar5");
};

exports.Bar5 = new Bar5();

// app.js
var b = require('./bar5.js').Bar5;
b.say();
</code></pre>

<p>第六種: export an anonymous prototype</p>

<pre><code>// cool.js
var Cool = function() {};

Cool.prototype.say = function() {
    console.log('Cool!');
};

module.exports = Cool;

// app.js
var Cool = require('./cool.js');
var coo = new Cool();
coo.say();
</code></pre>

<p>第七種: export a named prototype</p>

<pre><code>// ang.js
var Ang = function () {};

Ang.prototype.say = function () {
    console.log('Ang!');
};

exports.Ang = Ang;

// app.js
var Ang = require('./ang.js').Ang;
var wer = new Ang();
wer.say();
</code></pre>

<h2>exports v.s. module.exports</h2>

<p>exports 是 module.exports 的輔助方法</p>

<p>以下有個例子會執行錯誤:</p>

<pre><code>// ya.js
module.exports = "YA";
exports.name = function() {
    console.log('My name is kerkerj');
};

// app.js
var ya = require('./ya.js');
ya.name(); TypeError: Cannot call method 'name' of undefined
</code></pre>

<p>在 ya.js 中 module.exports 有屬性了</p>

<p>因此下面的 export.name 就沒有被加入了</p>

<p>如果 module.exports 沒有任何屬性被加入的話，</p>

<p>exports 若有屬性了，則會交給 module.exports</p>

<p>反之就是剛剛的情況，moduel.exports 已經有屬性了，因此 export.name 就沒有作用了</p>

<p><a href="http://www.hacksparrow.com/node-js-exports-vs-module-exports.html">延伸閱讀</a></p>

<h2>Module as class</h2>

<p>直接看例子吧 XD</p>

<pre><code>// user.js
module.exports = function(name, age) {
    this.name = name;
    this.age = age;
    this.about = function() {
        console.log(this.name +' is '+ this.age +' years old');
    };
};

// app.js
var User = require('./user.js');
var kerkerj = new User('kerkerj', 18);
kerkerj.about(); 
</code></pre>
]]></content>
  </entry>
  
</feed>
