<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Restful | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/restful/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-25T21:53:44+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-day25] - 實戰開發 - 處理 404 & 500]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/25/api-day25/"/>
    <updated>2014-10-25T21:46:35+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/25/api-day25</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day25">Github 參考</a></p>

<p>不知道大家在用 POSTMAN 對前幾天寫的 API 丟 request 有沒有遇過類似下面的情況:</p>

<pre><code class="javascript">Cannot GET /user/kerkerj/todoss
</code></pre>

<p>通常是丟錯網址時會出現的，或是 code 沒寫好會出現 500 error</p>

<p>這些情況是有辦法接到的，今天我們希望能夠接到後，將 message 轉成 json 格式吐回給 client</p>

<p>因此程式碼如下</p>

<p>app.js</p>

<pre><code class="javascript">// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    res.status(404).jsonp({error: "Not Found"});
    next();
});

// catch 500
app.use(function(err, req, res, next) {
            res.status(err.status || 500).json({error: err.message});
});
</code></pre>

<p>基本上這兩段 code 的意思就是加入了兩個 middleware</p>

<p>如果進來的 request 是屬於 404 or 500 就會回傳 json 格式</p>

<p>並且依錯誤碼不同而回傳不同的訊息</p>

<p>試著將 server 跑起來</p>

<p>亂丟 request 看看</p>

<p>原本應該會是</p>

<pre><code>Cannot GET /user/kerkerj/todoss
</code></pre>

<p>就會變成了 json</p>

<pre><code>{
    "error": "Not Found"
}
</code></pre>

<p>這樣一來, client 程式也就能夠統一接收 json 回傳，而不會因為莫名的字串導致解析錯誤而 crash 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d24] - 實戰開發 - 刪除 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/24/api-d24/"/>
    <updated>2014-10-24T20:42:36+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/24/api-d24</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day24">Github 參考</a></p>

<p>還記得昨天說要偷懶一下嗎 XD</p>

<p>因為刪除真的很簡單!</p>

<p>我們前面走過了新增、修改、讀取了</p>

<p>刪除？哪有什麼困難的呢! XD</p>

<p>直接看 code 吧!</p>

<p>routes/users.js:</p>

<pre><code class="javascript">// Delete a todo task
router.delete('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;

    TODO.remove(
        { _id: todo_id, user_id: user_id },
        function (err) {
            if (err) {
                res.status(400).json(
                    { error: "delete data error"}
                );
            } else {
                res.status(201).json(
                    { success: "true" }
                );
            }
        }
    );
});
</code></pre>

<p>非常的簡單!</p>

<p>先抓到 user_id, todo_id 後</p>

<p>使用 .remove 的方法，下 WHERE 條件，並在 callback 作處理</p>

<p>就完成了!</p>

<p>試試看吧!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.39.09.png" alt="image" /></p>

<p>是不是非常的簡單呢！</p>

<p>我們已經完成 CRUD API 操作了！</p>

<p>接下來幾天會稍作一些細節上的處理!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d23] - 實戰開發 - 修改 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/23/api-d23/"/>
    <updated>2014-10-23T14:59:33+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/23/api-d23</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day23">Github 參考</a></p>

<p>接上篇，我們已經可以拿到 todo list 了</p>

<p>也可以拿到特定的 todo task</p>

<p>再來我們就可以編輯特定的 todo task 了對吧?</p>

<p>不囉唆直接進入程式碼</p>

<p>routes/users.js</p>

<pre><code class="javascript">// Update a todo task
router.put('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;
    var data = req.body;

    TODO.update(
        { _id: todo_id, user_id: user_id },
        { $set: { content: data.content } },
        function (err, num, raw, results) {
            if (err) {
                res.status(400).json(
                    { error: "update data error" }
                );
            } else {
                TODO.find({ _id: todo_id, user_id: user_id }, function (err, results) {
                    res.status(201).json(
                        results[0]
                    );
                });
            }
        }
    );
});
</code></pre>

<p>這次拿資料要拿三組: user_id, todo_id, 以及 data from req.body</p>

<pre><code>var user_id = req.params.user_id;
var todo_id = req.params.todo_id;
var data = req.body;
</code></pre>

<p>body 的資料很簡單，就是欲修改的 content 的資料:</p>

<pre><code>{ "content": "想修改的資料" }
</code></pre>

<p>再來，除了是使用 .update 方法以及同樣要下 WHERE 參數外， .update 方法還多了一個參數:</p>

<pre><code>{ _id: todo_id, user_id: user_id },
{ $set: { content: data.content } },
</code></pre>

<p>$set 的意思等同於 SQL 語法中的 SET</p>

<p>如果沒有加 $set 變成下面這樣:</p>

<pre><code>{ _id: todo_id, user_id: user_id },
{ content: data.content } ,
</code></pre>

<p>整個資料就會被洗掉，變成只有 <code>{ content: data.content }</code></p>

<p>因此有沒有加 $set 差很多哦</p>

<p>後面一樣是 callback 的處理</p>

<p>都寫好後，實際開 POSTMAN 試試看吧!</p>

<p>記得要使用 <code>PUT</code> 來丟 request</p>

<p>例子如下，我把原本的 buy milk 改成 buy milk and banana</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.31.57.png" alt="image" /></p>

<p>這樣離完成 API 就不遠啦!</p>

<p>明天就稍微休息一下吧 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d22] - 實戰開發 - 讀取 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/22/api-d22/"/>
    <updated>2014-10-22T19:13:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/22/api-d22</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day22">Github 參考</a></p>

<p>如果有使用 MongoDB client 的話就可以搭配使用會比較有感覺</p>

<p>Mac 我是使用 Robomongo，算很好上手~</p>

<p>今天要來實作讀取的部分</p>

<p>讀取有分兩種，一種是讀取 list</p>

<p>另一種是讀取特定某個 todo task，今天兩種都會實作</p>

<p>首先我們先實作 get todo list</p>

<p>因為若要拿到特定的 todo task，需要 todo task 的 id</p>

<p>而我們現在還不曉得 todo task 的 id 是多少，我們只知道 user_id</p>

<p>因此就先從 list 下手</p>

<p>routes/users.js:</p>

<pre><code class="javascript">// Get todo list
router.get('/:user_id/todos', function(req, res) {
    var user_id = req.params.user_id;

    TODO.find(
        {user_id: user_id},
        function (err, results) {
            if (err) {
                res.status(400).json(
                    { error: "can not find data" }
                );
            } else {
                res.status(200).json(
                    results
                );
            }
        }
    );
});
</code></pre>

<p>上面程式碼的意思是，先抓到 uri 的 user_id</p>

<p>再來就直接進 db 找，find() 的第一個參數為:</p>

<pre><code>{user_id: user_id},
</code></pre>

<p>可以想像成是 SQL 語法中的 WHERE 條件</p>

<pre><code>SELECT * WHERE user_id = 'user_id' FROM todos
</code></pre>

<p>而 callback 則是針對 error 或 results 作處理</p>

<p>試著將 server 跑起來，然後使用 POSTMAN 丟 GET request 試試看</p>

<p>如果沒有資料，就利用昨天實作的 POST API 新增幾個吧！</p>

<p>記得 url 中輸入的 user_id 要在 DB 中有該 user 的資料才找的到資料哦</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.17.08.png" alt="images" /></p>

<p>如此一來就有 task id 了!</p>

<p>再來就來實作讀取特定 id 的 task API 吧!</p>

<p>程式碼如下</p>

<p>routes/user.js:</p>

<pre><code>// Get a todo task
router.get('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;

    TODO.find(
        { _id: todo_id, user_id: user_id},
        function (err, results) {
            if (err) {
                res.status(400).json(
                    { error: "can not find data" }
                );
            } else {
                res.status(200).json(
                    results[0]
                );
            }
        }
    );
});
</code></pre>

<p>這次更簡單了，user_id 及 todo_id 都是從 url 上取值</p>

<p>接著一樣使用 where 條件，將值帶入找資料</p>

<p>最後交給 callback 處理回傳值</p>

<p>將 server 跑起來，試著先從todo list 複製某一筆 _id 的值</p>

<p>丟到 url 中試試看</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.21.51.png" alt="image" /></p>

<p>如此一來，讀取特定 task 的 API 也完成囉!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d21] - 實戰開發 - 新增 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/21/api-d21/"/>
    <updated>2014-10-21T18:58:06+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/21/api-d21</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day21">Github 參考</a></p>

<p>昨天我們了解了如何拿 url params 以及 request data</p>

<p>今天我們就來使用他，對資料庫做存取</p>

<p>由於使用到資料庫，因此我們要加入資料庫的 driver</p>

<p>我們用的是 <code>mongoose</code> 套件</p>

<p>app.js:</p>

<pre><code class="javascript">// 在最上方加入
var mongoose = require('mongoose');

// 在某個地方連接資料庫
var db_uri = "mongodb://192.168.33.10:27017/TODOs";
mongoose.connect(db_uri);
</code></pre>

<p>在這邊我是使用了虛擬機的 DB，因此是 <code>mongodb://192.168.33.10:27017/TODOs</code></p>

<p>DB 的名稱為 <code>TODOs</code></p>

<p>這樣在程式一跑起來時，就會連接資料庫了!</p>

<p>再來我們就要設定在對資料庫做 CRUD 時，所需要做的事情</p>

<p>首先我們先要定義 schema，</p>

<p>雖然 mongodb 是 schema-free，但是官方文件也有提到最好還是有固定的 schema 避免記憶體 allocate 時出現問題，而程式撰寫時邏輯也不會因此而過於複雜</p>

<p>這時候我們就需要 model 資料夾了，在 model 資料夾中新增一個 todos.js</p>

<p>裡面要放的就是 todo task 的 schema</p>

<p>內容如下:</p>

<p>models/todos.js:</p>

<pre><code>'use strict';

var mongoose = require('mongoose');

// Define our todo schema
var TODOschema   = new mongoose.Schema({
    user_id: String,
    content: String,
    created_at: Date,
    updated_at: Date
});

// Export the Mongoose model
module.exports = mongoose.model('TODO', TODOschema);
</code></pre>

<p>我們定義了幾個東西 user_id, content, created_at, updated_at</p>

<p>其實 ObjectID 中已經有包含建立資訊了，其實 created_at 是可以省略掉的，不過在這邊還是加一下</p>

<p>注意下面這行:</p>

<pre><code>module.exports = mongoose.model('TODO', TODOschema);
</code></pre>

<p>&lsquo;TODO&rsquo; 在這邊是 Collection (RDBMS 中的 table) 的名稱</p>

<p>在 mongoose 中，會自動複數化，所以在 Mongodb 中的 Collection name 會變成 &lsquo;todos&rsquo; ，</p>

<p>雖然只是小小的一行，但是蠻重要的</p>

<p>最後將這個 model exports 成一個 mongoose.model 物件</p>

<p>那我們什麼時候會用到這個 model 物件呢?</p>

<p>就是在 routes/user.js 中，</p>

<p>routes/users.js:</p>

<pre><code>var TODO = require('../models/todos');
</code></pre>

<p>這樣在 users.js 中就可以使用 TODO 這個物件了!</p>

<p>我們先試著編輯 POST 的 route，拿到 POST 資料後，將資料轉成 TODO 的物件，存到 mongodb 裏</p>

<p>以下是 routes/users.js 中的 post 程式碼段</p>

<p>簡單來說就是先抓到 uri 的參數以及 post data</p>

<p>並且使用 models/todos.js 的 model 新建立一個 todo 物件</p>

<p>並將該物件用 post data 初始化，</p>

<p>初始化完後就執行寫入 DB 的行為, 若寫入成功則回傳 201 + data</p>

<p>失敗則回傳 400 bad request</p>

<pre><code>// Create a todo task
router.post('/:user_id/todos', function(req, res) {
    var user_id = req.params.user_id;
    var data = req.body;

    // insert to db
    var todo = new TODO();
    todo.user_id = user_id;
    todo.content = data.content;
    todo.created_at = Date.now();
    todo.updated_at = Date.now();

    todo.save(function (err) {
        if (err) {
            res.status(400).json(
                { error: "insert db error" }
            );
        } else {
            res.status(201).json(
                todo
            );
        }
    });
});
</code></pre>

<p>試著執行伺服器看看，並且使用 POSTMAN 丟 request 如下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.54.57.png" alt="image" /></p>

<p>POST 的 raw data</p>

<pre><code>{ "content": "buy milk" }
</code></pre>

<p>於是就完成了一個 POST 新增 TODO 的 API 了！</p>
]]></content>
  </entry>
  
</feed>
