<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Restful | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/restful/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-02T20:39:53+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d2] - 定義 2 - RESTful 的優點與要求]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d2/"/>
    <updated>2014-10-02T20:17:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d2</id>
    <content type="html"><![CDATA[<p>承上篇，</p>

<p>RESTful 的優點如下所列:</p>

<pre><code> 1. 瀏覽器即可以作為 client 端
 2. 可以更高效地利用 cache 來達到更快的回應速度
 3. 界面與資料分離
 4. 節省伺服器的計算資源
 5. 可重用! web/android/ios 都可以用, 無痛轉換!
</code></pre>

<p>RESTful 的要求:</p>

<pre><code> 1. client - server 架構  
 2. 分層系統  
 3. 利用快取機制增加效能  
      server-side: 在 GET 資源時，若該資源並沒有被變更，就可以利用 cache 機制減少 query，並且加快回應速度  
      client-side: 透過 client 端 cache 記錄 cache 版本，  
           若向 server 要求資源時發現 server 最新版與 cache 相同，  
           則 client 端直接取用本地資源即可，不需要再做一次查詢  
      省機器運算及流量 = 省錢  
 4. 通訊協定具有無狀態性  
      不能讓兩隻 API 做同一個動作!  
           假設完成轉賬手續必須先 call A 再 call B 的話，  
           若做完 A 後斷線導致 B 無法執行，後續要處理 A -&gt; B 的方式會很麻煩  
      且不應該假設伺服器知道目前的狀態!  
      因此設計出來的 API 不能有狀態性  
 5. 統一界面  
      使用 HTTP Verb: GET/POST/PUT/DELETE  
</code></pre>

<p>下一篇會討論什麼時候該打造 RESTful API?  以及看看別人寫的 RESTful API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d1] - 定義 1 - 什麼是 REST/RESTful?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d1/"/>
    <updated>2014-10-02T01:02:26+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d1</id>
    <content type="html"><![CDATA[<p>Representational State Transfer，簡稱 <code>REST</code>，<br/>
它是一種網路架構風格，他並不是一種標準。</p>

<p>而 RESTful 可以這樣子想像:<br/>
美麗 (Beauty) 的事物可以稱為 Beautiful<br/>
設計為 REST 的系統就可以稱為 RESTful</p>

<p>以 API 而言，假設我們正在撰寫一組待辦事項的 API，<br/>
可能會有以下方式來作為 API 的 interface:<br/>
<code>
獲取使用者資料     /getAllUsers
獲取使用者資料     /getUser/1
新增使用者資料     /createUser
更新使用者資料     /updateUser/1
刪除使用者資料     /deleteUser/1
</code></p>

<p>若是以 REST 風格來開發 RESTful API 的話:
<code>
獲取使用者資料     /GET            /users
獲取使用者資料     /GET            /user/1
新增使用者資料     /POST          /user
更新使用者資料     /PUT             /user/1
刪除使用者資料     /DELETE      /user/1
</code></p>

<p>兩者差異是在於 RESTful API 充分地使用了 HTTP protocol (GET/POST/PUT/DELETE)，<br/>
達到<br/>
1. 以直觀簡潔的資源 URI<br/>
2. 並且善用 HTTP Verb<br/>
3. 達到對資源的操作<br/>
4. 並使用 Web 所接受的資料類型: JSON, XML, YAML 等，最常見的是 JSON</p>

<p>通常是使用 HTTP, URI, JSON, HTML 這些現有廣泛流行的協議和標準，<br/>
且使用 HTTP status code 來代表該資源的狀態。</p>

<p>框架中強制使用 REST 風格的最有名的應該就是 Ruby on Rails 了!<br/>
(不過我們並不會使用 Rails 來開發 API service :P)</p>

<p>p.s. 因為 REST 並非是一種標準，因此有時候也不一定非得要照著 REST 來做，<br/>
只是在資源的操作面上，可以設計成這類的風格，以達到簡潔易懂，並且可重用。</p>

<p>下一篇會來聊聊 REST 的要求與優點</p>
]]></content>
  </entry>
  
</feed>
