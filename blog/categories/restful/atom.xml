<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Restful | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/restful/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-14T22:44:56+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d14] - [Javascript 番外篇] Javascript Function Scopes 和 Closures]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/14/api-d14/"/>
    <updated>2014-10-14T22:40:32+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/14/api-d14</id>
    <content type="html"><![CDATA[<p>這幾天會探討 javascript 的特性，由於比較少在寫 js ，因此有錯請指正</p>

<h2>Scope</h2>

<p>例子:</p>

<pre><code class="javascript">function hi() {
    var greetings = "hi";

    console.log("Say: " + greetings);

    function sayYa(newInput) {
        greetings = newInput;
        console.log("Say: " + greetings);
    }

    function sayCool(newInput) {
        var cool = newInput;
        console.log("Say: " + cool);
    }

    sayYa("Yo");
    sayCool("Cool");

    console.log("Say: " + greetings);
}

hi();
</code></pre>

<p>很簡單的概念</p>

<p>greetins 在 sayYa 方法中被覆寫掉了</p>

<p>如果要定義 local 變數必須在 function 裏用 var 定義</p>

<p>例如 sayCool function</p>

<h2>Closure</h2>

<p>例子:</p>

<pre><code>function person(){
    var name = 'default';

    return {
        greetings: function() {
            console.log( name );
        },
        changeName: function(newInput) {
            name = newInput;
        }
    };
}

var me = new person();
me.greetings();
me.changeName("kerkerj");
me.greetings();
</code></pre>

<h2>Self-Executing Anonymous Functions</h2>

<p>使用這種方式通常是避免和其他 js 檔案造成變數混淆</p>

<p>或是初始化</p>

<p>裡面的變數和 function 只被限制在這個範圍內</p>

<p>例子:</p>

<pre><code>(function(){
    var hi = 'Hello';

    function sayHi(name){
        return hi + ' ' + name;
    }

    global.greetings = sayHi
})(global);

console.log(global.greetings("kerkerj"));
console.log(hi); // &lt;- 這會失敗
</code></pre>

<p>必須將 sayHi 指給 global 的某一個變數, 才有辦法使用它</p>

<p>在 node.js 中 global 是全域變數，在瀏覽器中是 window~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d13] - [Javascript 番外篇] Javascript Require/ Module/ Module Pattern]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/13/api-d13/"/>
    <updated>2014-10-13T18:24:17+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/13/api-d13</id>
    <content type="html"><![CDATA[<p>接下來幾天會探討 node.js 的特性，由於比較少在寫 js ，因此有錯請指正</p>

<p>在 node.js 裏，要讀取外部模組都是透過 require 和 exports 來做溝通</p>

<p>以下列出這次最簡單 module 的例子</p>

<pre><code class="javascript">//hello.js
console.log('Hello World');
</code></pre>

<pre><code>// app.js
require('./hello.js');
</code></pre>

<h2>Module 也是有 Pattern 的</h2>

<p>第一種: Global (Not so good)</p>

<pre><code>// foo.js
foo = function() {
    console.log("foo!");
}

// app.js
require('./foo.js');
foo();
</code></pre>

<p>第二種: export an anonymous function</p>

<pre><code>// foo.js
module.exports = function() {
    console.log("foo! YA");
};

// app.js
var test = require("./foo.js");
test();
</code></pre>

<p>第三種： export a named function</p>

<pre><code>// bar.js
exports.bar = function() {
    console.log("bar");
}

// app.js
var bar = require('./bar.js').bar;
bar();
</code></pre>

<p>第四種: exports an anoymous object</p>

<pre><code>// bar4.js
var Bar4 = function() {};

Bar4.prototype.say = function() {
    console.log('bar4');
};

module.exports = new Bar4();

// app.js 
var b = require('./bar4.js');
b.say();
</code></pre>

<p>第五種: export a named object</p>

<pre><code>// bar5.js
var Bar5 = function() {};

Bar5.prototype.say = function() {
    console.log("bar5");
};

exports.Bar5 = new Bar5();

// app.js
var b = require('./bar5.js').Bar5;
b.say();
</code></pre>

<p>第六種: export an anonymous prototype</p>

<pre><code>// cool.js
var Cool = function() {};

Cool.prototype.say = function() {
    console.log('Cool!');
};

module.exports = Cool;

// app.js
var Cool = require('./cool.js');
var coo = new Cool();
coo.say();
</code></pre>

<p>第七種: export a named prototype</p>

<pre><code>// ang.js
var Ang = function () {};

Ang.prototype.say = function () {
    console.log('Ang!');
};

exports.Ang = Ang;

// app.js
var Ang = require('./ang.js').Ang;
var wer = new Ang();
wer.say();
</code></pre>

<h2>exports v.s. module.exports</h2>

<p>exports 是 module.exports 的輔助方法</p>

<p>以下有個例子會執行錯誤:</p>

<pre><code>// ya.js
module.exports = "YA";
exports.name = function() {
    console.log('My name is kerkerj');
};

// app.js
var ya = require('./ya.js');
ya.name(); TypeError: Cannot call method 'name' of undefined
</code></pre>

<p>在 ya.js 中 module.exports 有屬性了</p>

<p>因此下面的 export.name 就沒有被加入了</p>

<p>如果 module.exports 沒有任何屬性被加入的話，</p>

<p>exports 若有屬性了，則會交給 module.exports</p>

<p>反之就是剛剛的情況，moduel.exports 已經有屬性了，因此 export.name 就沒有作用了</p>

<p><a href="http://www.hacksparrow.com/node-js-exports-vs-module-exports.html">延伸閱讀</a></p>

<h2>Module as class</h2>

<p>直接看例子吧 XD</p>

<pre><code>// user.js
module.exports = function(name, age) {
    this.name = name;
    this.age = age;
    this.about = function() {
        console.log(this.name +' is '+ this.age +' years old');
    };
};

// app.js
var User = require('./user.js');
var kerkerj = new User('kerkerj', 18);
kerkerj.about(); 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d12] - MongoDB - Hello World! (Client-side)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/12/api-d12/"/>
    <updated>2014-10-12T18:50:16+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/12/api-d12</id>
    <content type="html"><![CDATA[<p>今天要使用 Node.js 的 mongodb driver 來操作 DB</p>

<p>一樣先開啟虛擬機並且登入吧</p>

<p>會使用到的套件是:</p>

<pre><code class="javascript">mongodb -&gt; mongodb native driver
</code></pre>

<p>或許有人有看過 <code>mongoose</code> -> <a href="http://mongoosejs.com/">官網</a></p>

<p>算是 MongoDB 的 ORM，我們在這邊如果有時間的話再簡單了解一下，</p>

<p>現在先使用 native driver 來操作</p>

<p>我們在這邊就不裝全域套件了，裝在 API 專案裡面</p>

<p>並且使用 <code>-save</code> 來將相依性寫入 <code>package.json 裏</code></p>

<pre><code>$ cd /vagrant/API/
$ npm install mongodb -save
</code></pre>

<p>從虛擬機回到電腦的資料夾中，在虛擬機資料夾的 API 資料夾中，</p>

<p>今天我們先不和 express 搭配，因此就是純操作 node.js + mongodb module</p>

<p>新增一個 <code>mongoTest.js</code></p>

<p>我們先來連線到 MongoDB，連線的方式有很多，下面是其中一種方式，</p>

<pre><code>// 先宣告用的到的東西
var MongoClient = require('mongodb').MongoClient
    , Server = require('mongodb').Server
    , options = { auto_reconnection: true, poolSize: 10 };

// Server 設定
var mongoClient = new MongoClient(new Server('localhost', 27017, options));

// 開啟連線
mongoClient.open(function(err, mongoClient) {
    var db1 = mongoClient.db("testDB");

    if (!err) {
        console.log("Connected!");
    }

    mongoClient.close();
    console.log("Closed!");
});
</code></pre>

<p>回到虛擬機執行</p>

<pre><code>$ node mongoTest.js
Connected!
Closed!
</code></pre>

<p>接著用另外一種連接方式，介紹 CRUD 的操作:</p>

<pre><code>var mongoClient = require('mongodb').MongoClient;

mongoClient.connect('mongodb://localhost:27017/testDB', function(err, db) {
    if(err) throw err;

    // Data
    var todo1 = {todo: "Buy books", time: "2014/10/11", who: "myself"};
    var todo2 = {todo: "Buy milk", time: "2014/10/15", who: "brother"};
    var todo3 = {todo: "Wash cats", time: "2014/11/21", who: "myself"};

    var collection = db.collection('todoTest');
    var where = {todo: "Buy milk"};

    // 新增資料
    collection.insert(todo1, function(err, docs) {
        console.log(docs);
    });

    collection.insert(todo2, function(err, docs) {
        console.log(docs);
    });

    collection.insert(todo3, function(err, docs) {
        console.log(docs);
    });

    // 更新資料
    collection.update(where, { $set: { time: "2014/12/25"} }, function(err) {
        console.log(err);
    });

    // 刪除某筆資料
    collection.remove(where, function(err) {
        console.log(err);
    });

    // 查詢某筆資料
    collection.find(where).toArray(function(err, results) {
        console.dir(results);
    });

    // 查詢所有資料
    collection.find().toArray(function(err, results) {
        console.dir(results);
    });
});
</code></pre>

<p>請注意，以上操作由於 javascript async 特性的關係，</p>

<p>每個操作是會同時間送出，不同時間回送，看操作的運算時間而定</p>

<p>因此若要依順序性的話，一是使用 callback，二是使用 async.js</p>

<p>後面應該會提到 XD</p>

<p>將這些程式碼存到 js file 裏，將某些行先註解掉，執行看看就可以略知一二了，</p>

<p>可以同時搭配終端機直接到 DB 查看</p>

<p>p.s. 大家可能會覺得這樣的方式很麻煩，MongoDB 有沒有好用的 client 來管理 DB 呢</p>

<p>我推薦 RoboMongo，多平台，且可以直接輸入指令，蠻方便的，</p>

<p>那如果是用我們現在的虛擬機的方式，要如何使用 RoboMongo ？</p>

<p>首先，虛擬機的 DB 必須先開啟外部網路可以連線，</p>

<p>注意! 我們目前並沒有創立使用者帳號密碼，不需要驗證即可進入 DB，這樣的做法只限於 demo, 與虛擬機中使用</p>

<p>正式環境還是必須建立使用者帳號密碼</p>

<p>先進到虛擬機更改 db 設定:</p>

<pre><code>$ sudo nano /etc/mongod.conf
</code></pre>

<p>將 bind_ip = 0.0.0.0</p>

<p>按下 ctrl+x 選擇 Y 存檔</p>

<p>重開 mongodb</p>

<pre><code>$ sudo service mongod restart
</code></pre>

<p>若已經下載過 RoboMongo，開啟並輸入欲連線的 DB 設定：</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-06%2013.56.39.png" alt="" /></p>

<p>就可以連進去管理了!</p>

<p>再次提醒，這樣的做法只限於虛擬機及 demo 中測試</p>

<p>正式環境要嘛建立使用者帳號密碼</p>

<p>要嘛就是讓 DB 只限本機存取，請記住這件事情哦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d11] - MongoDB - Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/11/api-d11/"/>
    <updated>2014-10-11T20:09:08+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/11/api-d11</id>
    <content type="html"><![CDATA[<p>今天先講在 Server 中如何操作 MongoDB</p>

<p>一樣開啟虛擬機，</p>

<p>我們在先前已經有先安裝過 MongoDB 了，因此，在 Ubuntu Server 中預設是開機啟動的</p>

<p>登入虛擬機吧~</p>

<p>登入虛擬機後，我們要進入 MongoDB，必須使用 <code>mongo</code> 這個 MongoDB Shell</p>

<pre><code>$ mongo
MongoDB shell version: 2.6.4
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
    http://docs.mongodb.org/
Questions? Try the support group
    http://groups.google.com/group/mongodb-user
&gt;  
</code></pre>

<p>此時會發現輸入指令的地方變成了 <code>&gt;</code> 表示我們已經在 mongodb 裡面了</p>

<p>為什麼不需要帳號密碼即可進入 MongoDB 呢，因為 MongoDB 預設是不需要做登入的</p>

<p>並且加上預設只能由本機存取，也就是說，外部連入的 IP 是進不了 MongoDB 的</p>

<p>這部分後面會再作說明。</p>

<p>傳統的 Table 在 MongoDB 中，稱之為 Collection</p>

<p>一筆 record 在 MongoDB 中，稱之為 document</p>

<p>進入 MongoDB 後，</p>

<p>就可以簡單操作一些指令：</p>

<p>查詢所有的 DB:</p>

<pre><code>&gt; show databases;
admin  (empty)
local  0.078GB
</code></pre>

<p>切換 DB</p>

<pre><code>&gt; use test;
</code></pre>

<p><code>use DBNAME</code> 若 DBNAME 不存在於 MongoDB 中的話，</p>

<p>等同於建立一個新的 DB，意思就是我們不需要下 &lsquo;建立 DB&rsquo; 這個指令，</p>

<p>直接 <code>use</code> 就是一個新的 DB 了，不過這個 DB 會直到有 Collection 被新增才算真正的被建立</p>

<p>意即如果我們 use 了一個新的 DB，但是並沒有做任何新增 Collection 的動作就離開，</p>

<p>這個 DB 也不會被建立起來</p>

<p>當我們使用 <code>use DBNAME</code> 進入 DB 後：</p>

<h3>新增 Collection</h3>

<pre><code>&gt; db.createCollection("TestCollection")
{ "ok" : 1 }
</code></pre>

<h3>CRUD 操作</h3>

<p>此時 Collection &ldquo;TestCollection&rdquo; 就被建立了，
可以使用:</p>

<h4>新增資料:</h4>

<p>example: <code>db.TestCollection.insert(DATA);</code></p>

<p>DATA 就是 javascript 的 array map</p>

<pre><code>&gt; db.TestCollection.insert({data: "test_data", num: 2, arr: ["arr1", "arr2", "arr3"]});
</code></pre>

<h4>查詢資料</h4>

<p>example: <code>db.TestCollection.find(WHERE_CONDITION);</code></p>

<pre><code>&gt; db.TestCollection.find({data: "test_data"});
{ "_id" : ObjectId("5430497db94bb4afe2f8b387"), "data" : "test_data", "num" : 2, "arr" : [ "arr1", "arr2", "arr3" ] }
</code></pre>

<p>p.s. 每插入一筆資料，MongoDB 預設都會給訂一組 ObjectId</p>

<h4>查詢所有資料</h4>

<pre><code>&gt; db.TestCollection.find();
{ "_id" : ObjectId("5430497db94bb4afe2f8b387"), "data" : "test_data", "num" : 2, "arr" : [ "arr1", "arr2", "arr3" ] }
</code></pre>

<h4>修改資料</h4>

<p>example: <code>db.TestCollection.update(WHERE_CONDITION, SET);</code></p>

<pre><code>&gt; db.TestCollection.update({data: "test_data"}, { $set: {num: 3} });
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

// 查看 num 是否從 2 變 3 了
&gt; db.TestCollection.find({data: "test_data"});
{ "_id" : ObjectId("5430497db94bb4afe2f8b387"), "data" : "test_data", "num" : 3, "arr" : [ "arr1", "arr2", "arr3" ] }
</code></pre>

<h4>刪除資料</h4>

<p>exmaple: <code>db.TestCollection.remove(WHERE_CONDITION);</code></p>

<pre><code>&gt; db.TestCollection.remove({data: "test_data"});
</code></pre>

<h3>刪除 Collection</h3>

<pre><code>&gt; db.TestCollection.drop();
</code></pre>

<h3>查詢有哪些 Collection</h3>

<pre><code>&gt; show collections;
</code></pre>

<h3>砍掉目前所在的整個 DB:</h3>

<pre><code>&gt; use test;
&gt; db.dropDatabase();
{ "dropped" : "test", "ok" : 1 }
</code></pre>

<p>tips: 在 mongo shell 裡有自動補完的功能，可以按下 tab 來查看有什麼方法可以用</p>

<p>ctrl-D 離開 Mongo Shell</p>

<p><a href="http://docs.mongodb.org/manual/">MongoDB 官網文件</a>非常詳細，可以多看看</p>

<p>明天會用 Node.js 的 MongoDB driver 來操作 MongoDB!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d10] - Express - Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/10/api-d10/"/>
    <updated>2014-10-10T01:49:55+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/10/api-d10</id>
    <content type="html"><![CDATA[<h1>Express - Hello World!</h1>

<p>今天就要來安裝主角之一的 <a href="http://expressjs.com/">Express</a> 了!</p>

<p>一樣開啟虛擬機器我應該是可以不用多說了 XD</p>

<p>先確認自己的 node 是不是 NVM 的 node 喲</p>

<h2>建立專案</h2>

<pre><code>$ cd /vagrant/
$ mkdir API
$ cd API/
$ npm init
</code></pre>

<p>自己輸入專案的相關內容吧，不知道的就直接按 enter 空白丟給他~</p>

<p>就會產生 package.json 了!</p>

<h2>安裝 Express</h2>

<pre><code>// 在專案目錄底下 (/vagrant/API/)

$ npm install express -save
</code></pre>

<p>下 <code>-save</code> 的原因是要將 express 加入 package.json 中</p>

<p>離開虛擬機，其實我們也可以在虛擬機資料夾看到剛剛建立的專案了，</p>

<p>現在開始就可以使用自己喜歡的編輯器來開啟這個專案資料夾，我個人偏好使用 Sublime Text</p>

<p>要執行專案時再回終端機即可</p>

<h2>Express Hello World!</h2>

<p>在 API 資料夾中建立一個 app.js</p>

<p>內容是:</p>

<pre><code>javascript
var express = require('express');
var app = express();

app.get('/', function(req, res){
  res.send('Hello World');
});

app.listen(3000, function() {
    console.log('Listening on port %d', server.address().port);
});
</code></pre>

<p>儲存後，回到終端機，將 express 跑起來:</p>

<pre><code>vagrant@vagrant-ubuntu-trusty-64:/vagrant/API$ node app.js
Listening on port 3000
</code></pre>

<p>開啟瀏覽器，瀏覽 <code>http://192.168.33.10:3000</code> (url 視個人環境而定)</p>

<p>出現 <code>Hello World! Express!</code> 啦～～ 又一個 Hello World 啦~~</p>

<p>是不是有比 Node.js 的範例更簡潔一點呢?</p>

<p>簡單分析一下這段 code :</p>

<pre><code>// 引入 express module
var express = require('express');

// 產生一個 express instance - app
var app = express();

// Express 的重點所在! 稍後解釋
app.get('/', function(req, res){
  res.send('Hello World');
});

// 讓 express server 跑在 port 3000
app.listen(3000, function() {
    console.log('Listening on port %d', server.address().port);
});
</code></pre>

<p>以上概念基本上都和 Node.js 概念差不多</p>

<p>值得一提的是 Express 的 Routing:</p>

<pre><code>app.get('/', function(req, res){
  res.send('Hello World');
});
</code></pre>

<p>最前面有提到 HTTP 的動詞 GET, POST, PUT, DELETE &hellip;</p>

<p>在這邊就必須用上了！</p>

<p>我們可以看一下 express 的 <a href="http://expressjs.com/4x/api.html#router.VERB">API reference</a></p>

<p><code>app.get</code> 的 <code>.get</code> 就是代表 HTTP GET</p>

<p>如果後面接 <code>.post</code> 就是 HTTP POST, 等等都同樣概念</p>

<p><a href="http://expressjs.com/4x/api.html#router.VERB">API reference</a> 中提到，</p>

<pre><code>router.VERB(path, [callback...], callback)
</code></pre>

<p><code>path</code> 的意思就是要開放給 client 的路由, 透過不同的路由導向不同的動作</p>

<p>中間的 <code>[callback...]</code> 是 middleware 這個之後會再解釋</p>

<p>最後一個 callback 是用來處理 request 及 response</p>

<p>在這個例子中，client 並沒有丟參數，因此不需要對 request 作處理，</p>

<p>而 server 要回應 response</p>

<p>所以使用了 <code>res.send('Hello World');</code> 來回傳資料</p>

<p>是不是很簡單勒!</p>

<h2>專案產生器</h2>

<p>或許有人會使用 <code>express-generator</code> 來產生 expresss 專案目錄</p>

<p>雖然它很方便，一次建立好專案結構，並且安裝一些常用搭配的套件，</p>

<p>但是由於在尚未了解 express 的運作原理，</p>

<p>一開始一次建立完整我認為過快，因此先不建議這樣用，</p>

<p>當然，如果已經很熟練很了解 express 中可以使用的東西了，使用產生器當然是節省時間囉~</p>

<pre><code>$ npm install -g express-generator
$ express /tmp/foo &amp;&amp; cd /tmp/foo
</code></pre>

<p>下一篇會講解如何簡單操作 MongoDB!</p>
]]></content>
  </entry>
  
</feed>
