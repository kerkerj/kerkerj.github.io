<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Express | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/express/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-21T19:13:02+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d21] - 實戰開發 - 新增 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/21/api-d21/"/>
    <updated>2014-10-21T18:58:06+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/21/api-d21</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day21">Github 參考</a></p>

<p>昨天我們了解了如何拿 url params 以及 request data</p>

<p>今天我們就來使用他，對資料庫做存取</p>

<p>由於使用到資料庫，因此我們要加入資料庫的 driver</p>

<p>我們用的是 <code>mongoose</code> 套件</p>

<p>app.js:</p>

<pre><code class="javascript">// 在最上方加入
var mongoose = require('mongoose');

// 在某個地方連接資料庫
var db_uri = "mongodb://192.168.33.10:27017/TODOs";
mongoose.connect(db_uri);
</code></pre>

<p>在這邊我是使用了虛擬機的 DB，因此是 <code>mongodb://192.168.33.10:27017/TODOs</code></p>

<p>DB 的名稱為 <code>TODOs</code></p>

<p>這樣在程式一跑起來時，就會連接資料庫了!</p>

<p>再來我們就要設定在對資料庫做 CRUD 時，所需要做的事情</p>

<p>首先我們先要定義 schema，</p>

<p>雖然 mongodb 是 schema-free，但是官方文件也有提到最好還是有固定的 schema 避免記憶體 allocate 時出現問題，而程式撰寫時邏輯也不會因此而過於複雜</p>

<p>這時候我們就需要 model 資料夾了，在 model 資料夾中新增一個 todos.js</p>

<p>裡面要放的就是 todo task 的 schema</p>

<p>內容如下:</p>

<p>models/todos.js:</p>

<pre><code>'use strict';

var mongoose = require('mongoose');

// Define our todo schema
var TODOschema   = new mongoose.Schema({
    user_id: String,
    content: String,
    created_at: Date,
    updated_at: Date
});

// Export the Mongoose model
module.exports = mongoose.model('TODO', TODOschema);
</code></pre>

<p>我們定義了幾個東西 user_id, content, created_at, updated_at</p>

<p>其實 ObjectID 中已經有包含建立資訊了，其實 created_at 是可以省略掉的，不過在這邊還是加一下</p>

<p>注意下面這行:</p>

<pre><code>module.exports = mongoose.model('TODO', TODOschema);
</code></pre>

<p>&lsquo;TODO&rsquo; 在這邊是 Collection (RDBMS 中的 table) 的名稱</p>

<p>在 mongoose 中，會自動複數化，所以在 Mongodb 中的 Collection name 會變成 &lsquo;todos&rsquo; ，</p>

<p>雖然只是小小的一行，但是蠻重要的</p>

<p>最後將這個 model exports 成一個 mongoose.model 物件</p>

<p>那我們什麼時候會用到這個 model 物件呢?</p>

<p>就是在 routes/user.js 中，</p>

<p>routes/users.js:</p>

<pre><code>var TODO = require('../models/todos');
</code></pre>

<p>這樣在 users.js 中就可以使用 TODO 這個物件了!</p>

<p>我們先試著編輯 POST 的 route，拿到 POST 資料後，將資料轉成 TODO 的物件，存到 mongodb 裏</p>

<p>以下是 routes/users.js 中的 post 程式碼段</p>

<p>簡單來說就是先抓到 uri 的參數以及 post data</p>

<p>並且使用 models/todos.js 的 model 新建立一個 todo 物件</p>

<p>並將該物件用 post data 初始化，</p>

<p>初始化完後就執行寫入 DB 的行為, 若寫入成功則回傳 201 + data</p>

<p>失敗則回傳 400 bad request</p>

<pre><code>// Create a todo task
router.post('/:user_id/todos', function(req, res) {
    var user_id = req.params.user_id;
    var data = req.body;

    // insert to db
    var todo = new TODO();
    todo.user_id = user_id;
    todo.content = data.content;
    todo.created_at = Date.now();
    todo.updated_at = Date.now();

    todo.save(function (err) {
        if (err) {
            res.status(400).json(
                { error: "insert db error" }
            );
        } else {
            res.status(201).json(
                todo
            );
        }
    });
});
</code></pre>

<p>試著執行伺服器看看，並且使用 POSTMAN 丟 request 如下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.54.57.png" alt="image" /></p>

<p>POST 的 raw data</p>

<pre><code>{ "content": "buy milk" }
</code></pre>

<p>於是就完成了一個 POST 新增 TODO 的 API 了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d20] - 實戰開發 - Routes 2, Get Params and Request Data]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/20/api-d20/"/>
    <updated>2014-10-20T18:46:12+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/20/api-d20</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day20">Github 參考</a></p>

<p>接著我們要根據我們開之前寫好的 <a href="http://docs.todolist7.apiary.io/">文件</a> 來開發:</p>

<p>要有下列 routes</p>

<pre><code class="javascript">TODOs
GET /user/{user_id}/todos/
POST /user/{user_id}/todos/
GET /user/{user_id}/todos/{id}
PUT /user/{user_id}/todos/{id}
DELETE /user/{user_id}/todos/{id}
</code></pre>

<p>這樣的需求其實可以用 namespace 實作，不過我們偷懶一點，直接指向 /user 就好</p>

<p>所以在 app.js 加入</p>

<pre><code>var users = require('./routes/users');
app.use('/user', users);
</code></pre>

<p>所以會變這樣:</p>

<pre><code>var express = require('express');
var app = express();

// Set routers
var index = require('./routes/index');
var users = require('./routes/users');

app.use('/', index);
app.use('/user', users);

module.exports = app;
</code></pre>

<p>不過看起來我們缺少 routes/users.js，所以我們也來新增一個</p>

<p>routes/users.js 內容如下</p>

<pre><code>'use strict';

var express = require('express');
var router = express.Router();

router.get('/', function(req, res) {

});

router.post('/', function(req, res) {

});

router.get('/', function(req, res) {

});

router.put('/', function(req, res) {

});

router.delete('/', function(req, res) {

});

module.exports = router;
</code></pre>

<p>好像有那麼一點符合我們要的 routes 了</p>

<p>我們在把每個詳細的 uri 加入</p>

<p>在這邊要注意</p>

<p>因為我們在 app.js 中把 uers.js 加入了 (&lsquo;/users&rsquo;, users)</p>

<p>這個 route</p>

<p>因此在 users.js 中設定的所有 route 都是接在 <code>/users/</code> 後面的</p>

<p>要注意哦</p>

<p>修改後的檔案:</p>

<pre><code>'use strict';

var express = require('express');
var router = express.Router();

// Get todo list
router.get('/:user_id/todos', function(req, res) {
    res.status(200).json( {success: "GET lists"} );
});

// Create a todo task
router.post('/:user_id/todos', function(req, res) {
    res.status(200).json( {success: "POST"} );
});

// Get a todo task
router.get('/:user_id/todos/:todo_id', function(req, res) {
    res.status(200).json( {success: "GET 1 task"} );
});

// Update a todo task
router.put('/:user_id/todos/:todo_id', function(req, res) {
    res.status(200).json( {success: "PUT"} );
});

// Delete a todo task
router.delete('/:user_id/todos/:todo_id', function(req, res) {
    res.status(200).json( {success: "DELETE"} );
});

module.exports = router;```
</code></pre>

<p>將 server 重啟，試著對這些網址丟丟看</p>

<p>這時候使用瀏覽器應該就沒辦法丟 GET 以外的要求了對吧?</p>

<p>此時 chrome extension - POSTMAN 就該上場啦！</p>

<p>打開 POSTMAN 就可以送以下的 request 囉!</p>

<pre><code>GET http://localhost:3000/user/kerkerj/todos  
POST http://localhost:3000/user/kerkerj/todos  
GET http://localhost:3000/user/kerkerj/todos/1  
PUT http://localhost:3000/user/kerkerj/todos/1  
DELETE http://localhost:3000/user/kerkerj/todos/1  
</code></pre>

<p>因為剛剛程式裡面都只讓他回傳 success，因此還沒有太大的作用，</p>

<p>不過已經有感覺了對吧!! XD</p>

<h2>Get params from url</h2>

<p>我們現在先針對以下這段程式碼作進一步的改寫:</p>

<pre><code>// Get a todo task
router.get('/:user_id/todos/:todo_id', function(req, res) {
    res.status(200).json( 
        { 
            success: "GET 1 task", 
            user: req.params.user_id,
            todo_id: req.params.todo_id
        } );
});
</code></pre>

<p>存檔並打開 server，存取 <a href="http://localhost:3000/user/test/todos/1">http://localhost:3000/user/test/todos/1</a></p>

<p>就可以看到回傳值是:</p>

<pre><code>{
    "success": "GET 1 task",
    "user": "kerkerj",
    "todo_id": "1"
}
</code></pre>

<p>所以又學到一招了!</p>

<p>先設定想要抓哪一段網址，例如:</p>

<p><code>/:user_id/todos/:todo_id</code></p>

<p>前面有加冒號的就是這段網址是要被抓成一個參數</p>

<p>而冒號後面接的就是之後在下面要使用到的名字</p>

<p>要接網址的參數的拿法 - req.params.{???}</p>

<p>例如:</p>

<p>req.params.user_id</p>

<p>req.params.todo_id</p>

<p>拿到了網址的參數，就可以對資料庫做進一步的查詢</p>

<h2>Get request data</h2>

<p>那要怎麼拿到 request 的 data 呢?</p>

<p>他並不存在于網址列上啊?</p>

<p>這時候就要加入 <code>body-parser</code> 了!</p>

<p>他會在接收到 request 時，幫我們做過處理後，再傳到每個 request 該去的 router 裏</p>

<p>在 app.js 中加入</p>

<pre><code>// 最上面
var bodyParser = require('body-parser');

// 加在 router 前面，切記!!
app.use( bodyParser.json() );
app.use( bodyParser.urlencoded({ extended: true }) );

app.use('/', index);
app.use('/user', users);
</code></pre>

<p>接著在 users.js 中的 POST 區塊中加入兩行:</p>

<pre><code>// Create a todo task
router.post('/:user_id/todos', function(req, res) {
    var data = req.body;

    res.status(200).json( {success: data } );
});
</code></pre>

<p>開啓 server, 用下圖的方式對 server 做 request:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-09%2023.00.10.png" alt="image" /></p>

<p>記得要加入 header -</p>

<p>Content-Type - application/json</p>

<p>Data 要選擇 raw data - 使用自己寫的 json 格式</p>

<p>就可以看到下面的回傳格式了!</p>

<p>透過拿到 url params 以及 request data</p>

<p>我們就可以使用這些資料來對資料庫做存取了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d19] - 實戰開發 - Index & Route & Http Status Code]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/api-d19/"/>
    <updated>2014-10-19T21:19:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/api-d19</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day19">Github 參考</a></p>

<p>昨天先把專案目錄初始化，裝完該裝的套件後</p>

<p>在 routes 中加入一個 index.js 檔案</p>

<pre><code class="javascript">'use strict';

var express = require('express');
var router = express.Router();

router.get('/', function(req, res) {
    res.status(200).json({ greetings: "hello world!"});
});

module.exports = router;
</code></pre>

<p>建立一個 <code>app.js</code> 在專案根目錄中:</p>

<p>app.js</p>

<pre><code>var express = require('express');
var app = express();
var index = require('./routes/index');

// Set routers
app.use('/', index);

module.exports = app;
</code></pre>

<p>然後在 bin 資料夾建立一個 server.js:</p>

<p>bin/server.js:</p>

<pre><code>'use strict';

var debug = require('debug')('TODOAPI');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});
</code></pre>

<p>並且在 package.json 中修改並加入:</p>

<p>加入 <code>start</code> : <code>"start": "node ./bin/server.js",</code></p>

<pre><code>"scripts": {
    "start": "node ./bin/server.js",
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
</code></pre>

<p>這樣我們就可以透過 <code>npm start</code> 來啟動 server 了!</p>

<p>試著啟動看看 <code>npm start</code></p>

<p>到網址列輸入 <code>http://localhost:3000/</code></p>

<p>就可以看到 <code>{"greetings":"hello world!"}</code> 了!</p>

<p>我們從本文的後面往回看：其實就是一個 request 會經過的地方:</p>

<p>當我們下了 <code>npm start</code>，npm 會搜尋 package.json 中有沒有 <code>start</code> 指令</p>

<p>若有的話就會執行他所設定的指令 <code>node ./bin/server.js</code></p>

<p>這樣就會執行 server.js 了</p>

<p>我們再看一下 server.js，講解在底下的註解:</p>

<pre><code>// 使用嚴格模式
'use strict';

// 加入 debugger
var debug = require('debug')('TODOAPI');

// 將我們寫的 app.js 引入，建立一個 app instance
var app = require('../app');

// 設定 app instance 的 port, 若環境變數有設定的話就使用環境變數的值
// 沒有設定環境變數的話則是 3000
app.set('port', process.env.PORT || 3000);

// 啟動 server，讓 server 監聽剛剛上一行所設定的 port，
// 並且使用 debugger
var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});
</code></pre>

<p>既然 server.js 啟動了一個 app.js 的 instance</p>

<p>那我們就要來看一下 app.js</p>

<pre><code>// 引入 express 模組
var express = require('express');

// 初始化一個 express instance
var app = express();

// 將 route 引入
var index = require('./routes/index');

// 設定若有 request 進到 http://localhost:3000/ 時，
// 交給 routes/index.js 來作後續處理
app.use('/', index);

最後這一行是這個檔案 export 成一個模組
module.exports = app;
</code></pre>

<p>那現在我們了解到了，如果有一個要求打進了 <code>http://localhost:3000/</code></p>

<p>它會將該要求轉發給 routes/index.js 來作處理</p>

<p>因此我們再進到 index.js 看看內容</p>

<pre><code>// 使用嚴格模式
'use strict';

// 引入 express 模組
var express = require('express');

// 在這邊我們要使用 express 模組中的 Router
// 因為在 app.js 中，若是使用 app.use('/', index)
// 該 index 物件必須是一個 Router 物件，
// 因此在這邊我們才會這樣寫
// 於是 router 就是一個 express 的 router 物件了
var router = express.Router();

// 設定該  router 有哪些路徑要來聽
// 在這邊我們設定當有 request 進到 根目錄，
// 且是使用 GET 方法時，我們的回覆是:
// HTTP status code 爲 200
// 回傳的資料為 json 格式，傳入的內容是一個 javascript 物件
// .json 方法會幫我們轉成 json 格式回傳給使用者
router.get('/', function(req, res) {
    res.status(200).json({ greetings: "hello world!"});
});

// 最後將這個檔案 export 成一個 router 模組
module.exports = router;
</code></pre>

<p>所以透過這樣的方式我們就了解到了一個 request 是如何在模組化後的程式奔跑遊走</p>

<p>另外要特別提到的是 http status code</p>

<p>http status code 其實是一個非常好讓 client 知道這次 API request 發生什麼事的資料，充分利用 HTTP 協議所定義的狀態碼</p>

<p>我們有時候瀏覽網頁會看到: 404 Not found! 或是 500 Internal Server Error</p>

<p>這就是 HTTP status code</p>

<p>那我們可以透過定義好回傳的 http status code 來代表此次 request 的狀態</p>

<p>例如：</p>

<p>client 端輸入的 API 網址錯誤了</p>

<p>我們就回傳 status code: 404</p>

<p>如果是不小心 server 的 code 寫錯了，導致該次 request 完全讓 server 死掉了，</p>

<p>那就可以回傳 500 interanl server error</p>

<p>因此在做 error handling 時，請定義好 status code，他一定會有幫助的!</p>

<p>常用的 status code:</p>

<pre><code>200 - Success
201 - Created
400 - Bad request
401 - Unauthorized
403 - Forbidden
404 - Not found
500 - Internal Server Error
</code></pre>

<p>詳細還可以參考: <a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP status code</a></p>

<p><a href="http://www.restapitutorial.com/httpstatuscodes.html">其他教學</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d18] - 實戰開發 - 套件模組]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/18/api-d18/"/>
    <updated>2014-10-18T18:28:19+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/18/api-d18</id>
    <content type="html"><![CDATA[<h2>會使用到的套件:</h2>

<pre><code>主體:
express - web framework
body-parser - parse request body

測試相關:
mocha - test framework
mocha-mongoose - 用來和 mocha 和 mongoose 中間做介接的套件
superagent - 拿它來丟 http request
validator - 用來驗證某個物件是否為某個型別
expect.js - 類似 BDD 的語法，用來寫測試的
debug - debug package

DB 相關:
mongoose - mongodb orm
mongodb - mongodb native driver

開發相關:
nodemon - detect file change and restart server

生產環境相關:
log4js - 記錄 request log
</code></pre>

<p>這是我的 package.json, 可以複製到專案目錄，然後下 <code>npm install</code></p>

<pre><code>{
  "name": "TODOAPI",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "start": "node ./bin/server.js env=development",
    "test": "./node_modules/mocha/bin/mocha",
    "test-detail": "./node_modules/mocha/bin/mocha --reporter list",
    "stop": "pkill -lf server.js"
  },
  "author": "kerkerj",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.9.0",
    "debug": "^2.0.0",
    "expect.js": "^0.3.1",
    "express": "^4.9.5",
    "log4js": "^0.6.21",
    "mocha": "^1.21.4",
    "mocha-mongoose": "^1.0.1",
    "mongodb": "^1.4.19",
    "mongoose": "^3.8.17",
    "superagent": "^0.20.0",
    "validator": "^3.19.1"
  }
}
</code></pre>

<h2>安裝套件，及全域套件 mocha</h2>

<pre><code>// in project folder
$ npm install express body-parser mocha mocha-mongoose superagent validator expect.js debug mongoose mongodb log4js -save 
$ npm install -g nodemon
</code></pre>

<h2>各個套件簡單設定</h2>

<p>接下來會針對一些套件作說明，但是由於可能有些人不懂整個專案的運作，因此下面看看就好，之後實作上有問題可以再回來看。</p>

<h2>Nodemon 的作用</h2>

<p>範例:</p>

<pre><code>$ nodemon ./bin/server.js
...
</code></pre>

<p>就可以放著不管它了~ 只要檔案有變動，就會自動重開 server</p>

<h2>使用 logger - log4js</h2>

<p>設定 logger - log4js, 並將 log 寫入到 logs/access.log 裏</p>

<pre><code>// Set logger
var log4js = require('log4js');
log4js.configure({
    appenders: [
        { type: 'console' }, //控制台輸出
        {
            type: 'file', //文件輸出
            filename: 'logs/access.log',
            maxLogSize: 20000000, // 20 MB
            backups: 10,
            category: 'normal'
        }
    ],
    replaceConsole: true
});

var logger = log4js.getLogger('normal');
logger.setLevel('INFO');

app.use(log4js.connectLogger(logger, {level: 'auto', format:':method :url'}));
</code></pre>

<p><a href="http://blog.fens.me/nodejs-log4js/">node log4s</a></p>

<h2>使用 body-parser 處理 request 的資料</h2>

<p>加入 middleware</p>

<pre><code>app.use( bodyParser.json() );
app.use( bodyParser.urlencoded({ extended: true }) );
</code></pre>

<p>需要加入 { extended: true/false }, 否則會 warning:</p>

<p>body-parser deprecated undefined extended: provide extended</p>

<p>如果要接收 json request</p>

<p>client 端在 Header 中必須先設定 &ldquo;Content-type: applciation/json&rdquo;</p>

<p>才能夠在 router 中使用 <code>req.body</code> 拿到 json 值</p>

<h2>測試套件</h2>

<pre><code>mocha - 專案
expect.js - 專案
superagent - 專案
</code></pre>

<p>測試流程 -</p>

<p>先跑 server 起來，透過自動化程式自動丟 request 給 server，測試結束</p>

<pre><code>$ npm start
$ mocha
$ npm stop
</code></pre>

<p>所以必須先在 package.json 中設定好 script</p>

<pre><code>{
    (...)
    "scripts": {
      "start": "node ./bin/server.js",
      "test": "mocha",
      "stop": "pkill -lf server.js"
  },
  (...)
}
</code></pre>

<p>由於我將啟動 server 的 script 放在 bin 資料夾裡，因此</p>

<p><code>npm start</code> 的 script 就會執行:</p>

<pre><code>node ./bin/server.js
</code></pre>

<p><code>npm stop</code> 的話，用到了 *nix 的指令，會先到 process list 中找到和 server.js 有關的 process，然後 kill process (<code>pkill</code>)</p>

<pre><code>pkill -lf server.js
</code></pre>

<p>跑測試的話，直接下 <code>mocha</code>，在這邊我們也丟一個 script 指定給 <code>npm test</code></p>

<p>下 <code>npm test</code> 就是等同於下 <code>mocha</code></p>

<p>上面只是大致上講解一下每個套件如何用，接下來我們會以實際的例子來說明</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d17] - 實戰開發 - 專案結構]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/17/api-d17/"/>
    <updated>2014-10-17T21:17:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/17/api-d17</id>
    <content type="html"><![CDATA[<p>首先我們就在虛擬機的資料夾底下，建立一個專案資料夾吧!</p>

<p>今天會來簡單切割一下我們的專案目錄</p>

<h2>建立新專案目錄:</h2>

<pre><code>$ cd /vagrant/
$ mkdir TODOAPI
$ cd TODOAPI
$ npm init
// 輸入專案資訊
$ 
</code></pre>

<h2>建立專案結構</h2>

<pre><code>/
| - bin/
| - routes/
| - model/
| - node_modules/
| - logs/
| - config/
| - test/
| - app.js
| - package.json
</code></pre>

<p>分別講解一下各個 folder 的工作:</p>

<h3><code>bin</code></h3>

<p>筆者會在 <code>bin</code> 資料夾底下放一個 <code>server.js</code></p>

<p>這個 <code>server.js</code> 就是會專門用來啟動一個 <code>app.js</code> instance</p>

<h3><code>routes</code></h3>

<p>基本上如果了解 MVC 架構的話，<code>routes</code> 就是 <code>controller</code> 的意思，其實如果讀者本身夠了解的話，這個資料夾也可以改成 <code>controller</code> 也 ok，應該說，其實資料夾怎麼放都是看個人隨意即可，只是若是要模組化的話，筆者會這樣來處理一個專案結構。</p>

<h3><code>model</code></h3>

<p>拿來放資料庫 schema 以及相關的資料庫操作的資料夾</p>

<h3><code>node_modules</code></h3>

<p>這其實是之後安裝的模組會放在這個資料夾裡，在這邊可以先不用建立沒關係</p>

<h3><code>logs</code></h3>

<p>由於我們是建立一個 restful service，因此 log 的記錄也是很重要的，我們把 log 放在這個資料夾裡</p>

<h3><code>configs</code></h3>

<p>我們在這個資料夾裡放置一些專案設定，例如 db 設定或者是 log 的設定等等</p>

<h3><code>test</code></h3>

<p>撰寫測試程式的資料夾~</p>

<h3><code>app.js</code></h3>

<p>程式的進入點，可以想像成 index.php~</p>

<h3><code>package.json</code></h3>

<p>專案的資訊以及相關模組的資訊都會被放在這裡!</p>

<hr />

<p>其實關於專案結構有許多不同的討論，<code>express</code> 也有一個專案自動產生器，不過如果對結構內容不了解而使用產生器的話，很容易變成只知表面不知內部運作，因此我們還是一步一步來，先定義好我們專案的需求結構</p>

<p>另外，因為我們是建立 restful API service，在此並沒有用到 html 頁面，也因此就沒有 <code>view</code> 或 <code>public</code> 這兩個資料夾囉~</p>

<p>延伸閱讀:</p>

<p>我們可以透過觀摩別人的專案來參考他們的專案架構:</p>

<p><a href="http://scotch.io/tutorials/javascript/node-and-angular-to-do-app-application-organization-and-structure">Node and Angular To-Do App: Application Organization and Structure</a></p>

<p><a href="http://stackoverflow.com/questions/18789864/node-js-express-global-modules-best-practices-for-application-structure">node.js &amp; express - global modules &amp; best practices for application structure</a></p>

<p>在 Github 上的討論，非常值得一看: <a href="https://gist.github.com/lancejpollard/1398757">Github discussion</a></p>

<p>後來覺得也可以模仿 rails 的分法:</p>

<pre><code>/
| - app/
| - ----controllers/
| - ----models/
| - ----views/
| - ----helpers/
| - node_modules/
| - logs/
| - libs/
| - public/
| - config/
| - test/
| - server.js
| - package.json
</code></pre>

<p>都 OK!</p>
]]></content>
  </entry>
  
</feed>
