<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Express | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/express/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-26T23:18:49+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d26] - 實戰開發 - API-key]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/26/api-d26/"/>
    <updated>2014-10-26T23:04:04+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/26/api-d26</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day26">Github 參考</a></p>

<p>假設今天我們的 API 上線了，可能就會面臨到一些問題，</p>

<p>例如說，任何人都可以存取我們的 API</p>

<p>當然我們不希望任何人都可以存取，</p>

<p>因此我們必須加一點驗證機制在裡面，</p>

<p>其中一種做法是使用 Oauth token</p>

<p>在拿 API 資料前，先向 Oauth server 要一個 token</p>

<p>Oauth Server 認可身份後即會核發一個 token 給 client 端</p>

<p>該 token 具有時效性，6 mins ~ 30 min 不等，看怎麼實作</p>

<p>接著 client 端就拿該組 token 以及 API url 對 resources server 丟 request</p>

<p>其實我們現在在做的 API server 就是一個 resources server</p>

<p>因為我們提供資源</p>

<p>而 resources server 就會先認 token，</p>

<p>確保該 token 的時效性以及正確性，以及該 token 可存取的資源範圍</p>

<p>確認無誤後再回送正確的資料</p>

<p>不過在這邊我們並沒有要實作 Oauth Server</p>

<p>單純以一個 resources server 而言，只要認 token 是否正確</p>

<p>因此我們在這邊用 API-Key 實作即可，簡單的服務只要不被猜到就好</p>

<p>程式碼如下，記得加在 router 前面</p>

<p>app.js:</p>

<pre><code class="javascript">// Set Header Check
app.use( function(req, res, next) {
    var api_key = req.get('API-Key');

    if (api_key != "55665566") {
        res.status(401).send({ error: "Unauthorized"});
    }
    else {
        next();
    }
});
</code></pre>

<p>一樣是 middleware 的概念</p>

<p>不過是會預先作處理</p>

<p>我們接收到 request 後，分析它的 header 中是否有 <code>API-Key</code> 這個欄位</p>

<p>若有的話，確認他的值是否為 <code>55665566</code></p>

<p>若不是的話，回傳 401 Unauthorized</p>

<p>若正確則繼續走下一個 middleware</p>

<p>這樣就可以做一道簡單的防線了</p>

<p>若加了這道防線</p>

<p>在使用 POSTMAN 做 request 時，必須加入自定 header</p>

<p>沒加入的話:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%204.11.59.png" alt="image" /></p>

<p>有加入的話:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%204.12.18.png" alt="image" /></p>

<p>是不是很簡單呢!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-day25] - 實戰開發 - 處理 404 & 500]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/25/api-day25/"/>
    <updated>2014-10-25T21:46:35+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/25/api-day25</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day25">Github 參考</a></p>

<p>不知道大家在用 POSTMAN 對前幾天寫的 API 丟 request 有沒有遇過類似下面的情況:</p>

<pre><code class="javascript">Cannot GET /user/kerkerj/todoss
</code></pre>

<p>通常是丟錯網址時會出現的，或是 code 沒寫好會出現 500 error</p>

<p>這些情況是有辦法接到的，今天我們希望能夠接到後，將 message 轉成 json 格式吐回給 client</p>

<p>因此程式碼如下</p>

<p>app.js</p>

<pre><code class="javascript">// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    res.status(404).jsonp({error: "Not Found"});
    next();
});

// catch 500
app.use(function(err, req, res, next) {
            res.status(err.status || 500).json({error: err.message});
});
</code></pre>

<p>基本上這兩段 code 的意思就是加入了兩個 middleware</p>

<p>如果進來的 request 是屬於 404 or 500 就會回傳 json 格式</p>

<p>並且依錯誤碼不同而回傳不同的訊息</p>

<p>試著將 server 跑起來</p>

<p>亂丟 request 看看</p>

<p>原本應該會是</p>

<pre><code>Cannot GET /user/kerkerj/todoss
</code></pre>

<p>就會變成了 json</p>

<pre><code>{
    "error": "Not Found"
}
</code></pre>

<p>這樣一來, client 程式也就能夠統一接收 json 回傳，而不會因為莫名的字串導致解析錯誤而 crash 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d24] - 實戰開發 - 刪除 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/24/api-d24/"/>
    <updated>2014-10-24T20:42:36+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/24/api-d24</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day24">Github 參考</a></p>

<p>還記得昨天說要偷懶一下嗎 XD</p>

<p>因為刪除真的很簡單!</p>

<p>我們前面走過了新增、修改、讀取了</p>

<p>刪除？哪有什麼困難的呢! XD</p>

<p>直接看 code 吧!</p>

<p>routes/users.js:</p>

<pre><code class="javascript">// Delete a todo task
router.delete('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;

    TODO.remove(
        { _id: todo_id, user_id: user_id },
        function (err) {
            if (err) {
                res.status(400).json(
                    { error: "delete data error"}
                );
            } else {
                res.status(201).json(
                    { success: "true" }
                );
            }
        }
    );
});
</code></pre>

<p>非常的簡單!</p>

<p>先抓到 user_id, todo_id 後</p>

<p>使用 .remove 的方法，下 WHERE 條件，並在 callback 作處理</p>

<p>就完成了!</p>

<p>試試看吧!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.39.09.png" alt="image" /></p>

<p>是不是非常的簡單呢！</p>

<p>我們已經完成 CRUD API 操作了！</p>

<p>接下來幾天會稍作一些細節上的處理!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d23] - 實戰開發 - 修改 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/23/api-d23/"/>
    <updated>2014-10-23T14:59:33+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/23/api-d23</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day23">Github 參考</a></p>

<p>接上篇，我們已經可以拿到 todo list 了</p>

<p>也可以拿到特定的 todo task</p>

<p>再來我們就可以編輯特定的 todo task 了對吧?</p>

<p>不囉唆直接進入程式碼</p>

<p>routes/users.js</p>

<pre><code class="javascript">// Update a todo task
router.put('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;
    var data = req.body;

    TODO.update(
        { _id: todo_id, user_id: user_id },
        { $set: { content: data.content } },
        function (err, num, raw, results) {
            if (err) {
                res.status(400).json(
                    { error: "update data error" }
                );
            } else {
                TODO.find({ _id: todo_id, user_id: user_id }, function (err, results) {
                    res.status(201).json(
                        results[0]
                    );
                });
            }
        }
    );
});
</code></pre>

<p>這次拿資料要拿三組: user_id, todo_id, 以及 data from req.body</p>

<pre><code>var user_id = req.params.user_id;
var todo_id = req.params.todo_id;
var data = req.body;
</code></pre>

<p>body 的資料很簡單，就是欲修改的 content 的資料:</p>

<pre><code>{ "content": "想修改的資料" }
</code></pre>

<p>再來，除了是使用 .update 方法以及同樣要下 WHERE 參數外， .update 方法還多了一個參數:</p>

<pre><code>{ _id: todo_id, user_id: user_id },
{ $set: { content: data.content } },
</code></pre>

<p>$set 的意思等同於 SQL 語法中的 SET</p>

<p>如果沒有加 $set 變成下面這樣:</p>

<pre><code>{ _id: todo_id, user_id: user_id },
{ content: data.content } ,
</code></pre>

<p>整個資料就會被洗掉，變成只有 <code>{ content: data.content }</code></p>

<p>因此有沒有加 $set 差很多哦</p>

<p>後面一樣是 callback 的處理</p>

<p>都寫好後，實際開 POSTMAN 試試看吧!</p>

<p>記得要使用 <code>PUT</code> 來丟 request</p>

<p>例子如下，我把原本的 buy milk 改成 buy milk and banana</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.31.57.png" alt="image" /></p>

<p>這樣離完成 API 就不遠啦!</p>

<p>明天就稍微休息一下吧 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d22] - 實戰開發 - 讀取 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/22/api-d22/"/>
    <updated>2014-10-22T19:13:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/22/api-d22</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day22">Github 參考</a></p>

<p>如果有使用 MongoDB client 的話就可以搭配使用會比較有感覺</p>

<p>Mac 我是使用 Robomongo，算很好上手~</p>

<p>今天要來實作讀取的部分</p>

<p>讀取有分兩種，一種是讀取 list</p>

<p>另一種是讀取特定某個 todo task，今天兩種都會實作</p>

<p>首先我們先實作 get todo list</p>

<p>因為若要拿到特定的 todo task，需要 todo task 的 id</p>

<p>而我們現在還不曉得 todo task 的 id 是多少，我們只知道 user_id</p>

<p>因此就先從 list 下手</p>

<p>routes/users.js:</p>

<pre><code class="javascript">// Get todo list
router.get('/:user_id/todos', function(req, res) {
    var user_id = req.params.user_id;

    TODO.find(
        {user_id: user_id},
        function (err, results) {
            if (err) {
                res.status(400).json(
                    { error: "can not find data" }
                );
            } else {
                res.status(200).json(
                    results
                );
            }
        }
    );
});
</code></pre>

<p>上面程式碼的意思是，先抓到 uri 的 user_id</p>

<p>再來就直接進 db 找，find() 的第一個參數為:</p>

<pre><code>{user_id: user_id},
</code></pre>

<p>可以想像成是 SQL 語法中的 WHERE 條件</p>

<pre><code>SELECT * WHERE user_id = 'user_id' FROM todos
</code></pre>

<p>而 callback 則是針對 error 或 results 作處理</p>

<p>試著將 server 跑起來，然後使用 POSTMAN 丟 GET request 試試看</p>

<p>如果沒有資料，就利用昨天實作的 POST API 新增幾個吧！</p>

<p>記得 url 中輸入的 user_id 要在 DB 中有該 user 的資料才找的到資料哦</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.17.08.png" alt="images" /></p>

<p>如此一來就有 task id 了!</p>

<p>再來就來實作讀取特定 id 的 task API 吧!</p>

<p>程式碼如下</p>

<p>routes/user.js:</p>

<pre><code>// Get a todo task
router.get('/:user_id/todos/:todo_id', function(req, res) {
    var user_id = req.params.user_id;
    var todo_id = req.params.todo_id;

    TODO.find(
        { _id: todo_id, user_id: user_id},
        function (err, results) {
            if (err) {
                res.status(400).json(
                    { error: "can not find data" }
                );
            } else {
                res.status(200).json(
                    results[0]
                );
            }
        }
    );
});
</code></pre>

<p>這次更簡單了，user_id 及 todo_id 都是從 url 上取值</p>

<p>接著一樣使用 where 條件，將值帶入找資料</p>

<p>最後交給 callback 處理回傳值</p>

<p>將 server 跑起來，試著先從todo list 複製某一筆 _id 的值</p>

<p>丟到 url 中試試看</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.21.51.png" alt="image" /></p>

<p>如此一來，讀取特定 task 的 API 也完成囉!</p>
]]></content>
  </entry>
  
</feed>
