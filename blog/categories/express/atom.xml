<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Express | kerkerj]]></title>
  <link href="http://kerkerj.github.io/blog/categories/express/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-17T21:24:07+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[API-d17] - 實戰開發 - 專案結構]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/17/api-d17/"/>
    <updated>2014-10-17T21:17:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/17/api-d17</id>
    <content type="html"><![CDATA[<p>首先我們就在虛擬機的資料夾底下，建立一個專案資料夾吧!</p>

<p>今天會來簡單切割一下我們的專案目錄</p>

<h2>建立新專案目錄:</h2>

<pre><code>$ cd /vagrant/
$ mkdir TODOAPI
$ cd TODOAPI
$ npm init
// 輸入專案資訊
$ 
</code></pre>

<h2>建立專案結構</h2>

<pre><code>/
| - bin/
| - routes/
| - model/
| - node_modules/
| - logs/
| - config/
| - test/
| - app.js
| - package.json
</code></pre>

<p>分別講解一下各個 folder 的工作:</p>

<h3><code>bin</code></h3>

<p>筆者會在 <code>bin</code> 資料夾底下放一個 <code>server.js</code></p>

<p>這個 <code>server.js</code> 就是會專門用來啟動一個 <code>app.js</code> instance</p>

<h3><code>routes</code></h3>

<p>基本上如果了解 MVC 架構的話，<code>routes</code> 就是 <code>controller</code> 的意思，其實如果讀者本身夠了解的話，這個資料夾也可以改成 <code>controller</code> 也 ok，應該說，其實資料夾怎麼放都是看個人隨意即可，只是若是要模組化的話，筆者會這樣來處理一個專案結構。</p>

<h3><code>model</code></h3>

<p>拿來放資料庫 schema 以及相關的資料庫操作的資料夾</p>

<h3><code>node_modules</code></h3>

<p>這其實是之後安裝的模組會放在這個資料夾裡，在這邊可以先不用建立沒關係</p>

<h3><code>logs</code></h3>

<p>由於我們是建立一個 restful service，因此 log 的記錄也是很重要的，我們把 log 放在這個資料夾裡</p>

<h3><code>configs</code></h3>

<p>我們在這個資料夾裡放置一些專案設定，例如 db 設定或者是 log 的設定等等</p>

<h3><code>test</code></h3>

<p>撰寫測試程式的資料夾~</p>

<h3><code>app.js</code></h3>

<p>程式的進入點，可以想像成 index.php~</p>

<h3><code>package.json</code></h3>

<p>專案的資訊以及相關模組的資訊都會被放在這裡!</p>

<hr />

<p>其實關於專案結構有許多不同的討論，<code>express</code> 也有一個專案自動產生器，不過如果對結構內容不了解而使用產生器的話，很容易變成只知表面不知內部運作，因此我們還是一步一步來，先定義好我們專案的需求結構</p>

<p>另外，因為我們是建立 restful API service，在此並沒有用到 html 頁面，也因此就沒有 <code>view</code> 或 <code>public</code> 這兩個資料夾囉~</p>

<p>延伸閱讀:</p>

<p>我們可以透過觀摩別人的專案來參考他們的專案架構:</p>

<p><a href="http://scotch.io/tutorials/javascript/node-and-angular-to-do-app-application-organization-and-structure">Node and Angular To-Do App: Application Organization and Structure</a></p>

<p><a href="http://stackoverflow.com/questions/18789864/node-js-express-global-modules-best-practices-for-application-structure">node.js &amp; express - global modules &amp; best practices for application structure</a></p>

<p>在 Github 上的討論，非常值得一看: <a href="https://gist.github.com/lancejpollard/1398757">Github discussion</a></p>

<p>後來覺得也可以模仿 rails 的分法:</p>

<pre><code>/
| - app/
| - ----controllers/
| - ----models/
| - ----views/
| - ----helpers/
| - node_modules/
| - logs/
| - libs/
| - public/
| - config/
| - test/
| - server.js
| - package.json
</code></pre>

<p>都 OK!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d10] - Express - Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/10/api-d10/"/>
    <updated>2014-10-10T01:49:55+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/10/api-d10</id>
    <content type="html"><![CDATA[<h1>Express - Hello World!</h1>

<p>今天就要來安裝主角之一的 <a href="http://expressjs.com/">Express</a> 了!</p>

<p>一樣開啟虛擬機器我應該是可以不用多說了 XD</p>

<p>先確認自己的 node 是不是 NVM 的 node 喲</p>

<h2>建立專案</h2>

<pre><code>$ cd /vagrant/
$ mkdir API
$ cd API/
$ npm init
</code></pre>

<p>自己輸入專案的相關內容吧，不知道的就直接按 enter 空白丟給他~</p>

<p>就會產生 package.json 了!</p>

<h2>安裝 Express</h2>

<pre><code>// 在專案目錄底下 (/vagrant/API/)

$ npm install express -save
</code></pre>

<p>下 <code>-save</code> 的原因是要將 express 加入 package.json 中</p>

<p>離開虛擬機，其實我們也可以在虛擬機資料夾看到剛剛建立的專案了，</p>

<p>現在開始就可以使用自己喜歡的編輯器來開啟這個專案資料夾，我個人偏好使用 Sublime Text</p>

<p>要執行專案時再回終端機即可</p>

<h2>Express Hello World!</h2>

<p>在 API 資料夾中建立一個 app.js</p>

<p>內容是:</p>

<pre><code>javascript
var express = require('express');
var app = express();

app.get('/', function(req, res){
  res.send('Hello World');
});

app.listen(3000, function() {
    console.log('Listening on port %d', server.address().port);
});
</code></pre>

<p>儲存後，回到終端機，將 express 跑起來:</p>

<pre><code>vagrant@vagrant-ubuntu-trusty-64:/vagrant/API$ node app.js
Listening on port 3000
</code></pre>

<p>開啟瀏覽器，瀏覽 <code>http://192.168.33.10:3000</code> (url 視個人環境而定)</p>

<p>出現 <code>Hello World! Express!</code> 啦～～ 又一個 Hello World 啦~~</p>

<p>是不是有比 Node.js 的範例更簡潔一點呢?</p>

<p>簡單分析一下這段 code :</p>

<pre><code>// 引入 express module
var express = require('express');

// 產生一個 express instance - app
var app = express();

// Express 的重點所在! 稍後解釋
app.get('/', function(req, res){
  res.send('Hello World');
});

// 讓 express server 跑在 port 3000
app.listen(3000, function() {
    console.log('Listening on port %d', server.address().port);
});
</code></pre>

<p>以上概念基本上都和 Node.js 概念差不多</p>

<p>值得一提的是 Express 的 Routing:</p>

<pre><code>app.get('/', function(req, res){
  res.send('Hello World');
});
</code></pre>

<p>最前面有提到 HTTP 的動詞 GET, POST, PUT, DELETE &hellip;</p>

<p>在這邊就必須用上了！</p>

<p>我們可以看一下 express 的 <a href="http://expressjs.com/4x/api.html#router.VERB">API reference</a></p>

<p><code>app.get</code> 的 <code>.get</code> 就是代表 HTTP GET</p>

<p>如果後面接 <code>.post</code> 就是 HTTP POST, 等等都同樣概念</p>

<p><a href="http://expressjs.com/4x/api.html#router.VERB">API reference</a> 中提到，</p>

<pre><code>router.VERB(path, [callback...], callback)
</code></pre>

<p><code>path</code> 的意思就是要開放給 client 的路由, 透過不同的路由導向不同的動作</p>

<p>中間的 <code>[callback...]</code> 是 middleware 這個之後會再解釋</p>

<p>最後一個 callback 是用來處理 request 及 response</p>

<p>在這個例子中，client 並沒有丟參數，因此不需要對 request 作處理，</p>

<p>而 server 要回應 response</p>

<p>所以使用了 <code>res.send('Hello World');</code> 來回傳資料</p>

<p>是不是很簡單勒!</p>

<h2>專案產生器</h2>

<p>或許有人會使用 <code>express-generator</code> 來產生 expresss 專案目錄</p>

<p>雖然它很方便，一次建立好專案結構，並且安裝一些常用搭配的套件，</p>

<p>但是由於在尚未了解 express 的運作原理，</p>

<p>一開始一次建立完整我認為過快，因此先不建議這樣用，</p>

<p>當然，如果已經很熟練很了解 express 中可以使用的東西了，使用產生器當然是節省時間囉~</p>

<pre><code>$ npm install -g express-generator
$ express /tmp/foo &amp;&amp; cd /tmp/foo
</code></pre>

<p>下一篇會講解如何簡單操作 MongoDB!</p>
]]></content>
  </entry>
  
</feed>
