<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kerkerj]]></title>
  <link href="http://kerkerj.github.io/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-27T23:12:36+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Planning]]></title>
    <link href="http://kerkerj.github.io/blog/2014/11/01/planning/"/>
    <updated>2014-11-01T00:00:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/11/01/planning</id>
    <content type="html"><![CDATA[<h1>&ndash;置頂&ndash;</h1>

<p>半個月前不怕死的報名了 ithome 的<a href="http://ithelp.ithome.com.tw/ironman7/app/index">連續三十天不中斷發文鐵人賽</a>，</p>

<p>還報名了兩個主題，真的是太誇張了&hellip;</p>

<p>但是由於 ithome 的編輯器其實排版起來沒有很漂亮，</p>

<p>因此決定利用這邊先發文，再轉文到 ithome 的方式來處理，</p>

<p>比較順手一些，順便在這篇文章貼上規劃方向，topic 可能隨時會變，但大方向不變</p>

<p>第一次寫的主題都幾乎不是自己專精的技術，</p>

<p>規劃表如下： (Evernote 連結)</p>

<p><a href="https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg">https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg</a></p>

<p>因此若有錯誤也請有看到的大大們多多幫忙指正囉！</p>

<p>有時候會因為比較忙，可能文章比較精簡一些，還請大家多多包涵 :P</p>

<p>有任何文章更新也會同步在此篇文章中!</p>

<h2>RESTful API Service:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d1/">[API-d1] - 定義 1 - 什麼是 REST/RESTful?</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d2/">[API-d2] - 定義 2 - RESTful 的優點與要求</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/api-d3/">[API-d3] - 使用時機與實際 API 參考</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/api-d4/">[API-d4] - 使用技術與工具介紹及原因</a><br/>
Day5  -  <a href="http://kerkerj.github.io/blog/2014/10/05/api-d5/">[API-d5] - [Server 番外篇] 建立自己的本機虛擬伺服器 1 - Vagrant + VirtualBox 安裝</a><br/>
Day6  -  <a href="http://kerkerj.github.io/blog/2014/10/06/api-d6/">[API-d6] - [Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB </a><br/>
Day7  -  <a href="http://kerkerj.github.io/blog/2014/10/07/api-d7/">[API-d7] - [Server 番外篇] 建立自己的本機虛擬伺服器 3 - 打包環境</a><br/>
Day8  -  <a href="http://kerkerj.github.io/blog/2014/10/08/api-d8/">[API-d8] - Node.js - Hello World!</a><br/>
Day9  -  <a href="http://kerkerj.github.io/blog/2014/10/09/api-d9/">[API-d9] - NVM 與 NPM 使用</a><br/>
Day10 -  <a href="http://kerkerj.github.io/blog/2014/10/10/api-d10/">[API-d10] - Express - Hello World!</a><br/>
Day11 -  <a href="http://kerkerj.github.io/blog/2014/10/11/api-d11/">[API-d11] - MongoDB - Hello World!</a><br/>
Day12 -  <a href="http://kerkerj.github.io/blog/2014/10/12/api-d12/">[API-d12] - MongoDB - Hello World! (Client-side) </a><br/>
Day13 -  <a href="http://kerkerj.github.io/blog/2014/10/13/api-d13/">[API-d13] - [Javascript 番外篇] Javascript require/ module/ Module Pattern</a><br/>
Day14 -  <a href="http://kerkerj.github.io/blog/2014/10/14/api-d14/">[API-d14] - [Javascript 番外篇] Javascript function scopes 和 closures</a><br/>
Day15 -  <a href="http://kerkerj.github.io/blog/2014/10/15/api-d15/">[API-d15] - [Javascript 番外篇] Javascript callback, event</a><br/>
Day16 -  <a href="http://kerkerj.github.io/blog/2014/10/16/api-d16/">[API-d16] - 實戰開發 - 設定主題及規劃</a><br/>
Day17 -  <a href="http://kerkerj.github.io/blog/2014/10/17/api-d17/">[API-d17] - 實戰開發 - 專案結構</a><br/>
Day18 -  <a href="http://kerkerj.github.io/blog/2014/10/18/api-d18/">[API-d18] - 實戰開發 - 套件模組</a><br/>
Day19 -  <a href="http://kerkerj.github.io/blog/2014/10/19/api-d19/">[API-d19] - 實戰開發 - index &amp; route &amp; http status code</a><br/>
Day20 -  <a href="http://kerkerj.github.io/blog/2014/10/20/api-d20/">[API-d20] - 實戰開發 - Routes 2, get params and request data</a><br/>
Day21 -  <a href="http://kerkerj.github.io/blog/2014/10/21/api-d21/">[API-d21] - 實戰開發 - 新增 TODO task API with mongoose</a><br/>
Day22 -  <a href="http://kerkerj.github.io/blog/2014/10/22/api-d22/">[API-d22] - 實戰開發 - 讀取 TODO task API with mongoose</a><br/>
Day23 -  <a href="http://kerkerj.github.io/blog/2014/10/23/api-d23/">[API-d23] - 實戰開發 - 修改 TODO task API with mongoose</a><br/>
Day24 -  <a href="http://kerkerj.github.io/blog/2014/10/24/api-d24/">[API-d24] - 實戰開發 - 刪除 TODO task API with mongoose</a><br/>
Day25 -  <a href="http://kerkerj.github.io/blog/2014/10/25/api-day25/">[API-day25] - 實戰開發 - 處理 404 &amp; 500</a><br/>
Day26 -  <a href="http://kerkerj.github.io/blog/2014/10/26/api-d26/">[API-d26] - 實戰開發 - API-key</a><br/>
Day27 -  <a href="http://kerkerj.github.io/blog/2014/10/27/api-d27/">[API-d27] - 實戰開發 - log 處理 及 config (db, apikey)</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>

<h2>Swift:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/">[Swift-d1] - 介紹</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/">[Swift-d2] - 安裝及 Hello World!</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/">[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/">[Swift-d4] - Playground - Optional, ! and ? </a><br/>
Day5  -  <a href="http://kerkerj.github.io/blog/2014/10/05/swift-d5/">[Swift-d5] - Playground - Array, Dictionary, Controll Flow</a><br/>
Day6  -  <a href="http://kerkerj.github.io/blog/2014/10/06/swift-d6/">[Swift-d6] - Playground - function</a><br/>
Day7  -  <a href="http://kerkerj.github.io/blog/2014/10/07/swift-d7/">[Swift-d7] - Playground - Closures</a><br/>
Day8  -  <a href="http://kerkerj.github.io/blog/2014/10/08/swift-d8/">[Swift-d8] - Playground - Enumerations</a><br/>
Day9  -  <a href="http://kerkerj.github.io/blog/2014/10/09/swift-d9/">[Swift-d9] - Playground - Class, Struct</a><br/>
Day10 -  <a href="http://kerkerj.github.io/blog/2014/10/10/swift-d10/">[Swift-d10] 延伸閱讀</a><br/>
Day11 -  <a href="http://kerkerj.github.io/blog/2014/10/11/swift-d11/">[Swift-d11] - Basic - Hello World!</a><br/>
Day12 -  <a href="http://kerkerj.github.io/blog/2014/10/12/swift-d12/">[Swift-d12] - Basic - 基本元件 (Label, Button, UIColor, 文字輸入框)</a><br/>
Day13 -  <a href="http://kerkerj.github.io/blog/2014/10/13/swift-d13/">[Swift-d13] - Basic - Navigation View 1 + ViewController</a><br/>
Day14 -  <a href="http://kerkerj.github.io/blog/2014/10/14/swift-d14/">[Swift-d14] - Basic - Navigation View 2 + ViewController</a><br/>
Day15 -  <a href="http://kerkerj.github.io/blog/2014/10/15/swift-d15/">[Swift-d15] - Basic - Table View 1 直接給值 datasource, (table view scroll)</a><br/>
Day16 -  <a href="http://kerkerj.github.io/blog/2014/10/16/swift-d16/">[Swift-d16] - Basic - Table View 2 換頁 (delegate)</a><br/>
Day17 -  <a href="http://kerkerj.github.io/blog/2014/10/17/swift-d17/">[Swift-d17] - Basic - Navigation View + TableView</a><br/>
Day18 -  <a href="http://kerkerj.github.io/blog/2014/10/18/swift-d18/">[Swift-d18] - Basic - Customize TableViewCell</a><br/>
Day19 -  <a href="http://kerkerj.github.io/blog/2014/10/19/swift-d19/">[Swift-d19] - Basic - 橋接第三方 Objc library - Reachability and Bridge.h</a><br/>
Day20 -  <a href="http://kerkerj.github.io/blog/2014/10/20/swift-d20/">[Swift-d20] - Basic - 捨棄 Storyboard 使用純程式碼 的方式撰寫 ViewController</a><br/>
Day21 -  <a href="http://kerkerj.github.io/blog/2014/10/21/swift-d21/">[Swift-d21] - 實戰開發 - TODOList - 前置設定</a><br/>
Day22 -  <a href="http://kerkerj.github.io/blog/2014/10/22/swift-d22/">[Swift-d22] - 實戰開發 - TODOList - Show View 1</a><br/>
Day23 -  <a href="http://kerkerj.github.io/blog/2014/10/23/swift-d23/">[Swift-d23] - 實戰開發 - TODOList - Show View 2, Delete View</a><br/>
Day24 -  <a href="http://kerkerj.github.io/blog/2014/10/24/swift-d24/">[Swift-d24] - 實戰開發 - TODOList - Create View</a><br/>
Day25 -  <a href="http://kerkerj.github.io/blog/2014/10/25/swift-day25/">[Swift-day25] - 實戰開發 - TODOList - Update View</a><br/>
Day26 -  <a href="http://kerkerj.github.io/blog/2014/10/26/swift-d26/">[Swift-d26] - 實戰開發 - TODOList - API 前置資料準備</a><br/>
Day27 -  <a href="http://kerkerj.github.io/blog/2014/10/27/swift-d27/">[Swift-d27] - 實戰開發 - TODOList - API 2 讀取清單資料</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d27] - 實戰開發 - TODOList - API 2 讀取清單資料]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/27/swift-d27/"/>
    <updated>2014-10-27T23:00:04+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/27/swift-d27</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day27">Github link</a></p>

<p>(某一天把兩天份的 commit 在一起了忘了開 branch 了&hellip;)</p>

<p>接下來就要來寫 api utility 了</p>

<p>我們先開一個 swift 檔案 <code>RestApi.swift</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">Foundation</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">RestApi</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">API_key</span> <span class="o">=</span> <span class="s">&quot;55665566&quot;</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">getListUrl</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;http://192.168.1.158:3000/user/kerkerj/todos&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先做好前置設定，因為 API 有上簡單的小鎖，因此要先寫起來</p>

<p>還有 request 的網址</p>

<p>以下是 get list 的範例:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">getTodoList</span><span class="p">(</span><span class="nl">completionHandler</span><span class="p">:</span> <span class="p">((</span><span class="bp">NSArray</span><span class="o">!</span><span class="p">,</span> <span class="bp">NSError</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">session</span> <span class="o">=</span> <span class="bp">NSURLSession</span><span class="p">.</span><span class="n">sharedSession</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">request</span> <span class="o">=</span> <span class="bp">NSMutableURLRequest</span><span class="p">(</span><span class="nl">URL</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">getListUrl</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">HTTPMethod</span> <span class="o">=</span> <span class="s">&quot;GET&quot;</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">addValue</span><span class="p">(</span><span class="s">&quot;application/json&quot;</span><span class="p">,</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span> <span class="s">&quot;Content-Type&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">request</span><span class="p">.</span><span class="n">addValue</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">API_key</span><span class="p">,</span> <span class="nl">forHTTPHeaderField</span><span class="p">:</span> <span class="s">&quot;API-Key&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">task</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">dataTaskWithRequest</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="nl">completionHandler</span><span class="p">:</span> <span class="p">{</span><span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">completionHandler</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">var</span> <span class="nl">error</span><span class="p">:</span> <span class="bp">NSError</span><span class="o">?</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">NSJSONReadingOptions</span><span class="p">.</span><span class="n">MutableContainers</span><span class="p">,</span> <span class="nl">error</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">error</span><span class="p">)</span> <span class="kt">as</span> <span class="bp">NSArray</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">completionHandler</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">completionHandler</span><span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們使用內建的 NSURLSession.sharedSession 以及 NSMutableURLRequest 來建立 request</p>

<p>裡面就是設定一些 header 以及 API-Key</p>

<p>另外在資料回來後，return callback</p>

<p>在這邊有 async，寫隔壁棚的 api 回過頭來看這個感覺很熟悉 XD</p>

<p>設定好 API 後</p>

<p>回到顯示 todo 清單的主頁程式碼</p>

<p>由於我們希望能夠在 view 每次被呼叫時，都可以對 API server 做存取</p>

<p>因此必須要將 getTodoList 寫在該方法裏</p>

<p>該方法為 override func viewWillAppear(animated: Bool) {}</p>

<p>先建立一個 api 物件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">api</span><span class="p">:</span> <span class="n">RestApi</span> <span class="o">=</span> <span class="n">RestApi</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>將原本的假資料刪除或註解, 不過資料物件名稱就繼續用 fakeData XD</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//        fakeData = [</span>
</span><span class='line'><span class="c1">//            [&quot;id&quot;: &quot;1&quot;, &quot;content&quot;: &quot;A&quot;],</span>
</span><span class='line'><span class="c1">//            [&quot;id&quot;: &quot;2&quot;, &quot;content&quot;: &quot;B&quot;],</span>
</span><span class='line'><span class="c1">//            [&quot;id&quot;: &quot;3&quot;, &quot;content&quot;: &quot;C&quot;],</span>
</span><span class='line'><span class="c1">//        ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著在 ViewController override 一個 viewWillAppear 的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewWillAppear</span><span class="p">(</span><span class="nl">animated</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewWillAppear</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">api</span><span class="p">.</span><span class="n">getTodoList</span><span class="p">({</span><span class="n">data</span><span class="p">,</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="bp">UIAlertView</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">alert</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;Yoooooooooooooooo&quot;</span>
</span><span class='line'>                    <span class="n">alert</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;Get list faild, maybe check your network: \(error)&quot;</span>
</span><span class='line'>                    <span class="n">alert</span><span class="p">.</span><span class="n">addButtonWithTitle</span><span class="p">(</span><span class="s">&quot;ok&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">alert</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>                    <span class="n">alert</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">println</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">var</span> <span class="n">tmpArr</span> <span class="o">=</span> <span class="p">[[</span><span class="nl">String</span><span class="p">:</span> <span class="n">String</span><span class="p">]]()</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">data</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">var</span> <span class="n">_id</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&quot;_id&quot;</span><span class="p">]</span> <span class="kt">as</span> <span class="n">String</span>
</span><span class='line'>                    <span class="k">var</span> <span class="n">content</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="s">&quot;content&quot;</span><span class="p">]</span> <span class="kt">as</span> <span class="n">String</span>
</span><span class='line'>                    <span class="k">var</span> <span class="n">dic</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span> <span class="n">String</span><span class="p">]()</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">dic</span><span class="p">[</span><span class="s">&quot;_id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_id</span>
</span><span class='line'>                    <span class="n">dic</span><span class="p">[</span><span class="s">&quot;content&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>
</span><span class='line'>                    <span class="n">tmpArr</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">arr</span> <span class="o">=</span> <span class="n">tmpArr</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">println</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// must be &quot;tableView!&quot; not &quot;tableView?&quot;</span>
</span><span class='line'>                    <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">!</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// must be &quot;tableView!&quot; not &quot;tableView?&quot;</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">!</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上方法都是 async 的方式</p>

<p>只要網路錯誤，就會直接跳一個 alert</p>

<p>若有資料的話就 parse</p>

<p>一併轉換成原本定義的 [[String: String]] 中</p>

<p>執行看看吧!</p>

<p>很明顯每次切回主頁時 api console 都會跳一行 request~</p>

<p>如果使用 sync 的方式就會卡很久! 而且更新 UI 還會 crash XD</p>

<p>我覺得這部分是需要好好去做處理的，在這邊的程式碼只是簡單 demo</p>

<p>並沒有考慮到太多 :P</p>

<p>明天繼續!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d27] - 實戰開發 - Log 處理 及 Config (Db, Apikey)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/27/api-d27/"/>
    <updated>2014-10-27T23:00:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/27/api-d27</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day27">Github 參考</a></p>

<h2>log 處理</h2>

<p>今天要來談談 log 的處理，</p>

<p>身為一台自走 (?) node.js API server</p>

<p>也應該要記錄一下 request 的 log 呀！</p>

<p>不然哪天出問題了都不知道是哪個 request 把 server 搞掛了!</p>

<p>因此我們就要加入 log 的 middleware</p>

<p>node.js 的 log 套件也蠻多的, 例如 <code>winston</code></p>

<p>不過我們今天要用的是 <code>log4js</code></p>

<p>會選擇他其實也只是因為之前寫 <code>java</code> 有用過 <code>log4j</code></p>

<p><code>log4js</code> 的設定感覺起來比較相似</p>

<p>所以就使用它了!</p>

<p>再來我們就安裝一下 <code>log4js</code> 吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">log4js</span> <span class="o">-</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>並在 <code>app.js</code> 中 require 進去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">log4js</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;log4js&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著在 <code>app.js</code> 的前面區段加入以下程式碼:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">log4js</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">appenders</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;console&#39;</span> <span class="p">},</span> <span class="c1">//控制台輸出</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="c1">//文件輸出</span>
</span><span class='line'>            <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;logs/access.log&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">maxLogSize</span><span class="o">:</span> <span class="mi">20000000</span><span class="p">,</span> <span class="c1">// 20 MB</span>
</span><span class='line'>            <span class="nx">backups</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;normal&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nx">replaceConsole</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">log4js</span><span class="p">.</span><span class="nx">getLogger</span><span class="p">(</span><span class="s1">&#39;normal&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">logger</span><span class="p">.</span><span class="nx">setLevel</span><span class="p">(</span><span class="s1">&#39;INFO&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">log4js</span><span class="p">.</span><span class="nx">connectLogger</span><span class="p">(</span><span class="nx">logger</span><span class="p">,</span> <span class="p">{</span><span class="nx">level</span><span class="o">:</span> <span class="s1">&#39;auto&#39;</span><span class="p">,</span> <span class="nx">format</span><span class="o">:</span><span class="s1">&#39;:method :url&#39;</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>其實註解已經可以看出一些端倪了</p>

<p>使用 <code>log4js</code> 可以輸出 log 檔案，並且會按照設定的檔案大小來寫入</p>

<p>如果達到 20MB 就會換一個新的檔案寫入，原本的還保留著，不過最多只會保留 10 份</p>

<p>接著就設定 log level, 以及想要 log 的資訊</p>

<p>詳細資訊就可以再多查詢一下</p>

<p>此時我們將 server run 起來吧!</p>

<p>並且對 server 戳幾個 request, 就會發現 log 檔案被建立起來了!</p>

<p>(該程式碼加在 token 檢查前或檢查後是有差異的，加在 token 檢查後面，token error 的話則不會被記錄到 log 裡面)</p>

<p>打開 log 檔看看，就會發現有 log 被寫入囉!</p>

<h2>config (db, apikey)</h2>

<p>有些重要的設定檔其實我們並不希望寫在程式碼裡，這時候 config 的設定很有用</p>

<p>建立設定檔有很多種方式，比方說直接寫一個 json 檔案，或是 xml 檔案</p>

<p>今天我們就用最簡單的 js 檔案的方式來建立 config 檔</p>

<p>我們在 config 資料夾裡新增一個 config.js</p>

<p>我們以下面的程式碼當作例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;base_url&quot;</span><span class="o">:</span> <span class="s2">&quot;http://localhost:3000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test_token&quot;</span><span class="o">:</span> <span class="s2">&quot;55665566&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;db&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;production&quot;</span><span class="o">:</span> <span class="s2">&quot;mongodb://192.168.33.10:27017/TODOs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;development&quot;</span><span class="o">:</span> <span class="s2">&quot;mongodb://192.168.33.10:27017/DEV_TODOs&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;mongodb://192.168.33.10:27017/TEST_TODOs&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>要怎麼使用裡面的內容呢?</p>

<p>假設我們要將 db 的連結改成用 config 的方式連結的話:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./config/config&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set DB</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">db</span><span class="p">.</span><span class="nx">development</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要先將 config require 進來，然後就直接使用它就好了!</p>

<p>這樣就可以幫助我們將一些重要的設定從程式碼中抽離出來了!</p>

<p>今天就這樣啦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d26] - 實戰開發 - TODOList - API 前置資料準備]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/26/swift-d26/"/>
    <updated>2014-10-26T23:04:09+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/26/swift-d26</id>
    <content type="html"><![CDATA[<p>接下來是要串 <a href="http://ithelp.ithome.com.tw/ironman7/app/profile/20091343/dev">隔壁棚的 API</a> XD</p>

<p>從前幾天的 APP 組成</p>

<p>我們所需要的資料大概會是以下幾種:</p>

<ul>
<li>GET todo list</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">GET</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//192.168.1.158:3000/user/kerkerj/todos</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span><span class="o">:</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;_id&quot;</span><span class="o">:</span> <span class="s">&quot;54441f64d84f1ea412db855c&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;updated_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:28.797Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;created_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:28.797Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;task11syy&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;user_id&quot;</span><span class="o">:</span> <span class="s">&quot;kerkerj&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;__v&quot;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;_id&quot;</span><span class="o">:</span> <span class="s">&quot;54441f6fd84f1ea412db855e&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;updated_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:39.957Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;created_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:39.957Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;task13&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;user_id&quot;</span><span class="o">:</span> <span class="s">&quot;kerkerj&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;__v&quot;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Get a todo task</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">GET</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//192.168.1.158:3000/user/kerkerj/todos/54441f64d84f1ea412db855c</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span><span class="o">:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;_id&quot;</span><span class="o">:</span> <span class="s">&quot;54441f64d84f1ea412db855c&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;updated_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:28.797Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;created_at&quot;</span><span class="o">:</span> <span class="s">&quot;2014-10-19T20:30:28.797Z&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;task11syy&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;user_id&quot;</span><span class="o">:</span> <span class="s">&quot;kerkerj&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;__v&quot;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add a todo task</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">POST</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//192.168.1.158:3000/user/kerkerj/todos/</span>
</span><span class='line'><span class="nl">data</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;your data&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span><span class="o">:</span> <span class="n">the</span> <span class="n">data</span> <span class="n">you</span> <span class="n">sent</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Update a todo task</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">PUT</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//192.168.1.158:3000/user/kerkerj/todos/</span>
</span><span class='line'><span class="nl">data</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;your data&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span><span class="o">:</span> <span class="n">the</span> <span class="n">data</span> <span class="n">you</span> <span class="n">sent</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Delete a todo task</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">DELETE</span> <span class="nl">http</span><span class="p">:</span><span class="c1">//192.168.1.158:3000/user/kerkerj/todos/54441f64d84f1ea412db855c</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span>
</span><span class='line'><span class="p">{</span><span class="s">&quot;success&quot;</span><span class="o">:</span> <span class="s">&quot;true&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>從以上資料可以知道</p>

<p>最重要的欄位就是 _id, user_id, content</p>

<p>user_id 我們在 app 中就直接寫死了</p>

<p>所以最重要的就是 content 及 _id</p>

<p>今天先允許我偷懶一下，明天就要開始寫 api utility 給 swift 用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d26] - 實戰開發 - API-key]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/26/api-d26/"/>
    <updated>2014-10-26T23:04:04+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/26/api-d26</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day26">Github 參考</a></p>

<p>假設今天我們的 API 上線了，可能就會面臨到一些問題，</p>

<p>例如說，任何人都可以存取我們的 API</p>

<p>當然我們不希望任何人都可以存取，</p>

<p>因此我們必須加一點驗證機制在裡面，</p>

<p>其中一種做法是使用 Oauth token</p>

<p>在拿 API 資料前，先向 Oauth server 要一個 token</p>

<p>Oauth Server 認可身份後即會核發一個 token 給 client 端</p>

<p>該 token 具有時效性，6 mins ~ 30 min 不等，看怎麼實作</p>

<p>接著 client 端就拿該組 token 以及 API url 對 resources server 丟 request</p>

<p>其實我們現在在做的 API server 就是一個 resources server</p>

<p>因為我們提供資源</p>

<p>而 resources server 就會先認 token，</p>

<p>確保該 token 的時效性以及正確性，以及該 token 可存取的資源範圍</p>

<p>確認無誤後再回送正確的資料</p>

<p>不過在這邊我們並沒有要實作 Oauth Server</p>

<p>單純以一個 resources server 而言，只要認 token 是否正確</p>

<p>因此我們在這邊用 API-Key 實作即可，簡單的服務只要不被猜到就好</p>

<p>程式碼如下，記得加在 router 前面</p>

<p>app.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Set Header Check</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">api_key</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;API-Key&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">api_key</span> <span class="o">!=</span> <span class="s2">&quot;55665566&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>一樣是 middleware 的概念</p>

<p>不過是會預先作處理</p>

<p>我們接收到 request 後，分析它的 header 中是否有 <code>API-Key</code> 這個欄位</p>

<p>若有的話，確認他的值是否為 <code>55665566</code></p>

<p>若不是的話，回傳 401 Unauthorized</p>

<p>若正確則繼續走下一個 middleware</p>

<p>這樣就可以做一道簡單的防線了</p>

<p>若加了這道防線</p>

<p>在使用 POSTMAN 做 request 時，必須加入自定 header</p>

<p>沒加入的話:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%204.11.59.png" alt="image" /></p>

<p>有加入的話:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%204.12.18.png" alt="image" /></p>

<p>是不是很簡單呢!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-day25] - 實戰開發 - TODOList - Update View]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/25/swift-day25/"/>
    <updated>2014-10-25T21:46:40+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/25/swift-day25</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day27">Github link</a></p>

<p>(忘了是放在哪個 branch 了 Orz)</p>

<p>接下來就要進到最後一個 Update View 了!</p>

<p>什麼時候會進到 Update View 呢？</p>

<p>是在顯示單筆 TODO 的時候的右上方按鈕:</p>

<p><img src="http://goo.gl/tNOyRs" alt="image" /></p>

<p>我們今天只會實作 view 的部分, fakeData 就不實作了</p>

<p>因為接下來就要直接接 API 啦</p>

<p>也不需要更新 fakeData 了 :P</p>

<p>要加入 Edit 這個按鈕</p>

<p>要到 ShowViewController, 加入 UIBarButtonItem</p>

<p>並且讓其吃到一個方法，可以讓 Navigation 往下一個 View 前進:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">indexLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;\(index)&quot;</span>
</span><span class='line'>        <span class="n">contentLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="bp">UIBarButtonItem</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Edit&quot;</span><span class="p">,</span> <span class="nl">style</span><span class="p">:</span> <span class="n">UIBarButtonItemStyle</span><span class="p">.</span><span class="n">Bordered</span><span class="p">,</span> <span class="nl">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;editTodo&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>p.s. 先前忘記加了 id, 現在補回來 XD</p>

<p>先新增一個 Edit 按鈕後</p>

<p>並實作 editTodo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">editTodo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">editViewContronller</span> <span class="o">=</span> <span class="n">UpdateViewController</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="s">&quot;UpdateViewController&quot;</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">editViewContronller</span><span class="p">.</span><span class="n">from</span> <span class="o">=</span> <span class="s">&quot;edit&quot;</span>
</span><span class='line'>        <span class="n">editViewContronller</span><span class="p">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>        <span class="n">editViewContronller</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">index</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">editViewContronller</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於要先指定資料</p>

<p>因此再到 UpdateViewController 中再加入兩個參數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">index</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'><span class="k">var</span> <span class="nl">content</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後在 UpdateController 的 viewDidLoad 中, 加入 add or edit 的判斷</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="bp">UIBarButtonItem</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Save&quot;</span><span class="p">,</span> <span class="nl">style</span><span class="p">:</span> <span class="n">UIBarButtonItemStyle</span><span class="p">.</span><span class="n">Done</span><span class="p">,</span> <span class="nl">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;save&quot;</span><span class="p">))</span>
</span><span class='line'>          
</span><span class='line'>        <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">from</span> <span class="o">==</span> <span class="s">&quot;edit&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">content</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這時候先前設定的 &ldquo;from&rdquo; 參數就很有用了~</p>

<p>就可以根據是從 add 的 view 來的或者是 edit 的 view 來的</p>

<p>以便判定要不要 append 舊資料上去</p>

<p>此外，也因為如此</p>

<p>所以 UpdateViewController 的 save 方法也要判斷</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">if</span> <span class="n">from</span> <span class="o">==</span> <span class="s">&quot;add&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="p">.</span><span class="n">addData</span><span class="p">(</span><span class="s">&quot;g6&quot;</span><span class="p">,</span> <span class="nl">content</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">popToRootViewControllerAnimated</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">from</span> <span class="o">==</span> <span class="s">&quot;edit&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;Save edited data&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不過因為今天我們不做資料更新</p>

<p>因此流程面大致上到此告一個段落</p>

<p>接下來就要串 API 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-day25] - 實戰開發 - 處理 404 & 500]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/25/api-day25/"/>
    <updated>2014-10-25T21:46:35+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/25/api-day25</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day25">Github 參考</a></p>

<p>不知道大家在用 POSTMAN 對前幾天寫的 API 丟 request 有沒有遇過類似下面的情況:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cannot</span> <span class="nx">GET</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">kerkerj</span><span class="o">/</span><span class="nx">todoss</span>
</span></code></pre></td></tr></table></div></figure>


<p>通常是丟錯網址時會出現的，或是 code 沒寫好會出現 500 error</p>

<p>這些情況是有辦法接到的，今天我們希望能夠接到後，將 message 轉成 json 格式吐回給 client</p>

<p>因此程式碼如下</p>

<p>app.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// catch 404 and forward to error handler</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">err</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="mi">404</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">jsonp</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;Not Found&quot;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// catch 500</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">status</span> <span class="o">||</span> <span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="nx">error</span><span class="o">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本上這兩段 code 的意思就是加入了兩個 middleware</p>

<p>如果進來的 request 是屬於 404 or 500 就會回傳 json 格式</p>

<p>並且依錯誤碼不同而回傳不同的訊息</p>

<p>試著將 server 跑起來</p>

<p>亂丟 request 看看</p>

<p>原本應該會是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Cannot</span> <span class="nx">GET</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="nx">kerkerj</span><span class="o">/</span><span class="nx">todoss</span>
</span></code></pre></td></tr></table></div></figure>


<p>就會變成了 json</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;error&quot;</span><span class="o">:</span> <span class="s2">&quot;Not Found&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣一來, client 程式也就能夠統一接收 json 回傳，而不會因為莫名的字串導致解析錯誤而 crash 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d24] - 實戰開發 - TODOList - Create View]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/24/swift-d24/"/>
    <updated>2014-10-24T20:42:41+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/24/swift-d24</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day24">Github link</a></p>

<p>今天要來建立 &ldquo;新增資料&rdquo; 的頁面</p>

<p>不過這個頁面我們也會拿來給 &ldquo;更新資料&rdquo; 的頁面使用</p>

<p>原因其實很簡單</p>

<p>兩邊要建立或編輯的資料是一樣的</p>

<p>差別只在於，當今天是編輯資料的 view call 該頁面時，</p>

<p>該頁面除了顯示編輯框外，編輯框內的文字也會預先 load 好舊的資料了</p>

<p>除此之外兩個 view 的排版一模一樣</p>

<p>所以在這邊我們就只建立一個 UpdateViewController 就可以了</p>

<p>那我們一樣建立一組 UpdateViewController.swift + UpdateViewController.xib</p>

<p>也一樣為元件建立關聯</p>

<p><img src="http://goo.gl/4AO4G0" alt="image" /></p>

<p>回到主頁</p>

<p>我們幫 Add 新增一個按鈕吧</p>

<p>在 viewDidLoad 中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="bp">UIBarButtonItem</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Add&quot;</span><span class="p">,</span> <span class="nl">style</span><span class="p">:</span> <span class="n">UIBarButtonItemStyle</span><span class="p">.</span><span class="n">Done</span><span class="p">,</span> <span class="nl">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;pushToAddTODO&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定 Navigation 的右邊鍵的功能</p>

<p>並且根據 pushToAddTODO 的方法做事情</p>

<p>因此繼續下去將 pushToAddTODO 方法做一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">pushToAddTODO</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">addViewController</span> <span class="o">=</span> <span class="n">UpdateViewController</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="s">&quot;UpdateViewController&quot;</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addViewController</span><span class="p">.</span><span class="n">from</span> <span class="o">=</span> <span class="s">&quot;add&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">addViewController</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣寫完後就可以執行看看了!</p>

<p>剩下的任務就是將資料寫進 fakeData 不過考慮到之後我們是使用 API</p>

<p>因此就先不特別作 ShowViewController 的資料傳遞</p>

<p>再來就做 create view 裡面的 save 按鈕!</p>

<p>接著就要到 UpdateViewController</p>

<p>幫 NavigationController 再多加一個右邊按鈕 &ldquo;Save&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">UpdateViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">from</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'>    <span class="p">@</span><span class="kt">IBOutlet</span> <span class="k">var</span> <span class="nl">textField</span><span class="p">:</span> <span class="bp">UITextField</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="bp">UIBarButtonItem</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Save&quot;</span><span class="p">,</span> <span class="nl">style</span><span class="p">:</span> <span class="n">UIBarButtonItemStyle</span><span class="p">.</span><span class="n">Done</span><span class="p">,</span> <span class="nl">target</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">action</span><span class="p">:</span> <span class="n">Selector</span><span class="p">(</span><span class="s">&quot;save&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">save</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">popToRootViewControllerAnimated</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>整個程式碼都不難, 只有簡單處理 push/pop 的問題而已!</p>

<p>如果我們要加上對 ViewController 的 fakeData 做存取的話，請看以下：</p>

<p>由於需要資料傳遞，因此就必須寫 protocol</p>

<p>protocol 可簡單可複雜，今天會寫非常簡單版!</p>

<p>首先先新建一個 swift 檔案, 名為 TodoProtocol.swift</p>

<p>內容如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">UpdateTODOlistDelegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">addData</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">content</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著到 UpdateViewController 中新建一個變數 屬於 UpdateTODOlistDelegate protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">delegate</span><span class="p">:</span> <span class="n">UpdateTODOlistDelegate</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>並且設定 save 後的行為，會呼叫 protocol 中的</p>

<p><code>addData(id: String, content: String)</code></p>

<p>將欲新增的 id, content 都丟給該方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">save</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// &quot;id&quot; 在這邊是直接給死的</span>
</span><span class='line'>        <span class="n">delegate</span><span class="p">.</span><span class="n">addData</span><span class="p">(</span><span class="s">&quot;67&quot;</span><span class="p">,</span> <span class="nl">content</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">popToRootViewControllerAnimated</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著只要在主頁的程式碼中時做 protocol, 設定接到參數後的動作</p>

<p>就可以在接到參數後，將資料寫入 fakeData 了!</p>

<p>回到主頁的程式碼，class 必須先繼承 protocol，再實作</p>

<p>設定繼承後, 實作 addData, 將接到的資料寫入 fakeData:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">addData</span><span class="p">(</span><span class="kt">id</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">content</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">fakeData</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="kt">id</span><span class="p">,</span> <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="n">content</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// must be &quot;tableView!&quot; not &quot;tableView?&quot;</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">!</span><span class="p">.</span><span class="n">reloadData</span><span class="p">()</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>記得將 addViewController 的 delegate 設定成 self</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">pushToAddTODO</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">addViewController</span> <span class="o">=</span> <span class="n">UpdateViewController</span><span class="p">(</span><span class="nl">nibName</span><span class="p">:</span> <span class="s">&quot;UpdateViewController&quot;</span><span class="p">,</span> <span class="nl">bundle</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">addViewController</span><span class="p">.</span><span class="n">from</span> <span class="o">=</span> <span class="s">&quot;add&quot;</span>
</span><span class='line'>        <span class="n">addViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span><span class="o">?</span><span class="p">.</span><span class="n">pushViewController</span><span class="p">(</span><span class="n">addViewController</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行起來就可以增加資料到 fakeData 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d24] - 實戰開發 - 刪除 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/24/api-d24/"/>
    <updated>2014-10-24T20:42:36+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/24/api-d24</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day24">Github 參考</a></p>

<p>還記得昨天說要偷懶一下嗎 XD</p>

<p>因為刪除真的很簡單!</p>

<p>我們前面走過了新增、修改、讀取了</p>

<p>刪除？哪有什麼困難的呢! XD</p>

<p>直接看 code 吧!</p>

<p>routes/users.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Delete a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">todo_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">TODO</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span> <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;delete data error&quot;</span><span class="p">}</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;true&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>非常的簡單!</p>

<p>先抓到 user_id, todo_id 後</p>

<p>使用 .remove 的方法，下 WHERE 條件，並在 callback 作處理</p>

<p>就完成了!</p>

<p>試試看吧!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.39.09.png" alt="image" /></p>

<p>是不是非常的簡單呢！</p>

<p>我們已經完成 CRUD API 操作了！</p>

<p>接下來幾天會稍作一些細節上的處理!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d23] - 實戰開發 - TODOList - Show View 2, Delete View]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/23/swift-d23/"/>
    <updated>2014-10-23T14:59:37+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/23/swift-d23</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day23">Github link</a></p>

<p>延續昨天，接下來要做換頁</p>

<p>因此我們必須先新建立一個 ShowViewController, 以及他的 xib</p>

<p>接著我們在 xib 拉幾個元件: 兩個 label, 一個用來顯示目前的 index, 另一個則是顯示內容</p>

<p>拉好後，將這兩個元件設定連結到 ShowViewController.swift</p>

<p><img src="http://goo.gl/XPjBik" alt="image" /></p>

<p>另外多在 ShowViewController 中放兩個變數</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var index: Int!
</span><span class='line'>var content: String!</span></code></pre></td></tr></table></div></figure>


<p>回到 ViewController, 到 tableView didSelectRowAtIndexPath 中</p>

<p>因為 didSelectRowAtIndexPath 的意思就是當 cell 被選取時要做什麼事情</p>

<p>因此當 cell 被選取時，我們就要讓他跳到下一頁，並且是使用 ShowViewController 來顯示資料</p>

<p>因此修改此方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
</span><span class='line'>    var showViewController = ShowViewController(nibName: "ShowViewController", bundle: nil)
</span><span class='line'>    showViewController.index = indexPath.row
</span><span class='line'>    showViewController.content = fakeData[indexPath.row]["content"]
</span><span class='line'>    
</span><span class='line'>    // 回復非選取狀態
</span><span class='line'>    tableView.deselectRowAtIndexPath(indexPath, animated: true)
</span><span class='line'>    self.navigationController?.pushViewController(showViewController, animated: true)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>最後在 ShowViewController 中的 viewDidLoad 加入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    indexLabel.text = "\(index)"
</span><span class='line'>    contentLabel.text = content</span></code></pre></td></tr></table></div></figure>


<p>這樣一來在 ShowViewController 被建立時，顯示的 label 就會將上一個 view 設定的 index, content 的值顯示出來了</p>

<p>執行看看!</p>

<p><img src="http://goo.gl/Uib0IA" alt="image" /></p>

<p>這樣 Show 的部分就完成了!</p>

<p>接著我們回到主頁</p>

<p>要來建立將 cell 向左滑可以刪除的事件，這是 iOS 內建的事件，</p>

<p>因此建立方法也很簡單:</p>

<p>一樣是覆寫 tableView 的方法</p>

<p>要讓 tableView 可以編輯 row - canEditRowAtIndexPath</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func tableView(tableView: UITableView, canEditRowAtIndexPath indexPath: NSIndexPath) -&gt; Bool {
</span><span class='line'>    return true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>按下確認刪除後的行為 - 我們在這邊實際上是刪除 fakeData 的值</p>

<p>所以只要 App 重開後就又會回到三筆資料了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
</span><span class='line'>
</span><span class='line'>    self.fakeData.removeAtIndex(indexPath.row)
</span><span class='line'>    
</span><span class='line'>    dispatch_async(dispatch_get_main_queue(), {
</span><span class='line'>        // must be "tableView!" not "tableView?"
</span><span class='line'>        self.tableView!.reloadData()
</span><span class='line'>    })
</span><span class='line'>
</span><span class='line'>    let alert = UIAlertView()
</span><span class='line'>    alert.title = "Alert"
</span><span class='line'>    alert.message = "Deleted!"
</span><span class='line'>    alert.addButtonWithTitle("Ok")
</span><span class='line'>    alert.show()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>這樣我們就有顯示單筆以及顯示多筆還有刪除可以用了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d23] - 實戰開發 - 修改 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/23/api-d23/"/>
    <updated>2014-10-23T14:59:33+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/23/api-d23</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day23">Github 參考</a></p>

<p>接上篇，我們已經可以拿到 todo list 了</p>

<p>也可以拿到特定的 todo task</p>

<p>再來我們就可以編輯特定的 todo task 了對吧?</p>

<p>不囉唆直接進入程式碼</p>

<p>routes/users.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Update a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">todo_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">TODO</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">content</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">num</span><span class="p">,</span> <span class="nx">raw</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;update data error&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">TODO</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                        <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>這次拿資料要拿三組: user_id, todo_id, 以及 data from req.body</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">todo_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>body 的資料很簡單，就是欲修改的 content 的資料:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;content&quot;</span><span class="o">:</span> <span class="s2">&quot;想修改的資料&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再來，除了是使用 .update 方法以及同樣要下 WHERE 參數外， .update 方法還多了一個參數:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">$set</span><span class="o">:</span> <span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">content</span> <span class="p">}</span> <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>$set 的意思等同於 SQL 語法中的 SET</p>

<p>如果沒有加 $set 變成下面這樣:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span> <span class="p">},</span>
</span><span class='line'><span class="p">{</span> <span class="nx">content</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">content</span> <span class="p">}</span> <span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>整個資料就會被洗掉，變成只有 <code>{ content: data.content }</code></p>

<p>因此有沒有加 $set 差很多哦</p>

<p>後面一樣是 callback 的處理</p>

<p>都寫好後，實際開 POSTMAN 試試看吧!</p>

<p>記得要使用 <code>PUT</code> 來丟 request</p>

<p>例子如下，我把原本的 buy milk 改成 buy milk and banana</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.31.57.png" alt="image" /></p>

<p>這樣離完成 API 就不遠啦!</p>

<p>明天就稍微休息一下吧 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d22] - 實戰開發 - TODOList - Show View 1]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/22/swift-d22/"/>
    <updated>2014-10-22T19:13:04+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/22/swift-d22</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day22">Github link</a></p>

<p>接著我們要讓主頁顯示一些假資料:</p>

<p>由於我們未來接的 api 的資料會是 todo_id + content</p>

<p>因此我們先產生一個 dictionary array 來存放我們的假資料</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">fakeData</span> <span class="o">=</span> <span class="p">[[</span><span class="nl">String</span><span class="p">:</span><span class="n">String</span><span class="p">]]()</span>
</span><span class='line'><span class="n">fakeData</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;A&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;B&quot;</span><span class="p">],</span>
</span><span class='line'>  <span class="p">[</span><span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;3&quot;</span><span class="p">,</span> <span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="s">&quot;C&quot;</span><span class="p">],</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>再來對主頁的 controller 新增 tableView 上去</p>

<p>並且對 UITableView 加入 delegate 以及 datasource</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span><span class="p">,</span> <span class="bp">UITableViewDataSource</span><span class="p">,</span> <span class="bp">UITableViewDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="n">fakeData</span> <span class="o">=</span> <span class="p">[[</span><span class="nl">String</span><span class="p">:</span><span class="n">String</span><span class="p">]]()</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">fakeData</span> <span class="o">=</span> <span class="p">[[</span><span class="s">&quot;1&quot;</span><span class="o">:</span> <span class="s">&quot;A&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;2&quot;</span><span class="o">:</span> <span class="s">&quot;B&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;3&quot;</span><span class="o">:</span> <span class="s">&quot;C&quot;</span><span class="p">]]</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">yellowColor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span> <span class="o">=</span> <span class="bp">UITableView</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">?</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">?</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">tableView</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此時編譯器就會要求實作 UITableViewDataSource, UITableViewDelegate 的 methods</p>

<p>實作完就可以讓 TableView 顯示資料, 這我們之前也都有提到過了~</p>

<p>在這邊我們也同時使用自訂的 CustomTableViewCell, 簡單對 cell 改個顏色，雖然沒什麼多大用處 XD</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nl">section</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">fakeData</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">cell</span><span class="p">:</span> <span class="n">CustomTableViewCell</span><span class="o">?</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="s">&quot;CustomCell&quot;</span><span class="p">)</span> <span class="kt">as</span><span class="o">?</span> <span class="n">CustomTableViewCell</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">var</span> <span class="n">objects</span> <span class="o">=</span> <span class="bp">NSBundle</span><span class="p">.</span><span class="n">mainBundle</span><span class="p">().</span><span class="n">loadNibNamed</span><span class="p">(</span><span class="s">&quot;CustomTableViewCell&quot;</span><span class="p">,</span> <span class="nl">owner</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cell</span> <span class="o">=</span> <span class="n">objects</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="n">CustomTableViewCell</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cell</span><span class="o">!</span><span class="p">.</span><span class="n">textLabel</span><span class="o">?</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">fakeData</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">])[</span><span class="s">&quot;content&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://goo.gl/8Zis9p" alt="image" /></p>

<p>不過可以看到有小瑕疵，就是選取後他並不會回覆成原本的模樣</p>

<p>因此加入 tableView didSelectRowAtIndexPath:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 回復非選取狀態</span>
</span><span class='line'>    <span class="n">tableView</span><span class="p">.</span><span class="n">deselectRowAtIndexPath</span><span class="p">(</span><span class="n">indexPath</span><span class="p">,</span> <span class="nl">animated</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>明天就會提到換頁以及刪除的作法!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d22] - 實戰開發 - 讀取 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/22/api-d22/"/>
    <updated>2014-10-22T19:13:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/22/api-d22</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day22">Github 參考</a></p>

<p>如果有使用 MongoDB client 的話就可以搭配使用會比較有感覺</p>

<p>Mac 我是使用 Robomongo，算很好上手~</p>

<p>今天要來實作讀取的部分</p>

<p>讀取有分兩種，一種是讀取 list</p>

<p>另一種是讀取特定某個 todo task，今天兩種都會實作</p>

<p>首先我們先實作 get todo list</p>

<p>因為若要拿到特定的 todo task，需要 todo task 的 id</p>

<p>而我們現在還不曉得 todo task 的 id 是多少，我們只知道 user_id</p>

<p>因此就先從 list 下手</p>

<p>routes/users.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get todo list</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">TODO</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span><span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;can not find data&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="nx">results</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面程式碼的意思是，先抓到 uri 的 user_id</p>

<p>再來就直接進 db 找，find() 的第一個參數為:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以想像成是 SQL 語法中的 WHERE 條件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">SELECT</span> <span class="o">*</span> <span class="nx">WHERE</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="s1">&#39;user_id&#39;</span> <span class="nx">FROM</span> <span class="nx">todos</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 callback 則是針對 error 或 results 作處理</p>

<p>試著將 server 跑起來，然後使用 POSTMAN 丟 GET request 試試看</p>

<p>如果沒有資料，就利用昨天實作的 POST API 新增幾個吧！</p>

<p>記得 url 中輸入的 user_id 要在 DB 中有該 user 的資料才找的到資料哦</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.17.08.png" alt="images" /></p>

<p>如此一來就有 task id 了!</p>

<p>再來就來實作讀取特定 id 的 task API 吧!</p>

<p>程式碼如下</p>

<p>routes/user.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">todo_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">TODO</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="nx">todo_id</span><span class="p">,</span> <span class="nx">user_id</span><span class="o">:</span> <span class="nx">user_id</span><span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;can not find data&quot;</span> <span class="p">}</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                    <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>這次更簡單了，user_id 及 todo_id 都是從 url 上取值</p>

<p>接著一樣使用 where 條件，將值帶入找資料</p>

<p>最後交給 callback 處理回傳值</p>

<p>將 server 跑起來，試著先從todo list 複製某一筆 _id 的值</p>

<p>丟到 url 中試試看</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%203.21.51.png" alt="image" /></p>

<p>如此一來，讀取特定 task 的 API 也完成囉!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d21] - 實戰開發 - TODOList - 前置設定]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/21/swift-d21/"/>
    <updated>2014-10-21T18:58:10+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/21/swift-d21</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-SwiftTodoApp/tree/Day21">Github link</a></p>

<p>首先在開始寫這隻 app 前，</p>

<p>我們要先定義好程式大致上的流程</p>

<p>基本上接下來的程式碼都不會用到 storyboard</p>

<p>只會用到程式 + xib</p>

<p>程式的流程大致上是使用 Navigation controller 來控制 view 的轉換</p>

<p>第一頁 - tableView 顯示 todo items list</p>

<p><img src="http://goo.gl/RKH85d" alt="image" /></p>

<p>點進子項目可以觀看內容，進到子頁後可以編輯，</p>

<p>編輯後就即可存檔</p>

<p>新增項目則在主頁的右上角 &ldquo;Add&rdquo; 可以新增</p>

<p>我們會先從建立假的資料開始，也就是我會先刻出程式的流程</p>

<p>先不接 API</p>

<p>實際寫出運作流程後，再加上 API 操作的部分</p>

<p>因此今天的進度就先開一個新專案，將基本的 Navigation + tableView 建立起來吧:</p>

<p>首先建立一個新專案</p>

<p>再來到 project settings</p>

<p>將 Main Interface 及 Launch Screen file 拿掉</p>

<p>並將 deploy target 設成 7.1 (反正用到的程式碼都一樣~ 沒有特別使用 8.0 的 lib)</p>

<p>設定 device orientation - 只限定直的</p>

<p><img src="http://goo.gl/xQ6m25" alt="image" /></p>

<p>接著就來編輯 AppDelegate.swift</p>

<p>建立一個 NavigationController + ViewController</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="k">class</span> <span class="nl">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">navigationController</span><span class="p">:</span> <span class="bp">UINavigationController</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">viewController</span><span class="p">:</span> <span class="n">ViewController</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;TODO List&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="o">=</span> <span class="bp">UINavigationController</span><span class="p">(</span><span class="nl">rootViewController</span><span class="p">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">viewController</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">navigationController</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是之前有用到的程式碼，稍作改寫</p>

<p>再來到 ViewController 中, 將背景色稍改一些</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">yellowColor</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後將 storyboard 以及 launchScreen.xib 刪掉</p>

<p>執行程式，就 OK 囉！</p>

<p><img src="http://goo.gl/n1T0zv" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d21] - 實戰開發 - 新增 TODO Task API With Mongoose]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/21/api-d21/"/>
    <updated>2014-10-21T18:58:06+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/21/api-d21</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day21">Github 參考</a></p>

<p>昨天我們了解了如何拿 url params 以及 request data</p>

<p>今天我們就來使用他，對資料庫做存取</p>

<p>由於使用到資料庫，因此我們要加入資料庫的 driver</p>

<p>我們用的是 <code>mongoose</code> 套件</p>

<p>app.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 在最上方加入</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在某個地方連接資料庫</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">db_uri</span> <span class="o">=</span> <span class="s2">&quot;mongodb://192.168.33.10:27017/TODOs&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">db_uri</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在這邊我是使用了虛擬機的 DB，因此是 <code>mongodb://192.168.33.10:27017/TODOs</code></p>

<p>DB 的名稱為 <code>TODOs</code></p>

<p>這樣在程式一跑起來時，就會連接資料庫了!</p>

<p>再來我們就要設定在對資料庫做 CRUD 時，所需要做的事情</p>

<p>首先我們先要定義 schema，</p>

<p>雖然 mongodb 是 schema-free，但是官方文件也有提到最好還是有固定的 schema 避免記憶體 allocate 時出現問題，而程式撰寫時邏輯也不會因此而過於複雜</p>

<p>這時候我們就需要 model 資料夾了，在 model 資料夾中新增一個 todos.js</p>

<p>裡面要放的就是 todo task 的 schema</p>

<p>內容如下:</p>

<p>models/todos.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Define our todo schema</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">TODOschema</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">user_id</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">content</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">created_at</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">updated_at</span><span class="o">:</span> <span class="nb">Date</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Export the Mongoose model</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;TODO&#39;</span><span class="p">,</span> <span class="nx">TODOschema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們定義了幾個東西 user_id, content, created_at, updated_at</p>

<p>其實 ObjectID 中已經有包含建立資訊了，其實 created_at 是可以省略掉的，不過在這邊還是加一下</p>

<p>注意下面這行:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;TODO&#39;</span><span class="p">,</span> <span class="nx">TODOschema</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>&lsquo;TODO&rsquo; 在這邊是 Collection (RDBMS 中的 table) 的名稱</p>

<p>在 mongoose 中，會自動複數化，所以在 Mongodb 中的 Collection name 會變成 &lsquo;todos&rsquo; ，</p>

<p>雖然只是小小的一行，但是蠻重要的</p>

<p>最後將這個 model exports 成一個 mongoose.model 物件</p>

<p>那我們什麼時候會用到這個 model 物件呢?</p>

<p>就是在 routes/user.js 中，</p>

<p>routes/users.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">TODO</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../models/todos&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣在 users.js 中就可以使用 TODO 這個物件了!</p>

<p>我們先試著編輯 POST 的 route，拿到 POST 資料後，將資料轉成 TODO 的物件，存到 mongodb 裏</p>

<p>以下是 routes/users.js 中的 post 程式碼段</p>

<p>簡單來說就是先抓到 uri 的參數以及 post data</p>

<p>並且使用 models/todos.js 的 model 新建立一個 todo 物件</p>

<p>並將該物件用 post data 初始化，</p>

<p>初始化完後就執行寫入 DB 的行為, 若寫入成功則回傳 201 + data</p>

<p>失敗則回傳 400 bad request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">user_id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// insert to db</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TODO</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">user_id</span> <span class="o">=</span> <span class="nx">user_id</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">content</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">created_at</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">updated_at</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">todo</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                <span class="p">{</span> <span class="nx">error</span><span class="o">:</span> <span class="s2">&quot;insert db error&quot;</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>                <span class="nx">todo</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>試著執行伺服器看看，並且使用 POSTMAN 丟 request 如下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-13%202.54.57.png" alt="image" /></p>

<p>POST 的 raw data</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;content&quot;</span><span class="o">:</span> <span class="s2">&quot;buy milk&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>於是就完成了一個 POST 新增 TODO 的 API 了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d20] - Basic - 捨棄 Storyboard 使用純程式碼 的方式撰寫 ViewController]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/20/swift-d20/"/>
    <updated>2014-10-20T18:46:16+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/20/swift-d20</id>
    <content type="html"><![CDATA[<p>今天專案的 <a href="https://github.com/kerkerj/ithome-NoStoryboardDemo">Github link</a></p>

<p>其實哦</p>

<p>寫 Swift 也有幾個禮拜了</p>

<p>我一直覺得使用 Interface Builder 的確很方便</p>

<p>但是在程式面與視覺面之間的溝通常常會漏東漏西的</p>

<p>比方說如果要設定 reusable identifier 時</p>

<p>除了程式裡面的字串要設定以外，還要再到 storyboard 裡設定同樣的字串</p>

<p>一個簡單的小程式可能不超過 20 個 View 的情況下</p>

<p>還可以這樣做，當程式長得非常大的時候，好像就很難注意到這件事，</p>

<p>而且 View 太多 storyboard 就會開始變慢&hellip;.</p>

<p>因此今天要來試著在 Swift 中</p>

<p>如何不用 Storyboard，來打造我們的程式</p>

<p>(當然 xib/nib 還是會用到，只是我們單純捨棄 storyboard，用程式來控制流程)</p>

<p>首先，一樣先建立一個測試專案</p>

<p>接著我們要動到的程式碼是 AppDelegate.swift:</p>

<p>編輯它:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">UIApplicationMain</span>
</span><span class='line'><span class="k">class</span> <span class="nl">AppDelegate</span><span class="p">:</span> <span class="bp">UIResponder</span><span class="p">,</span> <span class="bp">UIApplicationDelegate</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">window</span><span class="p">:</span> <span class="bp">UIWindow</span><span class="o">?</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">viewController</span><span class="p">:</span> <span class="n">ViewController</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">application</span><span class="p">(</span><span class="nl">application</span><span class="p">:</span> <span class="bp">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nl">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="nl">NSObject</span><span class="p">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其實這段程式碼，就是在做 storyboard 的 &ldquo;進入點&rdquo; 這件事</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">viewController</span><span class="p">:</span> <span class="n">ViewController</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們用專案建立時產生的 ViewController 建立了一個物件</p>

<p>並在 application launch 的時候，將該 ViewController 建立起來，設定他的背景顏色為紅色</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">viewController</span> <span class="o">=</span> <span class="n">ViewController</span><span class="p">()</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">viewController</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">redColor</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外對 window 做一些設定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="bp">UIWindow</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">mainScreen</span><span class="p">().</span><span class="n">bounds</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定他 Screen 大小 (根據手機解析度而定)
並設定 window 的背景顏色為白色</p>

<p>接著是最重要的設定:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">viewController</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">window</span><span class="o">?</span><span class="p">.</span><span class="n">makeKeyAndVisible</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們要讓 viewController 指定為是這個 window 的 rootViewController</p>

<p>並且 makeKeyAndVisible</p>

<p>這樣就完成手動設定進入點的程式了</p>

<p>再來我們就可以大膽一點，把 Storyboard 砍掉啦!</p>

<p>接著執行程式，就可以看到一片紅色了!!!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2015.10.21.png" alt="image" /></p>

<p>是不是很簡單!</p>

<p>如果要 NavigationController 也可以直接設定!</p>

<p>接下來的實戰開發專案就會以不使用 Storyboard 的方式開發</p>

<p>增加程式碼可讀性 :P</p>

<p>老是貼圖也很累 XDDDD</p>

<p>接下來就要用 Swift 寫一個 TODOList APP 囉!</p>

<p>並且實際接上隔壁棚的 Restful API XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d20] - 實戰開發 - Routes 2, Get Params and Request Data]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/20/api-d20/"/>
    <updated>2014-10-20T18:46:12+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/20/api-d20</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day20">Github 參考</a></p>

<p>接著我們要根據我們開之前寫好的 <a href="http://docs.todolist7.apiary.io/">文件</a> 來開發:</p>

<p>要有下列 routes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">TODOs</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="p">{</span><span class="nx">user_id</span><span class="p">}</span><span class="o">/</span><span class="nx">todos</span><span class="o">/</span>
</span><span class='line'><span class="nx">POST</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="p">{</span><span class="nx">user_id</span><span class="p">}</span><span class="o">/</span><span class="nx">todos</span><span class="o">/</span>
</span><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="p">{</span><span class="nx">user_id</span><span class="p">}</span><span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span>
</span><span class='line'><span class="nx">PUT</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="p">{</span><span class="nx">user_id</span><span class="p">}</span><span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span>
</span><span class='line'><span class="nx">DELETE</span> <span class="o">/</span><span class="nx">user</span><span class="o">/</span><span class="p">{</span><span class="nx">user_id</span><span class="p">}</span><span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="p">{</span><span class="nx">id</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣的需求其實可以用 namespace 實作，不過我們偷懶一點，直接指向 /user 就好</p>

<p>所以在 app.js 加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以會變這樣:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set routers</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/users&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>不過看起來我們缺少 routes/users.js，所以我們也來新增一個</p>

<p>routes/users.js 內容如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>好像有那麼一點符合我們要的 routes 了</p>

<p>我們在把每個詳細的 uri 加入</p>

<p>在這邊要注意</p>

<p>因為我們在 app.js 中把 uers.js 加入了 (&lsquo;/users&rsquo;, users)</p>

<p>這個 route</p>

<p>因此在 users.js 中設定的所有 route 都是接在 <code>/users/</code> 後面的</p>

<p>要注意哦</p>

<p>修改後的檔案:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get todo list</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;GET lists&quot;</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;GET 1 task&quot;</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Update a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;PUT&quot;</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delete a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;DELETE&quot;</span><span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span><span class="err">```</span>
</span></code></pre></td></tr></table></div></figure>


<p>將 server 重啟，試著對這些網址丟丟看</p>

<p>這時候使用瀏覽器應該就沒辦法丟 GET 以外的要求了對吧?</p>

<p>此時 chrome extension - POSTMAN 就該上場啦！</p>

<p>打開 POSTMAN 就可以送以下的 request 囉!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">GET</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/kerkerj/todos  </span>
</span><span class='line'><span class="nx">POST</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/kerkerj/todos  </span>
</span><span class='line'><span class="nx">GET</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/kerkerj/todos/1  </span>
</span><span class='line'><span class="nx">PUT</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/kerkerj/todos/1  </span>
</span><span class='line'><span class="nx">DELETE</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:3000/user/kerkerj/todos/1  </span>
</span></code></pre></td></tr></table></div></figure>


<p>因為剛剛程式裡面都只讓他回傳 success，因此還沒有太大的作用，</p>

<p>不過已經有感覺了對吧!! XD</p>

<h2>Get params from url</h2>

<p>我們現在先針對以下這段程式碼作進一步的改寫:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos/:todo_id&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;GET 1 task&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user_id</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">todo_id</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">todo_id</span>
</span><span class='line'>      <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>存檔並打開 server，存取 <a href="http://localhost:3000/user/test/todos/1">http://localhost:3000/user/test/todos/1</a></p>

<p>就可以看到回傳值是:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;success&quot;</span><span class="o">:</span> <span class="s2">&quot;GET 1 task&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;user&quot;</span><span class="o">:</span> <span class="s2">&quot;kerkerj&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;todo_id&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以又學到一招了!</p>

<p>先設定想要抓哪一段網址，例如:</p>

<p><code>/:user_id/todos/:todo_id</code></p>

<p>前面有加冒號的就是這段網址是要被抓成一個參數</p>

<p>而冒號後面接的就是之後在下面要使用到的名字</p>

<p>要接網址的參數的拿法 - req.params.{???}</p>

<p>例如:</p>

<p>req.params.user_id</p>

<p>req.params.todo_id</p>

<p>拿到了網址的參數，就可以對資料庫做進一步的查詢</p>

<h2>Get request data</h2>

<p>那要怎麼拿到 request 的 data 呢?</p>

<p>他並不存在于網址列上啊?</p>

<p>這時候就要加入 <code>body-parser</code> 了!</p>

<p>他會在接收到 request 時，幫我們做過處理後，再傳到每個 request 該去的 router 裏</p>

<p>在 app.js 中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 最上面</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bodyParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;body-parser&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 加在 router 前面，切記!!</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span> <span class="nx">bodyParser</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span> <span class="nx">bodyParser</span><span class="p">.</span><span class="nx">urlencoded</span><span class="p">({</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="nx">users</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接著在 users.js 中的 POST 區塊中加入兩行:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create a todo task</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/:user_id/todos&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">(</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="nx">data</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>開啓 server, 用下圖的方式對 server 做 request:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-09%2023.00.10.png" alt="image" /></p>

<p>記得要加入 header -</p>

<p>Content-Type - application/json</p>

<p>Data 要選擇 raw data - 使用自己寫的 json 格式</p>

<p>就可以看到下面的回傳格式了!</p>

<p>透過拿到 url params 以及 request data</p>

<p>我們就可以使用這些資料來對資料庫做存取了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d19] - Basic - 橋接第三方 Objc Library - Reachability and Bridge.h]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/swift-d19/"/>
    <updated>2014-10-19T21:19:28+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/swift-d19</id>
    <content type="html"><![CDATA[<p>本日專案的 <a href="https://github.com/kerkerj/ithome-BridgeObjcDemo">Github link</a></p>

<p>由於 Swift 剛推出不到一年</p>

<p>有許多的 third-party library 一定還沒轉換成 Swift</p>

<p>或者是作者沒心力轉會成 Swift</p>

<p>但是有些套件非常方便，那在 Swift 要怎麼使用 Objective-C 的套件呢?</p>

<p>Xcode 有提供橋接的方式，非常好用</p>

<p>接下來就介紹一下如何使用吧!</p>

<p>以下的例子是一個叫做 <code>Reachability</code> 的套件</p>

<p>它可以簡單地幫我們判斷是否有網路連線 3g or wifi 之類的</p>

<p>所以我們先下載這個套件吧!</p>

<p><a href="https://github.com/tonymillion/Reachability">https://github.com/tonymillion/Reachability</a></p>

<p>下載解壓縮後</p>

<p>將 .h 和 .m 檔拖曳進 Xcode 專案中</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.27.17.png" alt="image" /></p>

<p>接下來 Xcode 就會問一個非常重要的問題!:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.26.24.png" alt="image" /></p>

<p>是否要建立橋接的 .h 檔案!</p>

<p>當然是選擇建立囉~</p>

<p>此時的專案結構就會變成這樣:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.26.38.png" alt="image" /></p>

<p>再來編輯 bridge-header.h 檔</p>

<p>將想要橋接的 objc 套件 import 進去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="cp">#import &quot;Reachability.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣我們就可以在 Swift 中直接使用該套件的類別與方法了!</p>

<p>接下來就讓我們試試看!</p>

<p>在 ViewController 中加入以下程式碼:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ViewController.swift</span>
</span><span class='line'><span class="c1">//  BridgeObjcDemo</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Jerry Huang on 2014/10/18.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 kerkerj. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">var</span> <span class="n">isConnected</span> <span class="o">=</span> <span class="n">checkNetworkConnection</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">alert</span> <span class="o">=</span> <span class="bp">UIAlertView</span><span class="p">()</span>
</span><span class='line'>        <span class="n">alert</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;Network Connection&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">isConnected</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">alert</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;You&#39;re online!&quot;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">alert</span><span class="p">.</span><span class="n">message</span> <span class="o">=</span> <span class="s">&quot;You&#39;re offline!&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">alert</span><span class="p">.</span><span class="n">addButtonWithTitle</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">alert</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">didReceiveMemoryWarning</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="n">didReceiveMemoryWarning</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// Dispose of any resources that can be recreated.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">checkNetworkConnection</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">reachability</span><span class="p">:</span> <span class="n">Reachability</span> <span class="o">=</span> <span class="n">Reachability</span><span class="p">.</span><span class="n">reachabilityForInternetConnection</span><span class="p">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="nl">networkStatus</span><span class="p">:</span> <span class="n">NetworkStatus</span> <span class="o">=</span> <span class="n">reachability</span><span class="p">.</span><span class="n">currentReachabilityStatus</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">networkStatus</span><span class="p">.</span><span class="n">toRaw</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">networkStatus</span><span class="p">.</span><span class="n">toRaw</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;[Network Status]: NotReachable&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;[Network Status]: ReachableViaWWAN&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s">&quot;[Network Status]: ReachableViaWiFi&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">networkStatus</span><span class="p">.</span><span class="n">toRaw</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡單的說，我們寫了一個方法，使用 Reachability 偵測網路連線</p>

<p>在 ViewDidLoad 時，偵測是否有網路連線</p>

<p>跳一個 Alert 會告訴你是有連線還是沒有連線</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2014.42.45.png" alt="image" /></p>

<p>不過在這邊，我不曉得如何讓模擬器關掉連線，</p>

<p>所以沒辦法提供 offline 的圖</p>

<p>但是我實際安裝到手機後，將 wifi 功能關掉後的確是有跳出 offline 的</p>

<p>哈哈 雖然說沒圖沒真相但是&hellip;XD</p>

<p>橋接第三方套件就是那麼簡單! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d19] - 實戰開發 - Index & Route & Http Status Code]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/api-d19/"/>
    <updated>2014-10-19T21:19:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/api-d19</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day19">Github 參考</a></p>

<p>昨天先把專案目錄初始化，裝完該裝的套件後</p>

<p>在 routes 中加入一個 index.js 檔案</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">greetings</span><span class="o">:</span> <span class="s2">&quot;hello world!&quot;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>建立一個 <code>app.js</code> 在專案根目錄中:</p>

<p>app.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set routers</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然後在 bin 資料夾建立一個 server.js:</p>

<p>bin/server.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">)(</span><span class="s1">&#39;TODOAPI&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>並且在 package.json 中修改並加入:</p>

<p>加入 <code>start</code> : <code>"start": "node ./bin/server.js",</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;node ./bin/server.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣我們就可以透過 <code>npm start</code> 來啟動 server 了!</p>

<p>試著啟動看看 <code>npm start</code></p>

<p>到網址列輸入 <code>http://localhost:3000/</code></p>

<p>就可以看到 <code>{"greetings":"hello world!"}</code> 了!</p>

<p>我們從本文的後面往回看：其實就是一個 request 會經過的地方:</p>

<p>當我們下了 <code>npm start</code>，npm 會搜尋 package.json 中有沒有 <code>start</code> 指令</p>

<p>若有的話就會執行他所設定的指令 <code>node ./bin/server.js</code></p>

<p>這樣就會執行 server.js 了</p>

<p>我們再看一下 server.js，講解在底下的註解:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 使用嚴格模式</span>
</span><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 加入 debugger</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">debug</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;debug&#39;</span><span class="p">)(</span><span class="s1">&#39;TODOAPI&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 將我們寫的 app.js 引入，建立一個 app instance</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../app&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 設定 app instance 的 port, 若環境變數有設定的話就使用環境變數的值</span>
</span><span class='line'><span class="c1">// 沒有設定環境變數的話則是 3000</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 啟動 server，讓 server 監聽剛剛上一行所設定的 port，</span>
</span><span class='line'><span class="c1">// 並且使用 debugger</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;Express server listening on port &#39;</span> <span class="o">+</span> <span class="nx">server</span><span class="p">.</span><span class="nx">address</span><span class="p">().</span><span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然 server.js 啟動了一個 app.js 的 instance</p>

<p>那我們就要來看一下 app.js</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 引入 express 模組</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 初始化一個 express instance</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 將 route 引入</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/index&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 設定若有 request 進到 http://localhost:3000/ 時，</span>
</span><span class='line'><span class="c1">// 交給 routes/index.js 來作後續處理</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">index</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="err">最後這一行是這個檔案</span> <span class="kr">export</span> <span class="err">成一個模組</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">app</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那現在我們了解到了，如果有一個要求打進了 <code>http://localhost:3000/</code></p>

<p>它會將該要求轉發給 routes/index.js 來作處理</p>

<p>因此我們再進到 index.js 看看內容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 使用嚴格模式</span>
</span><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 引入 express 模組</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在這邊我們要使用 express 模組中的 Router</span>
</span><span class='line'><span class="c1">// 因為在 app.js 中，若是使用 app.use(&#39;/&#39;, index)</span>
</span><span class='line'><span class="c1">// 該 index 物件必須是一個 Router 物件，</span>
</span><span class='line'><span class="c1">// 因此在這邊我們才會這樣寫</span>
</span><span class='line'><span class="c1">// 於是 router 就是一個 express 的 router 物件了</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 設定該  router 有哪些路徑要來聽</span>
</span><span class='line'><span class="c1">// 在這邊我們設定當有 request 進到 根目錄，</span>
</span><span class='line'><span class="c1">// 且是使用 GET 方法時，我們的回覆是:</span>
</span><span class='line'><span class="c1">// HTTP status code 爲 200</span>
</span><span class='line'><span class="c1">// 回傳的資料為 json 格式，傳入的內容是一個 javascript 物件</span>
</span><span class='line'><span class="c1">// .json 方法會幫我們轉成 json 格式回傳給使用者</span>
</span><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="nx">greetings</span><span class="o">:</span> <span class="s2">&quot;hello world!&quot;</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 最後將這個檔案 export 成一個 router 模組</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以透過這樣的方式我們就了解到了一個 request 是如何在模組化後的程式奔跑遊走</p>

<p>另外要特別提到的是 http status code</p>

<p>http status code 其實是一個非常好讓 client 知道這次 API request 發生什麼事的資料，充分利用 HTTP 協議所定義的狀態碼</p>

<p>我們有時候瀏覽網頁會看到: 404 Not found! 或是 500 Internal Server Error</p>

<p>這就是 HTTP status code</p>

<p>那我們可以透過定義好回傳的 http status code 來代表此次 request 的狀態</p>

<p>例如：</p>

<p>client 端輸入的 API 網址錯誤了</p>

<p>我們就回傳 status code: 404</p>

<p>如果是不小心 server 的 code 寫錯了，導致該次 request 完全讓 server 死掉了，</p>

<p>那就可以回傳 500 interanl server error</p>

<p>因此在做 error handling 時，請定義好 status code，他一定會有幫助的!</p>

<p>常用的 status code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="mi">200</span> <span class="o">-</span> <span class="nx">Success</span>
</span><span class='line'><span class="mi">201</span> <span class="o">-</span> <span class="nx">Created</span>
</span><span class='line'><span class="mi">400</span> <span class="o">-</span> <span class="nx">Bad</span> <span class="nx">request</span>
</span><span class='line'><span class="mi">401</span> <span class="o">-</span> <span class="nx">Unauthorized</span>
</span><span class='line'><span class="mi">403</span> <span class="o">-</span> <span class="nx">Forbidden</span>
</span><span class='line'><span class="mi">404</span> <span class="o">-</span> <span class="nx">Not</span> <span class="nx">found</span>
</span><span class='line'><span class="mi">500</span> <span class="o">-</span> <span class="nx">Internal</span> <span class="nx">Server</span> <span class="nb">Error</span>
</span></code></pre></td></tr></table></div></figure>


<p>詳細還可以參考: <a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP status code</a></p>

<p><a href="http://www.restapitutorial.com/httpstatuscodes.html">其他教學</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - Push/Pop Views Delay]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/19/swift-push-slash-pop-views-delay/"/>
    <updated>2014-10-19T00:33:11+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/19/swift-push-slash-pop-views-delay</id>
    <content type="html"><![CDATA[<p>請大家先看看下面的小短片，注意一下過場動畫的流暢度</p>

<p>一開始是沒有加過場動畫，後來改程式碼變成有過場動畫</p>

<p><a href="http://www.youtube.com/watch?feature=player_embedded&v=dqxDFv-iieU
" target="_blank"><img src="http://img.youtube.com/vi/dqxDFv-iieU/0.jpg"
alt="IMAGE ALT TEXT HERE" width="420" height="315" border="10" /></a></p>

<p><a href="https://www.youtube.com/watch?v=dqxDFv-iieU">direct link</a></p>

<p>後來發現給一個預設的 backgroundColor 後就不會發生殘影的問題了</p>

<p>是因為 push 的 view 沒有 backgroundColor</p>

<p>和同事討論後發現:</p>

<p><a href="https://developer.apple.com/library/IOs/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instp/UIView/backgroundColor">Apple Developer Reference</a></p>

<p>UIView 的 backgroundColor 的 default 值是 null!</p>

<blockquote><p>Discussion
Changes to this property can be animated. The default value is nil, which results in a transparent background color.</p></blockquote>

<p>所以是這個原因導致在轉場的時候有殘影</p>

<p>不過切換 View 時 target view 沒有 backgroundColor 的情況應該比較少吧&hellip;(?)</p>

<p>剛好在寫鐵人賽的 app 想先把流程弄出來時遇到了這個雷 XD</p>
]]></content>
  </entry>
  
</feed>
