<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kerkerj]]></title>
  <link href="http://kerkerj.github.io/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-04T19:00:07+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Planning]]></title>
    <link href="http://kerkerj.github.io/blog/2014/11/01/planning/"/>
    <updated>2014-11-01T00:00:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/11/01/planning</id>
    <content type="html"><![CDATA[<h1>&ndash;置頂&ndash;</h1>

<p>半個月前不怕死的報名了 ithome 的<a href="http://ithelp.ithome.com.tw/ironman7/app/index">連續三十天不中斷發文鐵人賽</a>，</p>

<p>還報名了兩個主題，真的是太誇張了&hellip;</p>

<p>但是由於 ithome 的編輯器其實排版起來沒有很漂亮，</p>

<p>因此決定利用這邊先發文，再轉文到 ithome 的方式來處理，</p>

<p>比較順手一些，順便在這篇文章貼上規劃方向，topic 可能隨時會變，但大方向不變</p>

<p>第一次寫的主題都幾乎不是自己專精的技術，</p>

<p>規劃表如下： (Evernote 連結)</p>

<p><a href="https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg">https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg</a></p>

<p>因此若有錯誤也請有看到的大大們多多幫忙指正囉！</p>

<p>有時候會因為比較忙，可能文章比較精簡一些，還請大家多多包涵 :P</p>

<p>有任何文章更新也會同步在此篇文章中!</p>

<h2>RESTful API Service:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d1/">[API-d1] - 定義 1 - 什麼是 REST/RESTful?</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d2/">[API-d2] - 定義 2 - RESTful 的優點與要求</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/api-d3/">[API-d3] - 使用時機與實際 API 參考</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/api-d4/">[API-d4] - 使用技術與工具介紹及原因</a><br/>
Day5  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day6  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day7  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day8  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day9  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day10 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day11 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day12 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day13 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day14 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day15 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day16 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day17 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day18 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day19 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day20 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day21 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day22 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day23 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day24 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day25 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day26 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day27 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>

<h2>Swift:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/">[Swift-d1] - 介紹</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/">[Swift-d2] - 安裝及 Hello World!</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/">[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/">[Swift-d4] - Playground - Optional, ! and ? </a><br/>
Day5  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day6  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day7  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day8  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day9  -  <a href="http://kerkerj.github.io/">#</a><br/>
Day10 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day11 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day12 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day13 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day14 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day15 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day16 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day17 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day18 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day19 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day20 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day21 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day22 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day23 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day24 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day25 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day26 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day27 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d4] - Playground - Optional, ! And ?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/"/>
    <updated>2014-10-04T18:53:03+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/04/swift-d4</id>
    <content type="html"><![CDATA[<h1>Playground - Optional, ! and ?</h1>

<p>今天要來探討 Optional 型別，我認為這塊是初學 Swift 常遇到的問題<br/>
大家搞不懂 &ldquo;!&rdquo; &ldquo;?&rdquo; 到底在幹什麼，所以今天就來了解一下</p>

<p>在 Swift 中，所有的資料型別都不能賦予 nil<br/>
也就是以下這件事是不成立的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">x</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以在 Swift 底下，就要使用 Optional 來處理值可能不存在的情況<br/>
當一個變數 x 被宣告成 Optional 型別時，該變數就會有兩個情況：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="mf">1.</span> <span class="err">有值，等於</span> <span class="n">x</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">沒有值</span>
</span></code></pre></td></tr></table></div></figure>


<p>要宣告一個變數可能為 nil 時的方式是使用問號 &lsquo;?&#8217;：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">// 此時 x = &quot;yaya&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="nl">x</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 此時 x 沒有值</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿以下程式在 Playground 執行看看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看一下 Playground 右邊的輸出框，觀察兩個 string 的差異<br/>
當 str2 被賦予 Optional 型別後，<br/>
str2  已經不是單純的 String 型別了，</p>

<p>那如何強制以 String 型別拿到 str2 的資料呢?
試著在 str2 後面加上驚嘆號，並觀察右方輸出結果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>請注意！若要強制取值，一定要確保此 Optional 型別中一定有值，
否則將會導致執行錯誤，以下是錯誤範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>程式將會在第四行返回錯誤，因此使用驚嘆號強制取值前請先確保 Optional 裡有值。</p>

<p>在 Objective-C 中，nil 是指向一個不存在物件的指標；
而 Swift 中，nil 是一種非常明確地值 － 他就是代表「不存在」。</p>

<p>在 Playground 中多試試看囉~~</p>

<p>ps. Swift 的 ? 和 Ruby 的 ? 是完全不同意思的XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d4] - 使用技術與工具介紹及原因]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/04/api-d4/"/>
    <updated>2014-10-04T18:52:58+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/04/api-d4</id>
    <content type="html"><![CDATA[<h1>使用技術與工具介紹及原因</h1>

<p>終於要開始進入正題了！</p>

<p>在了解 REST/RESTful 後，</p>

<p>就要從無到有 - 從 Server 到 API endpoint 都由自己打造</p>

<p>今天會先來說明接下來會使用到哪些工具及技術</p>

<p>由於筆者使用 Mac ，因此若是有其他平台的使用者可能需要自行找教學</p>

<h2>Server - Ubuntu with Vagrant + VitrualBox</h2>

<p>接下來幾天會先從這個部分開始提起</p>

<p>我們會使用 VirtualBox + Vagrant 的方式來建立自己的虛擬環境</p>

<p>避免一些讀者可能對 Server command line 不熟</p>

<p>這個部分是大家可以跳過的部分，但是我還是會從無到有架起來</p>

<h2>Backend Language - Node.js</h2>

<p>後端語言使用了 Node.js，其實本來有考慮使用 Golang，</p>

<p>但顧及自己的時間&hellip; 還是使用 Node.js，方便快速</p>

<p>這幾年是 Javascript 的時代，</p>

<p>優勝美地似乎也可以支援使用 Javascript 撰寫 <a href="https://github.com/tylergaw/js-osx-app-examples">Automation Tool</a></p>

<p>從前端打到後端甚至到 DB 都可以使用到 Javascript ，</p>

<p>是該來看看 Javascript 的語法特性了 :D</p>

<p>而且 Node.js Event-driven 的特性，可以利用少少的資源提供高效能的服務</p>

<p>同時搭配易用性及社群活躍度，這是我選擇 Node.js 而非選擇 Golang 的原因</p>

<h2>Framework - Express</h2>

<p>我使用了 Node.js 的 web framework - Express</p>

<p>Node.js 之於 Express 可以把它想像成是 Ruby 之於 Sinatra</p>

<p>我使用 Express 方便處理 Route</p>

<p>並且這套 framework 算是 Node.js 裡最具代表性的 framework</p>

<p>學起來也還不錯</p>

<h2>Database - MongoDB</h2>

<p>DB 為了追求簡單快速，我使用了 MongoDB</p>

<p>從 API 到 DB 無縫接軌，簡單的操作模式以及 Schema-free 的特性</p>

<p>應該會讓這整件事情變得更簡單</p>

<h2>Test client - PostMan (chrome extension)</h2>

<p>由於 API 是純粹後端 service，我們使用 Express 並不會使用到樣板語言，</p>

<p>也就是我們並不會撰寫 View (HTML, CSS 等等的語法)</p>

<p>因此除了寫測試外，我們就可以使用這套 Chrome Extension 來對 API 做存取!</p>

<hr />

<p>結束! 接下來幾天會教大家建立自己的虛擬機哦~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/"/>
    <updated>2014-10-03T21:07:41+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/03/swift-d3</id>
    <content type="html"><![CDATA[<h2>變數與常數</h2>

<p>定義一個變數:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>var 是保留字，宣告 obj 是一個變數名稱，冒號後面接資料形態<br/>
以此例子來說，宣告了一個字串變數叫做 obj，並且初始化為 &ldquo;&rdquo; 空字串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>let 同樣是用來宣告一個變數，但是宣告此變數後，該變數的值無法被改變，<br/>
無法被改變的數值其實正正的名字就叫做常數
以上面的例子來說， 若我們多做一件事:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>若我們試圖去更改 obj，讓 obj 從空字串變成 &ldquo;test&rdquo; 時， <br/>
Xcode 就會報錯，不能更改該值</p>

<p>再來是宣告的變型，其實宣告時不一定要給資料形態，<br/>
Swift 會自動從後面的值來判斷 x 可能是什麼資料形態，<br/>
只是由於筆者的習慣，會儘量在後面加上該變數的資料型別</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一行內宣告多值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們就可以在 Playground 裡面試著宣告一些變數看看，並且使用昨天的輸出函式來輸出變數:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;測試&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="nl">fixString</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;fixed&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>註解</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">// 單行註解</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基本資料型別</h2>

<p>Swift 是一個強型別語言，意即若是以下的程式碼是會出錯的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於 x 已經被先 Swift 判定是 String 了，後面想指定 Int 資料給 x 就會出錯</p>

<p>Int 整數:
Swift 提供了 Int 還另外提供了 8, 16, 32, 64 位元的有號和無號整數型別<br/>
若在 32 位元平台，宣告 Int 的話， Int 的長度和 Int32 是一樣的<br/>
若在 64 位元平台，宣告 Int 的話， Int 的長度和 Int64 是一樣的</p>

<p>浮點數：
3.2, 0.0 之類的數字，可以用
Double - 64 位元浮點數 (至少 15 位數)
Float - 32 位元浮點數 (至少 6 位數)</p>

<p>布林值：
true/false</p>

<p>Tuples:
Tuple 可以將多個值組合成一個值，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">//賦值</span>
</span><span class='line'><span class="k">let</span> <span class="n">httpSucess</span> <span class="o">=</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 反過來接值</span>
</span><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">statusMessage</span><span class="p">)</span> <span class="o">=</span> <span class="n">httpSucess</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 若只需要其中一個值，另一個值可以用 _ 代替，但是不能沒有 _ </span>
</span><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">httpSucess</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 也可以用索引的方式拿值</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">httpSucess</span><span class="mf">.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宣告 tuples 時也可以直接給予參數一個名稱</span>
</span><span class='line'><span class="k">let</span> <span class="n">httpSucess</span> <span class="o">=</span> <span class="p">(</span><span class="nl">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nl">statusMessage</span><span class="p">:</span> <span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 拿值時就可以:</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">httpSucess</span><span class="p">.</span><span class="n">statusCode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同時結合 function 這樣就可以多值回傳了！</p>

<p>下一篇會接續今天變數相關的主題~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d3] - 使用時機與實際 API 參考]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/03/api-d3/"/>
    <updated>2014-10-03T21:07:32+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/03/api-d3</id>
    <content type="html"><![CDATA[<h1>使用時機與實際 API 參考</h1>

<p>什麼時候需要打造 RESTful API?<br/>
看看別人的 RESTful API (Instagram/Twitter)</p>

<p>什麼時候需要打造 RESTful API?<br/>
我認為當有數組資源要被多種不同平台使用時，就需要打造 RESTful API<br/>
例如，有 Android/ iOS / Web 要對同一 table 做存取時，<br/>
假設有個 MySQL DB，各個平台都使用各自的 mysql-driver 來直接操作 DB<br/>
假設有個 A 專案建立了一套書籍管理系統，資料庫裡記錄了大大小小的書籍，<br/>
而有個新的 B 專案需要使用到書籍的資料，此時 DB 操作的程式碼只能再寫一遍，<br/>
且各個平台重新撰寫，似乎是不大靠譜。</p>

<p>撰寫 RESTful API 的好處之一即是 RESTful 使用 HTTP 協定，<br/>
各個平台皆支援，不需要太複雜的程式，只需要使用各個平台的 http-client，<br/>
各個平台也不需要了解 DB 操作語法，只需要知道 json, xml 習慣的資料格式，  <br/>
且開發 API 還能夠對各個資源輕易地上 cache 增進反應速度，<br/>
開發 RESTful API 好處多多，哪天想 Open API 也就不需要再多作處理了～</p>

<p>接著讓我們來看看兩個有名網站的 API 吧！</p>

<p>Instagram: <a href="http://instagram.com/developer/api-console/">http://instagram.com/developer/api-console/</a><br/>
Twitter: <a href="https://dev.twitter.com/rest/tools/console">https://dev.twitter.com/rest/tools/console</a></p>

<p>很顯然的，我比較喜歡 Instagram 的 API 資源定義與命名方式 :P</p>

<p>下一篇會介紹我接下來會用到的工具箱，暖身結束，要正式開始了!<br/>
(不好意思前面嘴炮一點 XD)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d2] - 安裝及 Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/"/>
    <updated>2014-10-02T20:19:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d2</id>
    <content type="html"><![CDATA[<p>首先，你必須要有一台 Mac。<br/>
我也不知道要如何用虛擬機 build 一台 Mac VM 出來，<br/>
所以就是，先買一台 Mac XD</p>

<p>若已經有了 Mac，只要到 Appstore 下載 Xcode 即可，<br/>
注意是要 Xcode 6.0 以上， Xcode 6 才有支援 Swift ，舊版的 Xcode 5 是無法開發 Swift 的</p>

<p>安裝完 Xcode 後</p>

<p>首先開啓 Xcode<br/>
選擇 &ldquo;Create a playground&rdquo;<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.24.32.png" alt="p1" /></p>

<p>輸入 Playground 名稱並選擇儲存位置<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.13.png" alt="p2" /></p>

<p>就進入了 Playground 了！</p>

<p>可以看到 Xcode 已經預先載入了幾行程式碼了
來稍微看一下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.26.png" alt="p4" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Playground - noun: a place where people can play
</span><span class='line'>
</span><span class='line'>import UIKit
</span><span class='line'>
</span><span class='line'>var str = "Hello, playground"</span></code></pre></td></tr></table></div></figure>


<p>第一行，使用了 <code>//</code>，有寫過程式的話一定都知道這是註解 <br/>
在 Swift 裡面使用 <code>//</code> 及 <code>/* .... */</code> 來註解程式碼</p>

<p>第二行意思則是將 UIKit 引入到 playground 中，<br/>
借此使用 UIKit 的函示物件等等，目前還都不會用到</p>

<p>第三行的意思則是宣告了一個變數，該變數為一個字串，內容為 &ldquo;Hello World!&rdquo;</p>

<p>在 Playground 中，很有意思的是右邊的灰色區塊，<br/>
Xcode 會即時顯示該變數的值、型別、以及輸出結果，<br/>
對於剛入門 Swift 的開發者來說是一個非常好的功能來練習語法，
也因此未來幾天都會使用 Playground 來練習 Swift 基本語法!</p>

<p>最後當然要不免俗的撰寫最經典的程式 - Hello World!</p>

<p>加入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>println(str)</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.27.21.png" alt="p5" /></p>

<p>馬上就可以在右邊看到結果囉!</p>

<p><code>println(args)</code> 是 Swift 標準輸出的函示，算是使用率蠻高的一個 method，只要將參數代入即可顯示該參數的內容，<br/>
有興趣也可以透過 Xcode 的 autocomplete 來看看和 <code>print</code> 有關的 method，<br/>
例如 <code>print()</code>，可以試試看，有些許不一樣哦!</p>

<p>未來一個禮拜都會來練習一些基本語法!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d2] - 定義 2 - RESTful 的優點與要求]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d2/"/>
    <updated>2014-10-02T20:17:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d2</id>
    <content type="html"><![CDATA[<p>承上篇，</p>

<p>RESTful 的優點如下所列:</p>

<pre><code> 1. 瀏覽器即可以作為 client 端
 2. 可以更高效地利用 cache 來達到更快的回應速度
 3. 界面與資料分離
 4. 節省伺服器的計算資源
 5. 可重用! web/android/ios 都可以用, 無痛轉換!
</code></pre>

<p>RESTful 的要求:</p>

<pre><code> 1. client - server 架構  
 2. 分層系統  
 3. 利用快取機制增加效能  
      server-side: 在 GET 資源時，若該資源並沒有被變更，就可以利用 cache 機制減少 query，並且加快回應速度  
      client-side: 透過 client 端 cache 記錄 cache 版本，  
           若向 server 要求資源時發現 server 最新版與 cache 相同，  
           則 client 端直接取用本地資源即可，不需要再做一次查詢  
      省機器運算及流量 = 省錢  
 4. 通訊協定具有無狀態性  
      不能讓兩隻 API 做同一個動作!  
           假設完成轉賬手續必須先 call A 再 call B 的話，  
           若做完 A 後斷線導致 B 無法執行，後續要處理 A -&gt; B 的方式會很麻煩  
      且不應該假設伺服器知道目前的狀態!  
      因此設計出來的 API 不能有狀態性  
 5. 統一界面  
      使用 HTTP Verb: GET/POST/PUT/DELETE  
</code></pre>

<p>下一篇會討論什麼時候該打造 RESTful API?  以及看看別人寫的 RESTful API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d1] - 介紹]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/"/>
    <updated>2014-10-02T01:37:44+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d1</id>
    <content type="html"><![CDATA[<p>Swift 是 2014 年由蘋果公司在其開發者大會 WWDC 上所發佈的程式語言</p>

<p>The Swift Programming Language 一書中提到：</p>

<ol>
<li>Swift 用來撰寫 iOS 及 Mac OSX 的程式。</li>
<li>Swift 吸收了 C 和 Objective-C 的優點，使其在設計更具彈性、容易，且撰寫時有更多樂趣。</li>
<li>Swift 是基於成熟而且倍受喜愛的 Cocoa 和 Cocoa Touch framework，意即 Swift 可以直接使用這些現有的框架</li>
<li>Swift 兼具編譯語言的性能，以及直譯式語言的特性。</li>
</ol>


<p>** 什麼是 Cocoa/Cocoa Touch framework: <br/>
Cocoa framework 是 Apple 爲 Mac OSX 所建立的環境，用來開發 OSX 的程式，<br/>
而 Cocoa Touch framework 則是建立於 Cocoa framework 之上，用來開發 iOS 作業系統程式，<br/>
此兩種 framework 皆遵循 MVC 軟體架構，開發時必須遵循此架構。</p>

<p>若之前從未接觸過 Objective-C 但又想嘗試開發 iOS app 的話，<br/>
現在是個入門的好時機，Swift 去除了 Objective-C 的繁瑣語法，<br/>
且相較於 Objective-C 是個更好入門的程式語言。</p>

<p>對於非 Objective-C 開發者而言，若先前有過程式語言開發經驗的話，語法上手不會太難，<br/>
只是需要花時間學習 Cocoa/Cocoa Touch framework，但是，都要學習撰寫 iOS app 了，<br/>
不學 Cocoa/Cocoa Touch framework 應該也說不過去 :D</p>

<p>而對於 Objective-C 開發者而言，由於已經非常熟悉 Cocoa/Cocoa Touch framework 了，<br/>
在 Swift 使用 Cocoa/Cocoa Touch framework 是幾乎無痛轉換的，因為函式、變數名稱完全一樣，<br/>
只需要熟悉 Swift 語法，不出一天即可快速上手，也因此 Objectiv-C 開發者也不需過於擔心飯碗被搶走 XD<br/>
接觸過 Cocoa/Cocoa Touch framework 的開發者來說還是有相當大的優勢的。</p>

<p>由於筆者之前從未接觸過 Objective-C/ Cocoa/ Cocoa Touch framework，<br/>
只有些許 java/php/ruby 撰寫經驗，<br/>
選擇 Swift 的原因之一即是語法上手容易，並且有 playground 可以馬上執行撰寫的程式，<br/>
也因此希望能夠透過學習 Swift ，了解 iOS app 開發架構，實際打造出一款 app！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d1] - 定義 1 - 什麼是 REST/RESTful?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d1/"/>
    <updated>2014-10-02T01:02:26+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d1</id>
    <content type="html"><![CDATA[<p>Representational State Transfer，簡稱 <code>REST</code>，<br/>
它是一種網路架構風格，他並不是一種標準。</p>

<p>而 RESTful 可以這樣子想像:<br/>
美麗 (Beauty) 的事物可以稱為 Beautiful<br/>
設計為 REST 的系統就可以稱為 RESTful</p>

<p>以 API 而言，假設我們正在撰寫一組待辦事項的 API，<br/>
可能會有以下方式來作為 API 的 interface:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>獲取使用者資料     /getAllUsers
</span><span class='line'>獲取使用者資料     /getUser/1
</span><span class='line'>新增使用者資料     /createUser
</span><span class='line'>更新使用者資料     /updateUser/1
</span><span class='line'>刪除使用者資料     /deleteUser/1</span></code></pre></td></tr></table></div></figure>


<p>若是以 REST 風格來開發 RESTful API 的話:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>獲取使用者資料     /GET            /users
</span><span class='line'>獲取使用者資料     /GET            /user/1
</span><span class='line'>新增使用者資料     /POST          /user
</span><span class='line'>更新使用者資料     /PUT             /user/1
</span><span class='line'>刪除使用者資料     /DELETE      /user/1</span></code></pre></td></tr></table></div></figure>


<p>兩者差異是在於 RESTful API 充分地使用了 HTTP protocol (GET/POST/PUT/DELETE)，<br/>
達到<br/>
1. 以直觀簡潔的資源 URI<br/>
2. 並且善用 HTTP Verb<br/>
3. 達到對資源的操作<br/>
4. 並使用 Web 所接受的資料類型: JSON, XML, YAML 等，最常見的是 JSON</p>

<p>通常是使用 HTTP, URI, JSON, HTML 這些現有廣泛流行的協議和標準，<br/>
且使用 HTTP status code 來代表該資源的狀態。</p>

<p>框架中強制使用 REST 風格的最有名的應該就是 Ruby on Rails 了!<br/>
(不過我們並不會使用 Rails 來開發 API service :P)</p>

<p>p.s. 因為 REST 並非是一種標準，因此有時候也不一定非得要照著 REST 來做，<br/>
只是在資源的操作面上，可以設計成這類的風格，以達到簡潔易懂，並且可重用。</p>

<p>下一篇會來聊聊 REST 的要求與優點</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeigniter on Nginx]]></title>
    <link href="http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx/"/>
    <updated>2014-09-25T16:03:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx</id>
    <content type="html"><![CDATA[<p>I use Ubuntu 14.04, Nginx 1.4.6, php5-fpm, Codeigniter 2.2.0</p>

<p>It will remove index.php, and access Codeigniter site normally.</p>

<p>Clean configuration:</p>

<figure class='code'><figcaption><span>&#8220;/etc/nginx/site-enabled/default&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>server {
</span><span class='line'>
</span><span class='line'>#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; START
</span><span class='line'>        listen 80;
</span><span class='line'>        listen [::]:80 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>        root /YOUR/PROJECT/ROOT;
</span><span class='line'>        index index.html index.htm index.php;
</span><span class='line'>
</span><span class='line'>        # Make site accessible from http://localhost/
</span><span class='line'>        server_name localhost;
</span><span class='line'>
</span><span class='line'>        #location ~* .(ico|css|js|gif|jpe?g|png)(?[0-9]+)?$ {
</span><span class='line'>        #   expires max;
</span><span class='line'>        #   log_not_found off;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>                # First attempt to serve request as file, then
</span><span class='line'>                # as directory, then fall back to displaying a 404.
</span><span class='line'>                try_files $uri $uri/ /index.php;
</span><span class='line'>                # Uncomment to enable naxsi on this location
</span><span class='line'>                # include /etc/nginx/naxsi.rules
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        location ~ .php$ {
</span><span class='line'>            root           /YOUR/PROJECT/ROOT;
</span><span class='line'>            try_files $uri =404;
</span><span class='line'>            fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>            fastcgi_index  index.php;
</span><span class='line'>            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
</span><span class='line'>            include        fastcgi_params;
</span><span class='line'>            fastcgi_buffer_size 128k;
</span><span class='line'>            fastcgi_buffers 256 4k;
</span><span class='line'>            fastcgi_busy_buffers_size 256k;
</span><span class='line'>            fastcgi_temp_file_write_size 256k;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>#&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; END
</span><span class='line'>
</span><span class='line'>        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
</span><span class='line'>        #location /RequestDenied {
</span><span class='line'>        #       proxy_pass http://127.0.0.1:8080;
</span><span class='line'>
</span><span class='line'>        #error_page 404 /404.html;
</span><span class='line'>
</span><span class='line'>        # redirect server error pages to the static page /50x.html
</span><span class='line'>        #
</span><span class='line'>        #error_page 500 502 503 504 /50x.html;
</span><span class='line'>        #location = /50x.html {
</span><span class='line'>        #       root /usr/share/nginx/html;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
</span><span class='line'>        #
</span><span class='line'>        #location ~ \.php$ {
</span><span class='line'>        #       fastcgi_split_path_info ^(.+\.php)(/.+)$;
</span><span class='line'>        #       # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini
</span><span class='line'>        #
</span><span class='line'>        #       # With php5-cgi alone:
</span><span class='line'>        #       fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        #       # With php5-fpm:
</span><span class='line'>        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>        #       fastcgi_index index.php;
</span><span class='line'>        #       include fastcgi_params;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        # deny access to .htaccess files, if Apache&#39;s document root
</span><span class='line'>        # concurs with nginx&#39;s one
</span><span class='line'>        #
</span><span class='line'>        #location ~ /\.ht {
</span><span class='line'>        #       deny all;
</span><span class='line'>        #}
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Codeigniter config:</p>

<figure class='code'><figcaption><span>config.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;index_page&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;uri_protocol&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;REQUEST_URI&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event-driven I/O Models and Coroutine Notes]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/18/event-driven-i-slash-o-models-and-coroutine/"/>
    <updated>2014-08-18T23:19:51+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/18/event-driven-i-slash-o-models-and-coroutine</id>
    <content type="html"><![CDATA[<h2>Event-driven I/O model</h2>

<p>首先，聽到 Event-driven 是從 <a href="http://nodejs.org/">Node.js</a> 得知，</p>

<blockquote><p>Node.js® is a platform built on <a href="http://code.google.com/p/v8/">Chrome&rsquo;s JavaScript runtime</a> for easily building fast, scalable network applications.</p>

<p>Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.</p></blockquote>

<p>其實剛聽到這詞會有點陌生，我們可以先從 Victor 所寫的文章開始讀起:
<a href="http://blog.ez2learn.com/2010/07/17/talk-about-coroutine-and-gevent/">淺談coroutine與gevent</a></p>

<p>裡面提到了幾種網路模型：</p>

<blockquote><ol>
<li>阻塞式單一行程</li>
<li>阻塞式多行程</li>
<li>阻塞式多行程多執行序</li>
<li>非阻塞式事件驅動</li>
<li>非阻塞式 coroutine</li>
</ol>
</blockquote>

<p>以下是各語言 event-driven 的 model<br/>
(Node.js 就不列出了，本身就是 event-driven 設計)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Event-driven model:
</span><span class='line'>* Ruby    -&gt; [Eventmachine](http://rubyeventmachine.com/)  
</span><span class='line'>          -&gt; [Celluloid::IO](https://github.com/celluloid/celluloid-io)   
</span><span class='line'>          -&gt; [Thin Server](http://code.macournoyer.com/thin)   
</span><span class='line'>* Python  -&gt; [Twisted](https://twistedmatrix.com/trac/)  
</span><span class='line'>          -&gt; [Tornado](http://www.tornadoweb.org/en/stable)   
</span><span class='line'>* Perl     -&gt; [Perl Object Environment (POE)](http://poe.perl.org)    
</span><span class='line'>* PHP     -&gt; [REACT](http://reactphp.org) </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>以 Ruby 建構 API Service 的話，可以使用 Sinatra + Eventmachine + thin proxy + Nginx 的 Solution:<br/>
<a href="http://recipes.sinatrarb.com/p/embed/event-machine">Embedding Sinatra within EventMachine</a></p>

<p>延伸閱讀: <br/>
<a href="https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/">2008 - Eventmachine and Reactor pattern</a> <br/>
<a href="http://developwithstyle.com/articles/2012/05/23/lessons-learnt-from-building-a-rest-based-api/">2012 - Lessons Learnt From Building a REST API</a><br/>
<a href="https://docs.google.com/document/d/1dU-juYN25FMXdp6Ju62KAIT_0tuuZAPEgZkj-aT6kPQ/edit#heading=h.lafes4uxj2b0">年份未知 - 針對各 framework 進行評測 Event Driven I/O Web Application Server Analysis</a><br/>
<a href="http://blog.sina.com.cn/s/blog_704b6af70100py9n.html">Twisted 教程</a></p>

<h4>Reactor 模型</h4>

<p>Node.js 處理 concurrency 是 Reactor mode<br/>
Ruby 的 Goliath framework 也是 Reactor mode<br/>
Golang, Erlang 是 CSP (communicating sequential process)</p>

<p>現在比較流行的是 event-driven 的 Reactor mode, e.g. Node.js, Goliath<br/>
但是 Node.js 比較令人詬病的是 code 難維護，太多層層的 callback 會擾亂邏輯<br/>
畢竟線性處理比較符合人類思維 <br/>
而 Ruby 使用 Fiber 以避免寫出過多的 callback<br/>
Python 的 Twisted 也已經存在好一陣子，穩定發展中</p>

<p>不過以 Node.js 典型的應用的確是 proxy, API server<br/>
因此我們可以參考 Node.js 的特性，使用其他語言來達到同樣的效果<br/>
那就是 event-driven</p>

<h2>Coroutine Programming</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Golang - goroutine (native) 
</span><span class='line'>* Python - [gevent](http://www.gevent.org/)  
</span><span class='line'>* Ruby - Fiber (native)   
</span><span class='line'>* Lua   </span></code></pre></td></tr></table></div></figure>


<p>延伸閱讀:<br/>
<a href="http://www.bigfastblog.com/">Ruby 的 eventmachine 相關討論</a><br/>
<a href="http://www.blogjava.net/killme2008/archive/2010/03/11/315158.html">Ruby Fiber 指南</a><br/>
<a href="http://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/">2012 - Lua - Coroutine introduction</a><br/>
<a href="https://www.igvita.com/2009/05/13/fibers-cooperative-scheduling-in-ruby/">2009 - Fibers &amp; Cooperative Scheduling in Ruby</a><br/>
<a href="http://www.blogjava.net/killme2008/archive/2010/03/02/314264.html">2010 - Lua、LuaJIT Coroutine和Ruby Fiber的切換效率對比</a></p>

<hr />

<p>建構 API Service 考慮到的除了 Server 以外，<br/>
語言的特性通常也必須考慮進去，例如<br/>
sync v.s. async<br/>
coroutine v.s. non-coroutine<br/>
但通常以當前需求而言，其實也不需要 over-design<br/>
只要選擇拿手的，能夠快速方便的開發出雛形，<br/>
我想等到真的快要 10000 per/second request 時，再來煩惱更進一步的架構吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Tracked File to .gitignore]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/15/add-tracked-file-to-gitignore/"/>
    <updated>2014-08-15T18:27:30+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/15/add-tracked-file-to-gitignore</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git update-index --assume-unchanged &lt;file&gt;</span></code></pre></td></tr></table></div></figure>


<p>If there&rsquo;s a remote server, also do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm --cached &lt;file&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emoji Data in MySQL]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/06/emoji-data-in-mysql/"/>
    <updated>2014-08-06T18:17:59+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/06/emoji-data-in-mysql</id>
    <content type="html"><![CDATA[<p>Supported MySQL 5.5, 5.6.</p>

<p>First, MySQL should set DB and table to utf8mb4.</p>

<p>utf8 - 3 byte characters</p>

<p>utf8mb4 - 4 byte characters</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">DATABASE</span> <span class="n">my_database</span> <span class="k">DEFAULT</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8mb4</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_general_ci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">my_table</span> <span class="k">DEFAULT</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8mb4</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_unicode_ci</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">my_column</span> <span class="n">CHANGE</span> <span class="n">my_column</span> <span class="n">my_column</span> <span class="nb">TEXT</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8mb4</span> <span class="k">COLLATE</span> <span class="n">utf8mb4_unicode_ci</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, when inserting data or selecting data, execute this statement first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--Execute this statement first</span>
</span><span class='line'><span class="k">SET</span> <span class="k">NAMES</span> <span class="n">utf8mb4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--then insert or select</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">my_table</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Lua on Mac]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/06/writing-lua-on-mac/"/>
    <updated>2014-08-06T01:36:57+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/06/writing-lua-on-mac</id>
    <content type="html"><![CDATA[<h2>Install lua on mac</h2>

<p>I&rsquo;m not sure that whether Lua is built on mac originally.</p>

<p><span style="color:red;">(Ok, tested on Mac OSX 10.9, there is Lua in it.)</span></p>

<p>So I installed Lua via <a href="http://brew.sh/">Homebrew</a>.</p>

<p>Install homebrew (optional)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"</span></code></pre></td></tr></table></div></figure>


<p>Install Lua by homebrew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install lua</span></code></pre></td></tr></table></div></figure>


<h2>Writing Lua</h2>

<p>You can use command: <code>lua</code> to interact with lua. (just like <code>php -a</code> or <code>irb</code>)</p>

<figure class='code'><figcaption><span>hello.lua</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>fact.lua</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">enter a number:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">num</span> <span class="o">=</span> <span class="nb">io.read</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">*number&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="n">fact</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openresty on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/05/openresty-on-ubuntu-14-dot-04/"/>
    <updated>2014-08-05T23:47:39+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/05/openresty-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<h2>Install</h2>

<p>choose the latest version of Openresty<br/>
I used ngx_openresty-1.7.2.1.tar.gz</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> install packages
</span><span class='line'><span class="go">sudo apt-get install libreadline-dev libpcre3-dev libssl-dev perl  </span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> get openresty package
</span><span class='line'><span class="go">wget http://openresty.org/download/ngx_openresty-1.7.2.1.tar.gz   </span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> unzip
</span><span class='line'><span class="go">tar xzvf ngx_openresty-1.7.2.1.tar.gz</span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> install
</span><span class='line'><span class="go">cd ngx_openresty-1.7.2.1/</span>
</span><span class='line'>
</span><span class='line'><span class="gp">#</span> You can setup with ./configure --prefix<span class="o">=</span><span class="s2">&quot;the folder you want to install&quot;</span>, default is <span class="s1">&#39;/usr/local/openresty&#39;</span>
</span><span class='line'><span class="go">./configure </span>
</span><span class='line'><span class="go">make</span>
</span><span class='line'><span class="go">sudo make install # need permission to copy file to target folder</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default folder: <code>/usr/local/openresty</code></p>

<h2>Setup</h2>

<p>create work folder in ~</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">mkdir ~/work</span>
</span><span class='line'><span class="go">cd ~/work</span>
</span><span class='line'><span class="go">mkdir logs/ conf/</span>
</span></code></pre></td></tr></table></div></figure>


<p>create a new file in <code>~/work/conf/nginx.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">worker_processes  1;</span>
</span><span class='line'><span class="go">error_log logs/error.log;</span>
</span><span class='line'><span class="go">events {</span>
</span><span class='line'><span class="go">    worker_connections 1024;</span>
</span><span class='line'><span class="go">}</span>
</span><span class='line'><span class="go">http {</span>
</span><span class='line'><span class="go">    server {</span>
</span><span class='line'><span class="go">        listen 8080;</span>
</span><span class='line'><span class="go">        location / {</span>
</span><span class='line'><span class="go">            default_type text/html;</span>
</span><span class='line'><span class="go">            content_by_lua &#39;</span>
</span><span class='line'><span class="go">                ngx.say(&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;)</span>
</span><span class='line'><span class="go">            &#39;;</span>
</span><span class='line'><span class="go">        }</span>
</span><span class='line'><span class="go">    }</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>because Openresty is installed in <code>/usr/local/openresty</code>,<br/>
we need to add the directory to PATH variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">PATH=/usr/local/openresty/nginx/sbin:$PATH</span>
</span><span class='line'><span class="go">export PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use the way below to start nginx server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">nginx -p `pwd`/ -c conf/nginx.conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assume that you have a nginx server originally, and then you installed Openresty, it can be set up at the same time if the port is not confilcted to the origin nginx.</p>

<h2>Use external lua file to keep conf clean</h2>

<p>Edit <code>~/work/conf/nginx.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">worker_processes  1;</span>
</span><span class='line'><span class="go">error_log logs/error.log;</span>
</span><span class='line'><span class="go">events {</span>
</span><span class='line'><span class="go">    worker_connections 1024;</span>
</span><span class='line'><span class="go">}</span>
</span><span class='line'><span class="go">http {</span>
</span><span class='line'><span class="go">    server {</span>
</span><span class='line'><span class="go">        listen 8080;</span>
</span><span class='line'><span class="go">        location /hello {</span>
</span><span class='line'><span class="go">            content_by_lua_file conf/hello.lua;</span>
</span><span class='line'><span class="go">        }</span>
</span><span class='line'><span class="go">    }</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>hello.lua</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="c1">-- hello.lua</span>
</span><span class='line'><span class="n">ngx</span><span class="p">.</span><span class="n">say</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Hello World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano With Rails - Basic Notes]]></title>
    <link href="http://kerkerj.github.io/blog/2014/08/05/capistrano-with-rails-basic-notes/"/>
    <updated>2014-08-05T22:36:48+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/08/05/capistrano-with-rails-basic-notes</id>
    <content type="html"><![CDATA[<p>詳細的東西還是看 project&rsquo;s github page 比較快 - <a href="https://github.com/capistrano/capistrano">Capistrano@github</a></p>

<p>Capistrano 剛開始寫 deploy script 時真的會有點搞不太懂 XD<br/>
記錄一下使用 &lsquo;capistrano&rsquo; 把特定的 github repo 抓到 remote server</p>

<h2>安裝</h2>

<p>先在 Gemfile 加入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'capistrano', '~&gt; 3.2.0'   </span></code></pre></td></tr></table></div></figure>


<p>
然後安裝~</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>步驟大概會是：</p>

<p>假設已經寫完 capistrano 了，執行 script 時，<br/>
capistrano 會先利用 script 裡提供的 server ip 以及 public key，<br/>
先連線到 remote server，接著再到 github 上拉 code 到指定的目錄裡，<br/>
再重開 server。</p>

<h2>產生相關檔案</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec cap install </span></code></pre></td></tr></table></div></figure>


<p>會產生以下檔案:  (copy from <a href="https://github.com/capistrano/capistrano">Capistrano@github</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>├── Capfile
</span><span class='line'>├── config
</span><span class='line'>│   ├── deploy
</span><span class='line'>│   │   ├── production.rb
</span><span class='line'>│   │   └── staging.rb
</span><span class='line'>│   └── deploy.rb
</span><span class='line'>└── lib
</span><span class='line'>    └── capistrano
</span><span class='line'>            └── tasks</span></code></pre></td></tr></table></div></figure>


<p>deploy.rb 通常是設定 source control 的類型 (可以設定 git, hg, svn)， <br/>
project repo 的路徑，要 deploy 到 server 的哪個目錄等等，<br/>
<code>config/deploy/*</code> 底下的檔案則是根據不同的 stage 分別設定，<br/>
以下是 deploy.rb, production.rb 的一些簡單設定</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config valid only for Capistrano 3.1</span>
</span><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;application_name&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;github_repo_url&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:copy</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default branch is :master</span>
</span><span class='line'><span class="c1"># ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }.call</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default deploy_to directory is /var/www/my_app</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/server/www/path/&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :scm is :git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :format is :pretty</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:format</span><span class="p">,</span> <span class="ss">:pretty</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :log_level is :debug</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:log_level</span><span class="p">,</span> <span class="ss">:debug</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :pty is false</span>
</span><span class='line'><span class="c1"># set :pty, true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for :linked_files is []</span>
</span><span class='line'><span class="c1"># set :linked_files, %w{config/database.yml}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for linked_dirs is []</span>
</span><span class='line'><span class="c1"># set :linked_dirs, %w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for default_env is {}</span>
</span><span class='line'><span class="c1"># set :default_env, { path: &quot;/opt/ruby/bin:$PATH&quot; }</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Default value for keep_releases is 5</span>
</span><span class='line'><span class="c1"># set :keep_releases, 5</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Restart application&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">5</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Your restart mechanism here, for example:</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:mkdir</span><span class="p">,</span> <span class="s1">&#39;-p&#39;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span> <span class="n">release_path</span> <span class="si">}</span><span class="s2">/tmp&quot;</span>
</span><span class='line'>      <span class="n">execute</span> <span class="ss">:touch</span><span class="p">,</span> <span class="n">release_path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;tmp/restart.txt&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:clear_cache</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:web</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:groups</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">10</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># Here we can do anything such as:</span>
</span><span class='line'>      <span class="c1"># within release_path do</span>
</span><span class='line'>      <span class="c1">#  execute :rake, &#39;cache:clear&#39;</span>
</span><span class='line'>      <span class="c1"># end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Simple Role Syntax</span>
</span><span class='line'><span class="c1"># ==================</span>
</span><span class='line'><span class="c1"># Supports bulk-adding hosts to roles, the primary server in each group</span>
</span><span class='line'><span class="c1"># is considered to be the first unless any hosts have the primary</span>
</span><span class='line'><span class="c1"># property set.  Don&#39;t declare `role :all`, it&#39;s a meta role.</span>
</span><span class='line'>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="sx">%w{app@server}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="sx">%w{web@server}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="sx">%w{db@server}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Extended Server Syntax</span>
</span><span class='line'><span class="c1"># ======================</span>
</span><span class='line'><span class="c1"># This can be used to drop a more detailed server definition into the</span>
</span><span class='line'><span class="c1"># server list. The second argument is a, or duck-types, Hash and is</span>
</span><span class='line'><span class="c1"># used to set extended properties on the server.</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;server_ip&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;server_user&#39;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{app}</span><span class="p">,</span> <span class="n">my_property</span><span class="p">:</span> <span class="ss">:my_value</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Custom SSH Options</span>
</span><span class='line'><span class="c1"># ==================</span>
</span><span class='line'><span class="c1"># You may pass any option but keep in mind that net/ssh understands a</span>
</span><span class='line'><span class="c1"># limited set of options, consult[net/ssh documentation](http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start).</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Global options</span>
</span><span class='line'><span class="c1"># --------------</span>
</span><span class='line'><span class="c1">#  set :ssh_options, {</span>
</span><span class='line'><span class="c1">#    keys: %w(/home/rlisowski/.ssh/id_rsa),</span>
</span><span class='line'><span class="c1">#    forward_agent: true</span>
</span><span class='line'><span class="c1">#    auth_methods: %w(password)</span>
</span><span class='line'><span class="c1">#  }</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># And/or per server (overrides global)</span>
</span><span class='line'><span class="c1"># ------------------------------------</span>
</span><span class='line'> <span class="n">server</span> <span class="s1">&#39;server_ip&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;server_user&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">ssh_options</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>     <span class="ss">keys</span><span class="p">:</span> <span class="sx">%w(/user/.ssh/id_rsa)</span><span class="p">,</span>
</span><span class='line'>     <span class="n">forward_agent</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>     <span class="n">auth_methods</span><span class="p">:</span> <span class="sx">%w(publickey password)</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>設定完後，因為這邊是設定 production.rb<br/>
因此執行以下指令 deploy 到 production server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">bundle exec cap production deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>如果 <code>exit status 0 (successful).</code> <br/>
那就是成功啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Rails Server Env With Rbenv on Ubuntu 14.04]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04/"/>
    <updated>2014-07-30T11:36:54+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/30/install-rails-server-env-with-rbenv-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nodejs v0.10.25 (for rails javascript engine)
</span><span class='line'>
</span><span class='line'>rbenv 0.4.0-98-g13a474c
</span><span class='line'>
</span><span class='line'>ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]
</span><span class='line'>
</span><span class='line'>Rails 4.1.4
</span><span class='line'>
</span><span class='line'>nginx version: nginx/1.6.0
</span><span class='line'>
</span><span class='line'>Phusion Passenger version 4.0.48
</span><span class='line'>
</span><span class='line'>mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3
</span></code></pre></td></tr></table></div></figure>


<h2>Installing Ruby &amp; Rails</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get update && sudo apt-get upgrade
</span><span class='line'>sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm</span></code></pre></td></tr></table></div></figure>


<p>Use rbenv</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
</span><span class='line'>echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
</span><span class='line'>exec $SHELL
</span><span class='line'>
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class='line'>echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
</span><span class='line'>exec $SHELL
</span><span class='line'>
</span><span class='line'>rbenv install 2.1.2
</span><span class='line'>exec $SHELL
</span><span class='line'>
</span><span class='line'>rbenv global 2.1.2
</span><span class='line'>ruby -v</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t install rdoc when installing gems</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc</span></code></pre></td></tr></table></div></figure>


<p>Install rails</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rails
</span><span class='line'>exec $SHELL
</span><span class='line'>rails -v</span></code></pre></td></tr></table></div></figure>


<h2>Installing Nginx with passenger</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Install Phusion's PGP key to verify packages
</span><span class='line'>gpg --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
</span><span class='line'>gpg --armor --export 561F9B9CAC40B2F7 | sudo apt-key add -
</span><span class='line'>
</span><span class='line'># Add HTTPS support to APT
</span><span class='line'>sudo apt-get install apt-transport-https
</span><span class='line'>
</span><span class='line'># Add the passenger repository
</span><span class='line'>sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' &gt;&gt; /etc/apt/sources.list.d/passenger.list"
</span><span class='line'>sudo chown root: /etc/apt/sources.list.d/passenger.list
</span><span class='line'>sudo chmod 600 /etc/apt/sources.list.d/passenger.list
</span><span class='line'>sudo apt-get update
</span><span class='line'>
</span><span class='line'># Install nginx and passenger
</span><span class='line'>sudo apt-get install nginx-full passenger</span></code></pre></td></tr></table></div></figure>


<p>Edit passenger configuration in <code>/etc/nginx/nginx.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>##
</span><span class='line'># Phusion Passenger
</span><span class='line'>##
</span><span class='line'># Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
</span><span class='line'>##
</span><span class='line'>
</span><span class='line'>passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
</span><span class='line'>
</span><span class='line'>passenger_ruby /usr/bin/ruby; #change this line
</span><span class='line'>
</span><span class='line'># passenger_ruby /home/yourpath/.rbenv/shims/ruby; # If you use rbenv
</span><span class='line'># Use `which ruby`</span></code></pre></td></tr></table></div></figure>


<h2>Installing MySQL</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install mysql-server mysql-client libmysqlclient-dev</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] ActionController::InvalidAuthenticityToken When Useing Rails4 as API]]></title>
    <link href="http://kerkerj.github.io/blog/2014/07/03/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails-as-api/"/>
    <updated>2014-07-03T04:02:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/07/03/rails-actioncontrollerinvalidauthenticitytoken-when-useing-rails-as-api</id>
    <content type="html"><![CDATA[<p>change<br/>
<code>protect_from_forgery with: :exception</code><br/>
to<br/>
<code>protect_from_forgery with: :null_session</code><br/>
in <code>ApplicationController</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Apache] SSL (Self-signed & Purchased Version)]]></title>
    <link href="http://kerkerj.github.io/blog/2014/06/19/apache-ssl/"/>
    <updated>2014-06-19T02:32:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/06/19/apache-ssl</id>
    <content type="html"><![CDATA[<h2>[Self-signed]</h2>

<hr />

<ol>
<li>Generate a host key:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ssh-keygen -f host.key</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Generate a certificate request file</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo openssl req -new -key host.key -out request.csr</span></code></pre></td></tr></table></div></figure>


<p>Type what you want:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Country Name (2 letter code) [AU]:TW
</span><span class='line'>  State or Province Name (full name) [Some-State]:Taiwan
</span><span class='line'>  Locality Name (eg, city) []:Taipei
</span><span class='line'>  Organization Name (eg, company) [Internet Widgits Pty Ltd]:
</span><span class='line'>  Organizational Unit Name (eg, section) []:
</span><span class='line'>  Common Name (e.g. server FQDN or YOUR name) []:
</span><span class='line'>  Email Address []:
</span><span class='line'>  
</span><span class='line'>  Please enter the following 'extra' attributes
</span><span class='line'>  to be sent with your certificate request
</span><span class='line'>  A challenge password []:
</span><span class='line'>  An optional company name []:</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Create the SSL certificate
<code>sudo openssl x509 -req -days 365 -in request.csr -signkey host.key -out server.crt</code></p>

<p>  Create a nopass&#8217; key (optional)
  <code>openssl rsa -in host.key -out host.nopass.key</code></p></li>
<li><p>Configure Apache
<code>LoadModule ssl_module libexec/apache2/mod_ssl.so</code></p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLEngine on 
</span><span class='line'>SSLCertificateFile "/etc/apache2/ssl/server.crt"
</span><span class='line'>SSLCertificateKeyFile "/etc/apache2/ssl/host.nopass.key"</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl configtest 
</span><span class='line'>sudo apachectl restart </span></code></pre></td></tr></table></div></figure>


<p>p.s. enable mods: <code>sudo a2enmod ssl</code>
enable sites: <code>sudo a2ensite default-ssl</code></p>

<h2>[Purchased (Symantec)]</h2>

<hr />

<p>[<a href="http://www.symantec.com/tv/products/details.jsp?vid=1452855338001">http://www.symantec.com/tv/products/details.jsp?vid=1452855338001</a>]</p>

<object id="flashObj" width="640" height="360" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,47,0"><param name="movie" value="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" /><param name="bgcolor" value="#FFFFFF" /><param name="flashVars" value="videoId=1452855338001&linkBaseURL=http%3A%2F%2Fwww.symantec.com%2Ftv%2Fproducts%2Fdetails.jsp%3Fvid%3D1452855338001&playerID=1170996384001&playerKey=AQ~~,AAAABuIiy9k~,I8BhasVwr9yry4vRRPOpsSrBvwjFZ03K&domain=embed&dynamicStreaming=true" /><param name="base" value="http://admin.brightcove.com" /><param name="seamlesstabbing" value="false" /><param name="allowFullScreen" value="true" /><param name="swLiveConnect" value="true" /><param name="allowScriptAccess" value="always" /><embed src="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" bgcolor="#FFFFFF" flashVars="videoId=1452855338001&linkBaseURL=http%3A%2F%2Fwww.symantec.com%2Ftv%2Fproducts%2Fdetails.jsp%3Fvid%3D1452855338001&playerID=1170996384001&playerKey=AQ~~,AAAABuIiy9k~,I8BhasVwr9yry4vRRPOpsSrBvwjFZ03K&domain=embed&dynamicStreaming=true" base="http://admin.brightcove.com" name="flashObj" width="640" height="360" seamlesstabbing="false" type="application/x-shockwave-flash" allowFullScreen="true" allowScriptAccess="always" swLiveConnect="true" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></embed></object>




<object id="flashObj" width="640" height="360" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,47,0"><param name="movie" value="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" /><param name="bgcolor" value="#FFFFFF" /><param name="flashVars" value="videoId=1452855338001&linkBaseURL=http%3A%2F%2Fwww.symantec.com%2Ftv%2Fproducts%2Fdetails.jsp%3Fvid%3D1452855338001&playerID=1170996384001&playerKey=AQ~~,AAAABuIiy9k~,I8BhasVwr9yry4vRRPOpsSrBvwjFZ03K&domain=embed&dynamicStreaming=true" /><param name="base" value="http://admin.brightcove.com" /><param name="seamlesstabbing" value="false" /><param name="allowFullScreen" value="true" /><param name="swLiveConnect" value="true" /><param name="allowScriptAccess" value="always" /><embed src="http://c.brightcove.com/services/viewer/federated_f9?isVid=1&isUI=1" bgcolor="#FFFFFF" flashVars="videoId=1452855338001&linkBaseURL=http%3A%2F%2Fwww.symantec.com%2Ftv%2Fproducts%2Fdetails.jsp%3Fvid%3D1452855338001&playerID=1170996384001&playerKey=AQ~~,AAAABuIiy9k~,I8BhasVwr9yry4vRRPOpsSrBvwjFZ03K&domain=embed&dynamicStreaming=true" base="http://admin.brightcove.com" name="flashObj" width="640" height="360" seamlesstabbing="false" type="application/x-shockwave-flash" allowFullScreen="true" allowScriptAccess="always" swLiveConnect="true" pluginspage="http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash"></embed></object>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac] Update Openssl on Mac]]></title>
    <link href="http://kerkerj.github.io/blog/2014/06/16/mac-update-openssl-on-mac/"/>
    <updated>2014-06-16T09:16:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/06/16/mac-update-openssl-on-mac</id>
    <content type="html"><![CDATA[<p>First of all, you need &lsquo;brew&rsquo; (<a href="http://brew.sh/">http://brew.sh/</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew update
</span><span class='line'>$ brew install openssl
</span><span class='line'>$ brew link --force openssl
</span><span class='line'> 
</span><span class='line'>$openssl version -a</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s still the old version, you shoud:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo rm /usr/bin/openssl   #remove the old binary 
</span><span class='line'>$ sudo ln -s /usr/local/Cellar/openssl/1.0.1h/bin/openssl /usr/local/bin
</span><span class='line'>(1.0.1h -&gt; the latest version)</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>ref: <a href="http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x">http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x</a></p>
]]></content>
  </entry>
  
</feed>
