<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[kerkerj]]></title>
  <link href="http://kerkerj.github.io/atom.xml" rel="self"/>
  <link href="http://kerkerj.github.io/"/>
  <updated>2014-10-09T21:58:33+08:00</updated>
  <id>http://kerkerj.github.io/</id>
  <author>
    <name><![CDATA[kerkerj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Planning]]></title>
    <link href="http://kerkerj.github.io/blog/2014/11/01/planning/"/>
    <updated>2014-11-01T00:00:00+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/11/01/planning</id>
    <content type="html"><![CDATA[<h1>&ndash;置頂&ndash;</h1>

<p>半個月前不怕死的報名了 ithome 的<a href="http://ithelp.ithome.com.tw/ironman7/app/index">連續三十天不中斷發文鐵人賽</a>，</p>

<p>還報名了兩個主題，真的是太誇張了&hellip;</p>

<p>但是由於 ithome 的編輯器其實排版起來沒有很漂亮，</p>

<p>因此決定利用這邊先發文，再轉文到 ithome 的方式來處理，</p>

<p>比較順手一些，順便在這篇文章貼上規劃方向，topic 可能隨時會變，但大方向不變</p>

<p>第一次寫的主題都幾乎不是自己專精的技術，</p>

<p>規劃表如下： (Evernote 連結)</p>

<p><a href="https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg">https://www.evernote.com/l/AFFz7an43x1K46hErAgyJdD5K9BuFFMN9Dg</a></p>

<p>因此若有錯誤也請有看到的大大們多多幫忙指正囉！</p>

<p>有時候會因為比較忙，可能文章比較精簡一些，還請大家多多包涵 :P</p>

<p>有任何文章更新也會同步在此篇文章中!</p>

<h2>RESTful API Service:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d1/">[API-d1] - 定義 1 - 什麼是 REST/RESTful?</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/api-d2/">[API-d2] - 定義 2 - RESTful 的優點與要求</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/api-d3/">[API-d3] - 使用時機與實際 API 參考</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/api-d4/">[API-d4] - 使用技術與工具介紹及原因</a><br/>
Day5  -  <a href="http://kerkerj.github.io/blog/2014/10/05/api-d5/">[API-d5] - [Server 番外篇] 建立自己的本機虛擬伺服器 1 - Vagrant + VirtualBox 安裝</a><br/>
Day6  -  <a href="http://kerkerj.github.io/blog/2014/10/06/api-d6/">[API-d6] - [Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB </a><br/>
Day7  -  <a href="http://kerkerj.github.io/blog/2014/10/07/api-d7/">[API-d7] - [Server 番外篇] 建立自己的本機虛擬伺服器 3 - 打包環境</a><br/>
Day8  -  <a href="http://kerkerj.github.io/blog/2014/10/08/api-d8/">[API-d8] - Node.js - Hello World!</a><br/>
Day9  -  <a href="http://kerkerj.github.io/blog/2014/10/09/api-d9/">[API-d9] - NVM 與 NPM 使用</a><br/>
Day10 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day11 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day12 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day13 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day14 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day15 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day16 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day17 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day18 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day19 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day20 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day21 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day22 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day23 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day24 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day25 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day26 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day27 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>

<h2>Swift:</h2>

<p>Day1  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/">[Swift-d1] - 介紹</a><br/>
Day2  -  <a href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/">[Swift-d2] - 安裝及 Hello World!</a><br/>
Day3  -  <a href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/">[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別</a><br/>
Day4  -  <a href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/">[Swift-d4] - Playground - Optional, ! and ? </a><br/>
Day5  -  <a href="http://kerkerj.github.io/blog/2014/10/05/swift-d5/">[Swift-d5] - Playground - Array, Dictionary, Controll Flow</a><br/>
Day6  -  <a href="http://kerkerj.github.io/blog/2014/10/06/swift-d6/">[Swift-d6] - Playground - function</a><br/>
Day7  -  <a href="http://kerkerj.github.io/blog/2014/10/07/swift-d7/">[Swift-d7] - Playground - Closures</a><br/>
Day8  -  <a href="http://kerkerj.github.io/blog/2014/10/08/swift-d8/">[Swift-d8] - Playground - Enumerations</a><br/>
Day9  -  <a href="http://kerkerj.github.io/blog/2014/10/09/swift-d9/">[Swift-d9] - Playground - Class, Struct</a><br/>
Day10 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day11 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day12 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day13 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day14 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day15 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day16 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day17 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day18 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day19 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day20 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day21 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day22 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day23 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day24 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day25 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day26 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day27 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day28 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day29 -  <a href="http://kerkerj.github.io/">#</a><br/>
Day30 -  <a href="http://kerkerj.github.io/">#</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d9] - Playground - Class, Struct]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/09/swift-d9/"/>
    <updated>2014-10-09T21:46:17+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/09/swift-d9</id>
    <content type="html"><![CDATA[<h1>Playground - Class, Struct</h1>

<p>再來就是要提重點的東西了!</p>

<p>class 和 struct 是用來建構整個程式重要的東西</p>

<p>兩者的差異在於：class 可以繼承其他 class，但是 struct 無法繼承</p>

<p>以下是宣告方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">SomeClass</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">SomeStruct</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，Swift 的 class 和 struct 命名慣例是大寫命名風格 <code>UpperCamelCase</code></p>

<p>而屬性和方法則是 <code>lowerCamelCase</code></p>

<p>例如 <code>increaseCount</code>, <code>addTwoInts</code></p>

<p>舉個例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Resolution</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="n">CustomLabel</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">resolution</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">()</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">isLabel</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>實體化，就可以改變其中的值了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">someResolution</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="n">someLabel</span> <span class="o">=</span> <span class="n">CustomLabel</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">someResolution</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">100</span>
</span><span class='line'><span class="n">someLabel</span><span class="p">.</span><span class="n">resolution</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">200</span>
</span></code></pre></td></tr></table></div></figure>


<p>就是一直 <code>點</code> 下去就對了!</p>

<p>Struct 我們也可以直接給定初始值，class 就不能這樣做了~</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">someResolution</span> <span class="o">=</span> <span class="n">Resolution</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">300</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>sttuct 的 Getter 和 Setter 只存在於 computed properties</p>

<p>亦即是必須要被計算過的才能使用 Getter, Setter</p>

<p>以下就直接看別人的例子吧:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Size</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Rect</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">Point</span><span class="p">()</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Size</span><span class="p">()</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">center</span><span class="p">:</span> <span class="n">Point</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">centerX</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">centerY</span> <span class="o">=</span> <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">centerX</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">centerY</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">set</span><span class="p">(</span><span class="n">newCenter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">newCenter</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">newCenter</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">square</span> <span class="o">=</span> <span class="n">Rect</span><span class="p">(</span><span class="nl">origin</span><span class="p">:</span> <span class="n">Point</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">),</span>
</span><span class='line'>    <span class="nl">size</span><span class="p">:</span> <span class="n">Size</span><span class="p">(</span><span class="nl">width</span><span class="p">:</span> <span class="mf">10.0</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mf">10.0</span><span class="p">))</span>
</span><span class='line'><span class="k">let</span> <span class="n">initialSquareCenter</span> <span class="o">=</span> <span class="n">square</span><span class="p">.</span><span class="n">center</span>
</span><span class='line'><span class="n">square</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mf">15.0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mf">15.0</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;square.origin is now at (\(square.origin.x), \(square.origin.y))&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Struct 和 enum 是一種值型別</h3>

<p>值型別的的例子像是 Int, String &hellip;.</p>

<p>那 struct 和 enum 也是，都是以值來操作的</p>

<h3>Class 是參考型別</h3>

<h2>使用時機</h2>

<p>struct:</p>

<ul>
<li>用來封裝少量相關的資料</li>
<li>不需要繼承</li>
<li>是 copy value 而不是 reference</li>
</ul>


<p>例如：Label 的長寬, 三角形的三個點</p>

<h2>Class 二三事</h2>

<p>礙于篇幅關係，這邊簡單講解一些 class 比較重要的點</p>

<p>通常一個 class 裡面會有一些 variable 與 methods</p>

<p>通常還會有靜態的 variables, methods 或是 建構子 (constructor)</p>

<p>甚至是延遲載入一個變數</p>

<p>下面就簡單寫了一個 class 來說明這幾個部分</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">height</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 型別屬性 (靜態變數)</span>
</span><span class='line'>    <span class="k">class</span> <span class="k">var</span> <span class="nl">isAnimal</span><span class="p">:</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 初始化時必定輸入 name, 必須知道初始化時變數所代表的意義</span>
</span><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 型別方法 (靜態方法)</span>
</span><span class='line'>    <span class="k">class</span> <span class="k">func</span> <span class="n">sayHi</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hi!&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayYa</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Ya&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">final</span> <span class="k">func</span> <span class="n">car</span><span class="p">(</span><span class="err">#</span><span class="nl">title</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">title</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lazy</span> <span class="k">var</span> <span class="nl">personalizedGreeting</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="kr">unowned</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hello, \(self.name)!&quot;</span>
</span><span class='line'>    <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Kerkerj&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">personalizedGreeting</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">car</span><span class="p">(</span><span class="nl">title</span><span class="p">:</span> <span class="s">&quot;Toyota&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">sayYa</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Person</span><span class="p">.</span><span class="n">sayHi</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Person</span><span class="p">.</span><span class="n">isAnimal</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>self</code> 的意思就代表 class 自己，就字面上來看應該蠻好懂的</p>

<p>通常 <code>lazy</code> 的使用時機在於，</p>

<p>有個值需要被複雜或大量計算時，或是初始化時可能需要大量計算時，</p>

<p>我們可以加入 <code>lazy</code>，使該變數在需要操作時再計算</p>

<p>下面再簡單講一點繼承的東西</p>

<p>直接看例子，我設定了一個 class 稱為 Man，繼承自 Person</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Man</span><span class="p">:</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">class</span> <span class="k">var</span> <span class="nl">sex</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Male&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">sayYa</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;YAYA&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">func</span> <span class="n">sayYo</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;YO&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">kerkerj</span> <span class="o">=</span> <span class="n">Man</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;kerkerj&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">kerkerj</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">kerkerj</span><span class="p">.</span><span class="n">sayYa</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">kerkerj</span><span class="p">.</span><span class="n">sayYo</span><span class="p">())</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Man</span><span class="p">.</span><span class="n">sex</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以觀察一下自動補完的選項，當輸入 <code>kerkerj.</code> 時</p>

<p>後面會出現除了 Man 這個 class 本身提供的變數與方法外，</p>

<p>還有 Person 的變數與方法，這就是因為 Man 繼承自 Person 的關係</p>

<p>Man 裡面覆寫了 init, sayYa 的方法，</p>

<p>原本 sayYa 只會出現一次 &ldquo;YA&rdquo;, 覆寫過後會出現兩次變成 &ldquo;YAYA&rdquo;</p>

<p>另外 Man 再多加了一個 sayYo 的方法</p>

<p>如果父類別的某些方法不想被覆寫，在關鍵字前加上 <code>final</code></p>

<p>就可以防止被覆寫</p>

<hr />

<p>以上是一些 class 和 struct 的特性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d9] - NVM 與 NPM 使用]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/09/api-d9/"/>
    <updated>2014-10-09T21:46:12+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/09/api-d9</id>
    <content type="html"><![CDATA[<h1>NVM 與 NPM 使用</h1>

<h2>NVM - Node.js Version Manager</h2>

<h3>安裝</h3>

<p>如果是 Ubuntu 的話必須先要有 <code>build-essential</code> 和 <code>libssl-dev</code> 套件</p>

<p>不過這個我們之前就裝過了，所以直接安裝 NVM 吧~</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl https://raw.githubusercontent.com/creationix/nvm/v0.17.2/install.sh | bash
</span><span class='line'>$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure>


<h3>使用 NVM 安裝 node.js</h3>

<p>先前我們有使用 Ubuntu 本身的 apt-get 安裝 Node.js</p>

<p>不過那是被安裝到 /usr/bin/node</p>

<p>有時候要安裝套件需要 sudo 提供管理者權限</p>

<p>非常麻煩，因此我們使用 NVM 來安裝另一個 Node.js</p>

<p>這個 Node.js 的執行檔就任我們使用，不需要提供管理者權限了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm install 0.10</span></code></pre></td></tr></table></div></figure>


<p>nvm 就會安裝 0.10 版本，安裝完後就要使用它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm use 0.10</span></code></pre></td></tr></table></div></figure>


<p>再來我們把 nvm 的 node.js 設定成預設的 node</p>

<p>否則重開機後，node 指令會變回原本系統的 node</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm alias default 0.10</span></code></pre></td></tr></table></div></figure>


<p>我們觀察一下現在使用的 node 指令是哪裡來的:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ which node
</span><span class='line'>/home/vagrant/.nvm/v0.10.32/bin/node</span></code></pre></td></tr></table></div></figure>


<p>Good! 他已經被安裝到我們使用者目錄底下了</p>

<p>原本的系統 Node.js 是在 <code>/usr/bin/node</code></p>

<p>如果要切換回系統的 Node.js:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nvm use system
</span><span class='line'>Now using system version of node: v0.10.32.
</span><span class='line'>
</span><span class='line'>// 看一下現在使用 node 的路徑
</span><span class='line'>$ which node
</span><span class='line'>/usr/bin/node</span></code></pre></td></tr></table></div></figure>


<h2>NPM - Node.js Package Manager</h2>

<p>NPM 顧名思義就是 node.js 的套件管理系統，</p>

<p>世界上有許許多多的開發者為 Node.js 開發了許許多多的套件，</p>

<p>我們受惠于此，也不用再自己造輪子，拿這些佛心的大大的套件來使用，打造出我們想要的服務，</p>

<p>像我們接下來會使用的 Express 和 Mongodb 的 driver 都是別人寫好開放出來給大家用的！</p>

<p>下面簡單介紹 NPM 的使用方式</p>

<h3>初始化專案資料夾</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm init </span></code></pre></td></tr></table></div></figure>


<p>終端機會詢問各種問題來幫忙建立 package.json 的檔案</p>

<p>是在資料夾中建立專案前必下的指令</p>

<p>並且，使用 package.json 有個好處</p>

<p>只要將 package.json 給其他人</p>

<p>其他人只需要將 package.json 放到某個資料夾</p>

<p>並下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install</span></code></pre></td></tr></table></div></figure>


<p>就會在該資料夾安裝 package.json 中列出的所有套件</p>

<p>就不需要一個一個尋找及安裝，非常方便！</p>

<h3>安裝套件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 安裝全域套件
</span><span class='line'>$ npm install [套件名稱] -g
</span><span class='line'>
</span><span class='line'>// 安裝套件在專案資料夾 
</span><span class='line'>// 會安裝在目前所在的資料夾，所以要下此指令必須先確認自己是否在專案根目錄
</span><span class='line'>$ npm install [套件名稱]
</span><span class='line'>
</span><span class='line'>// 通常專案資料夾底下都會有一個 package.json 來管理套件相依性
</span><span class='line'>// 如果在專案資料夾底下下此指令，會將你所安裝的套件加入 package.json 中
</span><span class='line'>// 一樣也是要先確認自己是否在專案目錄底下
</span><span class='line'>$ npm install [套件名稱] -save</span></code></pre></td></tr></table></div></figure>


<h3>移除套件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 移除全域套件
</span><span class='line'>$ npm uninstall [套件名稱] -g
</span><span class='line'>
</span><span class='line'>// 移除在專案資料夾的某個套件 
</span><span class='line'>// 會移除在目前所在的資料夾某個套件，所以要下此指令必須先確認自己是否在專案根目錄
</span><span class='line'>$ npm uninstall [套件名稱]
</span><span class='line'>
</span><span class='line'>// 通常專案資料夾底下都會有一個 package.json 來管理套件相依性
</span><span class='line'>// 如果在專案資料夾底下下此指令，會將你所移除的套件從 package.json 中刪除
</span><span class='line'>// 一樣也是要先確認自己是否在專案目錄底下
</span><span class='line'>$ npm uninstall [套件名稱] -save</span></code></pre></td></tr></table></div></figure>


<h3>列出套件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 列出全域套件
</span><span class='line'>$ npm ls -g
</span><span class='line'>
</span><span class='line'>// 列出全域套件詳細資訊
</span><span class='line'>$ npm ls -gl
</span><span class='line'>
</span><span class='line'>// 在專案資料夾底下：
</span><span class='line'>
</span><span class='line'>// 列出專案資料夾的套件
</span><span class='line'>$ npm ls 
</span><span class='line'>
</span><span class='line'>// 列出專案資料夾的詳細套件資訊
</span><span class='line'>$ npm ls -l</span></code></pre></td></tr></table></div></figure>


<h3>更新套件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 更新全域套件
</span><span class='line'>$ npm update -g
</span><span class='line'>
</span><span class='line'>// 在專案資料夾底下：
</span><span class='line'>
</span><span class='line'>// 更新專案套件
</span><span class='line'>$ npm update </span></code></pre></td></tr></table></div></figure>


<h3>搜尋套件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm search [套件名稱]</span></code></pre></td></tr></table></div></figure>


<h2>注意!!</h2>

<p>請注意，使用系統 Node.js 的 npm 所安裝的套件，是屬於系統 Node.js 的</p>

<p>切換到使用者目錄底下的 Node.js 時，是不會共用系統 npm 的套件的</p>

<p>請注意這一點，接下來我們都會使用 nvm 的 node.js</p>

<p>我們可以透過以下例子來驗證:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 使用系統 node.js
</span><span class='line'>$ nvm use system
</span><span class='line'>Now using system version of node: v0.10.32.
</span><span class='line'>
</span><span class='line'>// 查看 npm 全域套件
</span><span class='line'>$ npm list -g  
</span><span class='line'>/usr/lib
</span><span class='line'>├─┬ express@4.9.5
</span><span class='line'>│ ├─┬ accepts@1.1.1
</span><span class='line'>│ │ ├─┬ mime-types@2.0.2
</span><span class='line'>│ │ │ └── mime-db@1.1.0
</span><span class='line'>│ │ └── negotiator@0.4.8
</span><span class='line'>....
</span><span class='line'>
</span><span class='line'>// 使用 nvm node.js
</span><span class='line'>$ nvm use 0.10
</span><span class='line'>Now using node v0.10.32
</span><span class='line'>
</span><span class='line'>// 查看 npm 全域套件
</span><span class='line'>$ npm list -g 
</span><span class='line'>/home/vagrant/.nvm/v0.10.32/lib
</span><span class='line'>└─┬ npm@1.4.28
</span><span class='line'>  ├── abbrev@1.0.5
</span><span class='line'>  ├── ansi@0.3.0
</span><span class='line'>  ├── ansicolors@0.3.2
</span><span class='line'>  ├── ansistyles@0.1.3
</span><span class='line'>  ├── archy@0.0.2
</span><span class='line'>  ├── block-stream@0.0.7
</span><span class='line'>  ├── char-spinner@1.0.1
</span><span class='line'>  ├── child-process-close@0.1.1
</span><span class='line'>  ├── chmodr@0.1.0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>主要差別就在於 列出全域套件時，還會提醒你這些套件裝在哪裡，如果不是裝在使用者目錄底下，</p>

<p>表示現在用的是系統的 Node.js</p>

<p>因此發現自己不對了就快換回來吧，如果系統裝爛了，也可以利用先前打包的 box 還原哦!</p>

<h2>怎麼找套件?</h2>

<p>套件那麼多，我要到哪裡找？</p>

<p>除了根據自己的需求 Google 外，</p>

<p>下面是 Node.js module 的官方網站: <a href="https://nodejsmodules.org/">https://nodejsmodules.org/</a></p>

<p>有做最受歡迎的套件排名，進去瀏覽一下，有時候會發現一些好用的套件哦!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d8] - Playground - Enumerations]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/08/swift-d8/"/>
    <updated>2014-10-08T13:04:25+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/08/swift-d8</id>
    <content type="html"><![CDATA[<h1>Playground - Enumerations</h1>

<p>通常會使用來定義一組相關的值</p>

<p>也是很方便的東西</p>

<h2>列舉語法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">SomeEnumeration</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// enumeration definition goes here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>比方說，車子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Car</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">toyota</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">benz</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">BMW</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以這樣寫</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Car</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">toyota</span><span class="p">,</span> <span class="n">benz</span><span class="p">,</span> <span class="n">BMW</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">.</span><span class="n">benz</span>
</span></code></pre></td></tr></table></div></figure>


<h2>和 Switch 的搭配</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Car</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Toyota</span><span class="p">,</span> <span class="n">Benz</span><span class="p">,</span> <span class="n">BMW</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">car</span> <span class="o">=</span> <span class="n">Car</span><span class="p">.</span><span class="n">Benz</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="n">car</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">Toyota</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Toyota&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">Benz</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Benz&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">BMW</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;BMW&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Associated Values</h2>

<p>以 Barcode 來舉例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Barcode</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UPCA</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">QRCode</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">productBarcode</span> <span class="o">=</span> <span class="n">Barcode</span><span class="p">.</span><span class="n">UPCA</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8948</span><span class="p">,</span> <span class="mi">333</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們可以借此來定義一些結構</p>

<h2>Raw Values</h2>

<p>我們可以先給定預設值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="nl">Barcode</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">UPCA</span> <span class="o">=</span> <span class="s">&quot;upca&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">QRCode</span> <span class="o">=</span> <span class="s">&quot;qrcode&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">productBarcode</span> <span class="o">=</span> <span class="n">Barcode</span><span class="p">.</span><span class="n">UPCA</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">productBarcode</span><span class="p">.</span><span class="n">toRaw</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以透過 raw value 來找尋</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">Barcode</span><span class="p">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="s">&quot;qrcode&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>這個部分雖然不多，但是很實用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d8] - Node.js - Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/08/api-d8/"/>
    <updated>2014-10-08T13:04:20+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/08/api-d8</id>
    <content type="html"><![CDATA[<h1>Node.js - Hello World!</h1>

<p>一樣先開虛擬機哦~</p>

<p>並且開啟終端機連進 server 裡面~</p>

<p>以下是 <a href="http://nodejs.org/">Node.js</a> 官方網站的 web server 程式範例，我稍作小修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Server running at http://0.0.0.0:1337/&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們先在虛擬機的資料夾建立一個子資料夾 &lsquo;HelloWorld&rsquo;</p>

<p>在 HelloWorld 資料夾裡面建立一個 app.js</p>

<p>內容如上，存檔。</p>

<p>使用終端機進入 server :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">vagrant</span> <span class="nx">ssh</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">cd</span> <span class="o">/</span><span class="nx">vagrant</span><span class="o">/</span><span class="nx">HelloWorld</span>
</span><span class='line'><span class="nx">$</span> <span class="nx">node</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>到瀏覽器輸入 <a href="http://192.168.33.10:1337/">http://192.168.33.10:1337/</a></p>

<p>(或者是你的 Vagrantfile 裡面設定的 private IP)</p>

<p>即可看到 Hello World 了！</p>

<p>要關掉 Server 也非常簡單，回到下指令的地方，按下 ctrl + c 即可中斷程式</p>

<h2>分析</h2>

<p>簡單分析一下此段程式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>將 http 這個模組引入，並指定給物件 http</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;0.0.0.0&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>先略過中間的 function 不看，<br/>
這段 code 的用意即是讓呼叫 http 物件中的 createServer 的方法，
.listen() 則是設定該 server 要跑在哪個 port、hostname</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的 code 則是原本在 .createServer() 裡的，
我們可以看一下 Node.js 的 API doc <a href="http://nodejs.org/api/http.html#http_http_createserver_requestlistener">關於此方法的部分</a></p>

<p>.createServer() 要帶入的東西其實是一個 requestListener，<br/>
也就是當 Server 跑起來時，我們開啟瀏覽器，輸入 127.0.0.1:1337 時，<br/>
Node.js Server 要回丟的東西，因此觀察一下此 listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>function 中帶入參數的是 req, res，意即 request, response，<br/>
request 即是 server 接收到 client 端的訊息，<br/>
response 則是 server 要回丟給 client 的訊息，<br/>
由於在此範例中，我們只是要回丟給 client 端一個 hello world 的訊息，
因此，我們不處理 client 送給 server 的 request，
我們只需處理要回丟給 client 的訊息，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World\n&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>寫網頁的開發者應該對一些關鍵字例如 Content-type, text/plain 不陌生，<br/>
第一行代表回傳給使用者的訊息中，HTTP HEAD 的設定是 http status code 200,
並且 Content-type 設定為 text/plain</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>那麼，以下這行 code 的意思即是，此次要回送給使用者的訊息到這裡結束，以 &ldquo;Hello World&rdquo; 作結尾</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;Hello World\n&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>因此整段 code 看下來，就是一個非常簡單的 http server，</p>

<p><a href="http://192.168.33.10:1337/">http://192.168.33.10:1337/</a> 總是會回傳 Hello World</p>

<p>今天就完成了我們的 Hello World 了!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d7] - Playground - Closures]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/07/swift-d7/"/>
    <updated>2014-10-07T19:12:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/07/swift-d7</id>
    <content type="html"><![CDATA[<p>閉包表達式語法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span> <span class="p">(</span><span class="n">parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">returnType</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">statements</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>舉個例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">multiple</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">multiple</span><span class="p">:</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">multiple</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">multiple</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 <code>multiple</code> function 中需要傳入一個 <code>function</code></p>

<p>在這邊我們並沒有另外定義，而是直接使用閉包的方式傳入一個 <code>function</code></p>

<p>這個閉包就符合了上面的定義</p>

<h2>根據上下文判斷型別 (Inferring type from context)</h2>

<p>承上一個例子，我們可以寫得更簡潔一點</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">multiple</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">{</span> <span class="n">value</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>這是因為 Swift 會根據兩邊的定義來判斷型別，因此可以寫得更簡潔一些</p>

<h3>參數名稱縮寫, 運算子函式</h3>

<p>直接看例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">biggerThan0</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">isBigger</span><span class="p">:</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isBigger</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">biggerThan0</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>尾隨閉包 (trailing closures)</h3>

<p>通常如果閉包太長的話，可以把閉包接在括號後面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">someFunc</span><span class="p">(</span><span class="nl">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// main</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">someFunc</span><span class="p">({</span>
</span><span class='line'>  <span class="c1">// closure main</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">somFunc</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// closure main</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上面的例子做例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">biggerThan0</span><span class="p">(</span><span class="nl">value</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">isBigger</span><span class="p">:</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isBigger</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">biggerThan0</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是不需要參數的話，甚至可以把 () 省略掉</p>

<p>這邊直接參考一下別人的例子，是使用 array map 方法</p>

<p>下面要做的事情是</p>

<p>將 [16,58,510] 轉成 [&ldquo;OneSix&rdquo;, &ldquo;FiveEight&rdquo;, &ldquo;FiveOneZero&rdquo;]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">digitNames</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">0</span><span class="o">:</span> <span class="s">&quot;Zero&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span> <span class="s">&quot;One&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span> <span class="s">&quot;Two&quot;</span><span class="p">,</span>   <span class="mi">3</span><span class="o">:</span> <span class="s">&quot;Three&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="o">:</span> <span class="s">&quot;Four&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">5</span><span class="o">:</span> <span class="s">&quot;Five&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">:</span> <span class="s">&quot;Six&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">:</span> <span class="s">&quot;Seven&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="o">:</span> <span class="s">&quot;Eight&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="o">:</span> <span class="s">&quot;Nine&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">510</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="k">var</span> <span class="n">number</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>    <span class="k">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">digitNames</span><span class="p">[</span><span class="n">number</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="n">output</span>
</span><span class='line'>        <span class="n">number</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>這個例子中，array 的 map 會用後面接的閉包，接連的處理陣列裡面的元素</p>

<p>所以最後 strings 的陣列就是處理過後的陣列</p>

<p>而處理的方法則是將 Int 的每個位數分別轉換成 String 連接起來再回傳</p>

<p>很方便的方法!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d7] - [Server 番外篇] 建立自己的本機虛擬伺服器 3 - 打包環境]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/07/api-d7/"/>
    <updated>2014-10-07T19:12:40+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/07/api-d7</id>
    <content type="html"><![CDATA[<p>昨天我們已經把一個全新乾淨的環境架起來了</p>

<p>這時候我們不希望因為日後的操作導致 Server 環境髒掉，又要重灌</p>

<p>因此我們今天就來練習一下如何使用 vagrant 打包環境!</p>

<h2>Vagrant 打包</h2>

<p>一樣先進入虛擬機資料夾，先確保虛擬機沒有在運作:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant status
</span><span class='line'>Current machine states:
</span><span class='line'>
</span><span class='line'>default                   poweroff (virtualbox)
</span><span class='line'>
</span><span class='line'>The VM is powered off. To restart the VM, simply run `vagrant up`</span></code></pre></td></tr></table></div></figure>


<p>如果是 poweroff 的話，就可以進行接下來的動作，如果是其他狀態的話，就先下關機指令囉</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant package
</span><span class='line'>==&gt; default: Clearing any previously set forwarded ports...
</span><span class='line'>==&gt; default: Exporting VM...
</span><span class='line'>==&gt; default: Compressing package to: /Users/.../ithome/package.box</span></code></pre></td></tr></table></div></figure>


<p>vagrant 就會在虛擬機器資料夾底下建立一個 package.box</p>

<p>這個檔案就是整個伺服器環境的檔案了!</p>

<p>假設今天想要讓團隊成員使用，只要他們都有 VirtualBox + Vagrant 的話，</p>

<p>就可以依循下面的指令步驟將你所做的 box 匯入並使用：</p>

<p>首先我們可以先看看原本所使用的 box 清單:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box list
</span><span class='line'>ubuntu/trusty64                          (virtualbox, 14.04)</span></code></pre></td></tr></table></div></figure>


<p>是 <code>ubuntu/trusty64</code> 沒錯！</p>

<p>那麼我們現在想要加入剛剛所製作的 box ，並重新命名：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add my_box package.box
</span><span class='line'>==&gt; box: Adding box 'my_box' (v0) for provider:
</span><span class='line'>    box: Downloading: file:///Users/.../ithome/package.box
</span><span class='line'>==&gt; box: Successfully added box 'my_box' (v0) for 'virtualbox'!</span></code></pre></td></tr></table></div></figure>


<p>此時再看看 box 清單:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box list
</span><span class='line'>ubuntu/trusty64                          (virtualbox, 14.04)
</span><span class='line'>my_box                                   (virtualbox, 0)</span></code></pre></td></tr></table></div></figure>


<p>就會多一個了!</p>

<p><code>vagrant box add my_box package.box</code></p>

<p>這個指令的意思是將 <code>package.box</code> 加入 box 清單，並以 my_box 命名</p>

<p><code>package.box</code> 可以是本機路徑，也可以是網址，</p>

<p>如果要分享給團隊成員使用，就可以使用 url 分享，其他人就可以下指令來下載 box 並加入 box list</p>

<p>例如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add my_box http://my_dropbox.com/package.box</span></code></pre></td></tr></table></div></figure>


<p>接著其他人就可以建立自己的虛擬機資料夾，並且到該資料夾中下指令就可以初始化虛擬機器了，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/my_machine/
</span><span class='line'>$ cd ~/my_machine/
</span><span class='line'>$ vagrant init my_box </span></code></pre></td></tr></table></div></figure>


<p>超方便的啦～</p>

<p>如果想要從 box list 中刪除不需要的 box，下此指令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box remove my_box
</span><span class='line'>Are you sure you want to remove this box? [y/N] y</span></code></pre></td></tr></table></div></figure>


<p>上面只會刪除 box 清單，</p>

<p>如果要刪除虛擬機器資料夾，以及虛擬機器的所有檔案的話，先到虛擬機器資料夾，然後下此指令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant destroy
</span><span class='line'>    default: Are you sure you want to destroy the 'default' VM? [y/N] y</span></code></pre></td></tr></table></div></figure>


<p>虛擬機就會被移除，再來只要將該資料夾砍掉即可～ 就恢復成乾乾淨淨的了~</p>

<p>是不是很方便勒~~</p>

<p>接下來我們就會開始先寫寫 Node.js 的 Hello World 囉~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d6] - Playground - Function]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/06/swift-d6/"/>
    <updated>2014-10-06T18:54:13+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/06/swift-d6</id>
    <content type="html"><![CDATA[<h1>Playground - function</h1>

<p>來看看 Swift 各種 function 的寫法吧!</p>

<p>Swift 使用 <code>func</code> 當作宣告的保留字</p>

<p>GOLANG 的 fu&hellip;. XD</p>

<p>寫 Swift 的 function 會很開心</p>

<h2>基本的</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>有一個回傳值的</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">say</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Hello!&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>有多個回傳值的!!! (就是回傳 Tuple)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">times</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">greeting</span><span class="p">,</span> <span class="n">times</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>有參數的</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="nl">g</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>多個參數</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="nl">g</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">times</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>有參數的進階版</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="n">greetings</span> <span class="nl">g</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此時如果同樣使用 <code>say("hello")</code> 會出錯</p>

<p>因為我們剛剛宣告了外部參數名稱</p>

<p>因此需要:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">say</span><span class="p">(</span><span class="nl">greetings</span><span class="p">:</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>這種寫法在必須代入許多參數時，非常好用，會讓程式可讀性變高</p>

<p>另外，方便起見，也可以加上 <code>#</code>，表示外部參數名稱與 func 內部名稱是一樣的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="n">greetings</span> <span class="nl">g</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="err">#</span><span class="nl">times</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="nl">greetings</span><span class="p">:</span> <span class="s">&quot;Hello&quot;</span><span class="p">,</span> <span class="nl">times</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到第一種寫法和第二種寫法是一樣的功用~</p>

<h2>給參數預設值</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="n">greetings</span> <span class="nl">g</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">say</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果呼叫 <code>say()</code> 而沒有給定參數時，會直接使用預設值</p>

<h2>常數參數與變數參數</h2>

<p>簡單看一下以下的程式碼</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="nl">greetings</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">greetings</span> <span class="o">=</span> <span class="s">&quot;\(greetings), welcome!&quot;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">greetings</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">greetings</span> <span class="o">=</span> <span class="s">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="nl">greetings</span><span class="p">:</span> <span class="n">greetings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們定義了一個常數，代入 say() 裡面，</p>

<p>但是 say function 裡面必須改變代入的值，於是這個時候 Xcode 就會該了</p>

<p>那要怎麼辦呢?</p>

<p>修改成:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">say</span><span class="p">(</span><span class="k">var</span> <span class="nl">greetings</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">greetings</span> <span class="o">=</span> <span class="s">&quot;\(greetings), welcome!&quot;</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">greetings</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">greetings</span> <span class="o">=</span> <span class="s">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">say</span><span class="p">(</span><span class="nl">greetings</span><span class="p">:</span> <span class="n">greetings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>多加一個 <code>var</code> 宣告，就會 copy 一份傳入，就可以更改值了!</p>

<p>一樣是非常有用的語法!</p>

<h2>輸入輸出函數</h2>

<p>直接看例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">swapInt</span><span class="p">(</span><span class="k">inout</span> <span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">inout</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">tmpA</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">tmpA</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>酷吧</p>

<h2>function types 函式型別</h2>

<p>直接看例子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">addTwoInt</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">mTwoInt</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">printHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello World&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">mathFunction</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">addTwoInt</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;result: \(mathFunction(2, 3))&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>前面宣告了三個 function ，</p>

<p>而</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">mathFunction</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">addTwoInt</span>
</span></code></pre></td></tr></table></div></figure>


<p>後面的這句的意思是:</p>

<p>我們定義了一個變數叫做 <code>mathFunction</code>，</p>

<p>他的型別是「一個 (Int, Int) 的參數，並且回傳 Int」的 function，</p>

<p>簡單說就是 mathFunction 的型別是一個 Function</p>

<p>並指向 addTwoInt 這個 function</p>

<p>所以上面的例子中，<code>mathFunction</code> 代入的 <code>(2, 3)</code> 會丟給 addTwoInt，</p>

<p>並且最後回傳 Int</p>

<p>有 javascript 的味道:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">test</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;result = &quot;</span> <span class="o">+</span> <span class="nx">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2>function as parameter types</h2>

<p>函式也可以拿來當做參數傳入函式中，</p>

<p>接續上面的例子，加入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">func</span> <span class="nx">printResult</span><span class="p">(</span><span class="nx">mathFunction</span><span class="o">:</span> <span class="p">(</span><span class="nx">Int</span><span class="p">,</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">a</span><span class="o">:</span> <span class="nx">Int</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="nx">Int</span> <span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Result: \(mathFunction(a, b))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">printResult</span><span class="p">(</span><span class="nx">mathFunction</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>function as return type</h2>

<p>函式也可以拿來當做回傳值</p>

<p>就是在原本的回傳符號 <code>-&gt;</code> 後面代入函式型別</p>

<p>這邊直接借別人的例子來參考吧</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 定義兩個 function </span>
</span><span class='line'><span class="nx">func</span> <span class="nx">stepForward</span><span class="p">(</span><span class="nx">input</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">input</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">stepBackward</span><span class="p">(</span><span class="nx">input</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">input</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 再定義一個 function ，透過布林值導往上面不同的 function</span>
</span><span class='line'><span class="nx">func</span> <span class="nx">chooseStepFunction</span><span class="p">(</span><span class="nx">backwards</span><span class="o">:</span> <span class="nx">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">backwards</span> <span class="o">?</span> <span class="nx">stepBackward</span> <span class="o">:</span> <span class="nx">stepForward</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 將 chooseStepFunction 指給 moveNearerToZero</span>
</span><span class='line'><span class="c1">// 所以 moveNearerToZero 現在是一個 function 了!</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">moveNearerToZero</span> <span class="o">=</span> <span class="nx">chooseStepFunction</span><span class="p">(</span><span class="nx">currentValue</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;Counting to zero:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Counting to zero:</span>
</span><span class='line'><span class="k">while</span> <span class="nx">currentValue</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">println</span><span class="p">(</span><span class="s2">&quot;\(currentValue)... &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">currentValue</span> <span class="o">=</span> <span class="nx">moveNearerToZero</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">println</span><span class="p">(</span><span class="s2">&quot;zero!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Nested Function</h2>

<p>就是 funciton 中的 function，變數有分 global、local 變數，function 也有</p>

<p>以上面的例子來改寫:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">func</span> <span class="nx">chooseStepFunction</span><span class="p">(</span><span class="nx">backwards</span><span class="o">:</span> <span class="nx">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">stepForward</span><span class="p">(</span><span class="nx">input</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">input</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">func</span> <span class="nx">stepBackward</span><span class="p">(</span><span class="nx">input</span><span class="o">:</span> <span class="nx">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">input</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">backwards</span> <span class="o">?</span> <span class="nx">stepBackward</span> <span class="o">:</span> <span class="nx">stepForward</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d6] - [Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/06/api-d6/"/>
    <updated>2014-10-06T18:54:07+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/06/api-d6</id>
    <content type="html"><![CDATA[<h1>[Server 番外篇] 建立自己的本機虛擬伺服器 2 - Ubuntu 基本設定與安裝 Node.js, MongoDB</h1>

<p>嗨又到了 Server 時間了!</p>

<p>接下來我們都會做一些指令操作，</p>

<p>如果進一步有興趣的可以 Google 鳥哥的私房菜，</p>

<p>完整的 Linux 操作教學，淺顯易懂，想學習操作 linux OS 的話必看！</p>

<p>今天我們要稍稍整理一下昨天剛安裝完的 Ubuntu 作業系統，以及安裝一些我們需要用到的東西</p>

<p>首先我們的第一步就是先開啟終端機，到昨天放 Vagrantfile 的資料夾:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/ithome/</span></code></pre></td></tr></table></div></figure>


<p>開啟 Ubuntu</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>順帶一提，有時候開機時可能會卡在一個地方：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>default: Warning: Connection timeout. Retrying...
</span><span class='line'>default: Warning: Connection timeout. Retrying...
</span><span class='line'>default: Warning: Connection timeout. Retrying...</span></code></pre></td></tr></table></div></figure>


<p>這個就稍微等一下吧~ 如果電腦性能比較差的話可能會卡比較久，不過應該不至於會卡超過 10 分鐘</p>

<p>如果卡超過十分鐘可能要強制中斷，並且尋找解決辦法了～</p>

<p>開機完成後就登入吧!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>...
</span><span class='line'>vagrant@vagrant-ubuntu-trusty-64:~$</span></code></pre></td></tr></table></div></figure>


<h2>Ubuntu 套件, 設定時區</h2>

<p>今天就要來幫 Ubuntu 安裝一些東西，</p>

<p>首先先產生 locale file for zh_TW</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo locale-gen zh_TW.UTF-8</span></code></pre></td></tr></table></div></figure>


<p>更新檔案清單並安裝更新, 移除更新後不需要的套件:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get update && sudo apt-get -y upgrade
</span><span class='line'>$ sudo apt-get -y autoremove</span></code></pre></td></tr></table></div></figure>


<p>再來是安裝一些常用的套件 如 git, curl, vim 等等:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo apt-get -y install build-essential vim git-core curl autoconf libssl-dev</span></code></pre></td></tr></table></div></figure>


<p>設定時區, 照著指令選就好了~</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo dpkg-reconfigure tzdata
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>// 選擇完畢後, 輸入 date 指令來查詢伺服器時間
</span><span class='line'>$ date
</span><span class='line'>Sat Oct  6 20:47:03 CST 2014</span></code></pre></td></tr></table></div></figure>


<h2>Node.js 安裝</h2>

<p>我們使用了 ppa 以安裝最新的 Node.js 版本:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 加入 ppa
</span><span class='line'>$ sudo add-apt-repository ppa:chris-lea/node.js
</span><span class='line'> Evented I/O for V8 javascript. Node's goal is to provide an easy way to build scalable network programs
</span><span class='line'> More info: https://launchpad.net/~chris-lea/+archive/ubuntu/node.js
</span><span class='line'>Press [ENTER] to continue or ctrl-c to cancel adding it
</span><span class='line'>(要再按一下 enter)
</span><span class='line'>
</span><span class='line'>// 因為加入新的檔案清單來源了，所以重新更新 ubuntu 的檔案清單
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>
</span><span class='line'>// 安裝 nodejs
</span><span class='line'>$ sudo apt-get -y install nodejs</span></code></pre></td></tr></table></div></figure>


<p>這樣就完成安裝了!</p>

<p>確認一下版本是否安裝成功:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ node -v 
</span><span class='line'>v0.10.32 
</span><span class='line'>
</span><span class='line'>$ npm -v 
</span><span class='line'>1.4.28</span></code></pre></td></tr></table></div></figure>


<p>ya! 這樣 Ubuntu 就有 node.js 了!</p>

<h2>MongoDB</h2>

<p>再來就是要安裝 MongoDB 了!</p>

<p>我們參考 MongoDB <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/">官方網站的文件</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//加入 apt-key
</span><span class='line'>$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// 新增一個來源清單，並將 mongodb 的來源寫進該來源清單
</span><span class='line'>$ echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
</span><span class='line'>
</span><span class='line'>// 重新更新來源清單
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>
</span><span class='line'>// 安裝 mongodb
</span><span class='line'>$ sudo apt-get install -y mongodb-org</span></code></pre></td></tr></table></div></figure>


<p>安裝完成後 Mongo db 就會跑起來了，從以下指令可以得知</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ps aux | grep mongo</span></code></pre></td></tr></table></div></figure>


<p>順便確認一下版本:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongod --version
</span><span class='line'>db version v2.6.4
</span><span class='line'>2014-10-04T06:31:01.553+0000 git version: 3a830be0eb92d772aa855ebb711ac91d658ee910
</span><span class='line'>
</span><span class='line'>$ mongo --verion
</span><span class='line'>MongoDB shell version: 2.6.4</span></code></pre></td></tr></table></div></figure>


<p>MongoDB 除了安裝了 DB 本身，還提供了指令提供操作，稱之為 MongoDB Shell，</p>

<p>方便我們使用 Shell 進去 DB 裡面做 DB 操作</p>

<p>以下是 mongodb service 的指令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 開啟 mongodb
</span><span class='line'>$ sudo service mongod start
</span><span class='line'>
</span><span class='line'>// 關閉 mongodb
</span><span class='line'>$ sudo service mongod stop
</span><span class='line'>
</span><span class='line'>// 重啟 mongodb
</span><span class='line'>$ sudo service mongod restart</span></code></pre></td></tr></table></div></figure>


<p>好啦~ 今天就先到這，記得把虛擬機器關起來~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d5] - Playground - Array, Dictionary, Controll Flow]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/05/swift-d5/"/>
    <updated>2014-10-05T16:40:23+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/05/swift-d5</id>
    <content type="html"><![CDATA[<h2>Array</h2>

<h3>宣告</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// var VARIABLE_NAME: [TYPE] = .....</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">fruits</span><span class="p">:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="nl">nums</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 或是讓 Swift 自行判斷類型:</span>
</span><span class='line'><span class="k">var</span> <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 初始化:</span>
</span><span class='line'><span class="k">var</span> <span class="n">cars</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]()</span>
</span></code></pre></td></tr></table></div></figure>


<p>ps. Beta 版時的寫法是 <code>var fruits: String[]</code></p>

<p>現在已經變成了 <code>var fruits: [String]</code></p>

<h3>操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 判斷該陣列是否有值，回傳 true 或 false</span>
</span><span class='line'><span class="n">fruits</span><span class="p">.</span><span class="n">isEmpty</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 增加元素</span>
</span><span class='line'><span class="n">fruits</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;watermelon&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">fruits</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&quot;lemon&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 取值 </span>
</span><span class='line'><span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="n">fruits</span><span class="p">[</span><span class="mf">0.</span><span class="p">.</span><span class="mf">.2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 刪除值 - 將 apple 移除，banana 會自動補上</span>
</span><span class='line'><span class="n">fruits</span><span class="p">.</span><span class="n">removeAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 兩個陣列合併 (必須相同類別 e.g. String)</span>
</span><span class='line'><span class="n">fruits</span> <span class="o">+</span> <span class="n">cars</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 陣列元素數量</span>
</span><span class='line'><span class="n">fruits</span><span class="p">.</span><span class="n">count</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dictionary</h2>

<h3>宣告</h3>

<p>由於 Dictionary 是 key/value 為一組 (pair)，</p>

<p>因此宣告時必須宣告 key 和 value 分別是哪種型別</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">httpStatus</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">httpStatus</span><span class="p">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">200</span><span class="o">:</span> <span class="s">&quot;Success&quot;</span><span class="p">,</span> <span class="mi">404</span><span class="o">:</span> <span class="s">&quot;Not found&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>操作</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 一樣有 isEmpty 方法</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">.</span><span class="n">isEmpty</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 取值</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">[</span><span class="mi">200</span><span class="p">]</span> <span class="c1">// = &quot;Success&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 加入值</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">[</span><span class="mi">500</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;Internal Server Error&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 修改值</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">[</span><span class="mi">200</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;True&quot;</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">.</span><span class="n">updateValue</span><span class="p">(</span><span class="s">&quot;internal server error&quot;</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="mi">500</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 刪除值</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">.</span><span class="n">removeValueForKey</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 字典元素數量</span>
</span><span class='line'><span class="n">httpStatus</span><span class="p">.</span><span class="n">count</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Controll Flow</h2>

<h3>For loop</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">fruit</span> <span class="k">in</span> <span class="n">fruits</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">fruit</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">fruits</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">index</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>While</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">fruits</span><span class="p">.</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>    <span class="n">index</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Do-while</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">do</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>  <span class="n">index</span><span class="o">++</span>
</span><span class='line'><span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">fruits</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>If</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">5566</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">5566</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;5566 不能亡&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">5566</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;5566 不能亡&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;You are not 5566&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">5566</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;5566 不能亡&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">5566</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;You are less than 5566&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;You are bigger than 5566&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Switch</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="n">index</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;small&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">11</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;big&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;others&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>引入 Tuple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">httpStatus</span> <span class="o">=</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="n">httpStatus</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="k">let</span> <span class="n">statusCode</span><span class="p">,</span> <span class="s">&quot;Error&quot;</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;(\(statusCode)) is Error&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="k">let</span> <span class="n">msg</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;(\(msg))&#39;s statusCode is 200&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Switch - break, continue, fallthrough</h2>

<h3>Continue</h3>

<p>continue 會使該次的 loop 停止，並繼續執行下一個 loop</p>

<p>continue 不存在於單一的 switch, 只會在 loop 裡的 switch 語句時才能使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span> <span class="s">&quot;banana&quot;</span><span class="p">,</span> <span class="s">&quot;lemon&quot;</span><span class="p">,</span> <span class="s">&quot;waterlemon&quot;</span><span class="p">,</span> <span class="s">&quot;orange&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">fruit</span> <span class="k">in</span> <span class="n">fruits</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Start&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">fruit</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s">&quot;banana&quot;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">fruit</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;End&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start 和 End 理論上都要被印五次，</p>

<p>但是加入了 continue 後，banana case 當次 loop 的 End 就沒有被執行了</p>

<h3>Break</h3>

<p>通常是用在不想處理某個 case 或，特別想要處理時 (?) 反之嘛 XD</p>

<p>當使用了 break，會立即中斷 switch 程式碼的執行，並且跳到 switch 區塊程式碼結束的大括號後 (}) 的第一行程式</p>

<p>暫時想不到什麼好例子&hellip;.</p>

<p>先借別人的例子來用吧:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">numberSymbol</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;三&quot;</span>  <span class="c1">// 簡體中文裡的數字 3</span>
</span><span class='line'><span class="k">var</span> <span class="nl">possibleIntegerValue</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="k">switch</span> <span class="n">numberSymbol</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="s">&quot;١&quot;</span><span class="p">,</span> <span class="s">&quot;一&quot;</span><span class="p">,</span> <span class="s">&quot;๑&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">possibleIntegerValue</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">case</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="s">&quot;٢&quot;</span><span class="p">,</span> <span class="s">&quot;二&quot;</span><span class="p">,</span> <span class="s">&quot;๒&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">possibleIntegerValue</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">case</span> <span class="s">&quot;3&quot;</span><span class="p">,</span> <span class="s">&quot;٣&quot;</span><span class="p">,</span> <span class="s">&quot;三&quot;</span><span class="p">,</span> <span class="s">&quot;๓&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">possibleIntegerValue</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">case</span> <span class="s">&quot;4&quot;</span><span class="p">,</span> <span class="s">&quot;٤&quot;</span><span class="p">,</span> <span class="s">&quot;四&quot;</span><span class="p">,</span> <span class="s">&quot;๔&quot;</span><span class="o">:</span>
</span><span class='line'>    <span class="n">possibleIntegerValue</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">integerValue</span> <span class="o">=</span> <span class="n">possibleIntegerValue</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;The integer value of \(numberSymbol) is \(integerValue).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;An integer value could not be found for \(numberSymbol).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 輸出 &quot;The integer value of 三 is 3.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fallthrough</h3>

<p>在 Swift 中，掃到第一個符合的 case 後，就會中斷 switch 的執行了，避免掉入一些 case 處理的錯誤</p>

<p>而 fallthrough, 很有趣, 宣告後，會讓 switch 繼續掃下一個 case</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="k">var</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;\(num) is&quot;</span>
</span><span class='line'><span class="k">switch</span> <span class="n">num</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">19</span><span class="o">:</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">+=</span> <span class="s">&quot; a prime, also&quot;</span>
</span><span class='line'>    <span class="k">fallthrough</span>
</span><span class='line'><span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;I&#39;m here&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">description</span> <span class="o">+=</span> <span class="s">&quot; an integer.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'><span class="c1">// I&#39;m here</span>
</span><span class='line'><span class="c1">// 5 is a prime, also an integer.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d5] - [Server 番外篇] 建立自己的本機虛擬伺服器 1 - Vagrant + VirtualBox 安裝]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/05/api-d5/"/>
    <updated>2014-10-05T16:40:18+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/05/api-d5</id>
    <content type="html"><![CDATA[<p>VirtualBox 是一套虛擬軟體，可以方便幫助我們在現有的作業系統上</p>

<p>模擬另一個作業系統 (如 linux, Ubuntu, CentOS&hellip;)</p>

<p>在虛擬機器裡面所以的一切變動，都不會影響到現有的作業系統，</p>

<p>非常適合拿來做測試使用</p>

<p>由於現在大部份的 Service 除了架設在 Windows Server 外，最大宗的就是 *nix distribution 了</p>

<p>因此這在這個系列文中，也是一定要教大家如何建立起虛擬測試機器，</p>

<p>來模擬真實 Server 環境中，如何架設自己撰寫的 API Service</p>

<h2>VirtualBox</h2>

<p>到 <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> 官方網站下載合適的安裝檔案吧!</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-04%2012.56.26.png" alt="p1" /></p>

<p>安裝完成就可以了!</p>

<p>因為我們接下來會使用 Vagrant 這套 commaond line tool 來對 VirtualBox 進行操作</p>

<p>因此只要安裝完 VirtualBox 後就可以不用管他了 XD</p>

<h2>Vagrant</h2>

<p><a href="https://www.vagrantup.com/">Vagrant</a></p>

<p>它可以幫助我們快速的建立一個輕量、可重複使用、並且可以打包起來帶著走的環境</p>

<p>透過編輯一個設定檔，就可以簡單設定該虛擬系統的 *nix 基本設定，如 共享資料夾、網路存取等等，</p>

<p>不需要透過 VirtualBox</p>

<p>通常這套軟體可以應用在團隊開發上：</p>

<p>以網頁開發來說，如果大家的測試環境與版本都不太一樣，例如 apache 或 php 版本不同</p>

<p>有時候會造成團隊溝通的負擔，因此透過 Vagrant 將 server 環境重新建立一套虛擬機器，</p>

<p>並且透過 Vagrant 打包，就可以丟給其他人使用，這樣一來大家的環境都一樣，</p>

<p>就可以避免這個問題，</p>

<p>而且還有一點，Server 的安裝是很累人的，同樣的事情基本上都不會想做第二遍，</p>

<p>因此打包一個乾淨的環境後備份，弄髒了可以隨時快速再把備份拿出來用，非常方便！</p>

<h3>安裝:</h3>

<p>到 <a href="https://www.vagrantup.com/downloads">下載頁面</a> 尋找適合自己的下載並且安裝</p>

<p>安裝完後應該就可以在終端機中使用 vagrant 這個指令了!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant -v
</span><span class='line'>Vagrant 1.6.5</span></code></pre></td></tr></table></div></figure>


<p>目前最新的版本應該是 1.6.5</p>

<h3>建立自己的虛擬機器</h3>

<p>首先在自己想要建立虛擬機器的地方先開一個資料夾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir ~/ithome/ </span></code></pre></td></tr></table></div></figure>


<p>切換到該資料夾</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/ithome</span></code></pre></td></tr></table></div></figure>


<p>使用 vagrant 初始化這個資料夾，並且指定我們要使用 Ubuntu 14.04 版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init ubuntu/trusty64
</span><span class='line'>A `Vagrantfile` has been placed in this directory. You are now
</span><span class='line'>ready to `vagrant up` your first virtual environment! Please read
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'>`vagrantup.com` for more information on using Vagrant.</span></code></pre></td></tr></table></div></figure>


<p>如果想要使用別種 *nix 版本可以到這裡找 - <a href="https://vagrantcloud.com/discover/featured">VagrantCloud</a></p>

<p>下完 <code>vagrant init ubuntu/trusty64</code> 指令後，指令告訴你有一個檔案叫做 <code>Vagrantfile</code> 被建立在這個資料夾裡了，</p>

<p>可以使用 <code>vagrant up</code> 來開啟虛擬機器</p>

<p>不過我們先不要下開機指令，我們先來看看 <code>Vagrantfile</code> 的內容，我直接把比較重要的設定說明寫在註解裡面了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  ...
</span><span class='line'>  
</span><span class='line'>  // 此行是說明要使用哪一個 box ，會到自己的系統裡面尋找，如果沒有的話就會下載一個
</span><span class='line'>  // 由於我們剛剛是使用 VagrantCloud 找的版本，因此 vagrant 會去找 
</span><span class='line'>  config.vm.box = "ubuntu/trusty64"
</span><span class='line'>
</span><span class='line'>  // 這個是設定網路
</span><span class='line'>  // 預設是 NAT，也就是如果我們在虛擬機器裝了網頁伺服器，
</span><span class='line'>  // 必須使用 port forwarding 的方式來讀到虛擬機器裡面的網頁 
</span><span class='line'>  #config.vm.network "forwarded_port", guest: 80, host: 8080
</span><span class='line'>
</span><span class='line'>  // Important! 
</span><span class='line'>  // 承上，或者我們可以使用一個 private network ip，我們把它開啟註解吧~
</span><span class='line'>  // 這樣我們開啟虛擬機器時，他的 IP 就會是 192.168.33.10
</span><span class='line'>  config.vm.network "private_network", ip: "192.168.33.10"
</span><span class='line'>
</span><span class='line'>  // 開啟註解的話，就是直接使用 bridge 的方式，如果是使用分享器的話
</span><span class='line'>  // 虛擬機會到分享器要一個 IP 
</span><span class='line'>  # config.vm.network "public_network"
</span><span class='line'>  
</span><span class='line'>  // 這個是設定共享資料夾
</span><span class='line'>  // 預設是放 Vagrantfile 的那個資料夾
</span><span class='line'>  // 在這個資料夾放檔案的話，在虛擬機器裡的 '/vagrant/' 資料夾是可以看到的!!
</span><span class='line'>  // 如果有想要指定到特殊的資料夾，再編輯此行並開啟註解即可
</span><span class='line'>  # config.vm.synced_folder "../data", "/vagrant_data"
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>再來就讓它開機吧!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up </span></code></pre></td></tr></table></div></figure>


<p>如果沒有下載過 ubuntu 系統的話，會先幫你下載，所以需要等待一些時間</p>

<p>若看到終端機說系統已經建立完成，</p>

<p>就可以連線進去了!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>.....
</span><span class='line'>vagrant@vagrant-ubuntu-trusty-64:~$ </span></code></pre></td></tr></table></div></figure>


<p>就會發現終端機的 prompt 已經不一樣了，變成 ubuntu-trusty-64 ，表示我們已經進入虛擬機器裡面了</p>

<p>由於今天的內容只會先到這，關於 Ubuntu 的設定是明天，所以記得離開虛擬機器並且幫他關機 XDD</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 如果剛剛有進入虛擬機器的話，輸入 exit 離開
</span><span class='line'>$ exit</span></code></pre></td></tr></table></div></figure>


<p>再下關機指令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant halt </span></code></pre></td></tr></table></div></figure>


<p>虛擬機器就被關起來了!</p>

<p>順帶一提</p>

<p>如果在虛擬機器開機時，需要更改 Vagrantfile 的設定，</p>

<p>改完後虛擬機器必須要重新開啟才會讀到新的設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant reload</span></code></pre></td></tr></table></div></figure>


<p>下回待續!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d4] - Playground - Optional, ! And ?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/04/swift-d4/"/>
    <updated>2014-10-04T18:53:03+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/04/swift-d4</id>
    <content type="html"><![CDATA[<h1>Playground - Optional, ! and ?</h1>

<p>今天要來探討 Optional 型別，我認為這塊是初學 Swift 常遇到的問題<br/>
大家搞不懂 &ldquo;!&rdquo; &ldquo;?&rdquo; 到底在幹什麼，所以今天就來了解一下</p>

<p>在 Swift 中，所有的資料型別都不能賦予 nil<br/>
也就是以下這件事是不成立的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">x</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以在 Swift 底下，就要使用 Optional 來處理值可能不存在的情況<br/>
當一個變數 x 被宣告成 Optional 型別時，該變數就會有兩個情況：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="mf">1.</span> <span class="err">有值，等於</span> <span class="n">x</span>
</span><span class='line'><span class="mf">2.</span> <span class="err">沒有值</span>
</span></code></pre></td></tr></table></div></figure>


<p>要宣告一個變數可能為 nil 時的方式是使用問號 &lsquo;?&#8217;：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">// 此時 x = &quot;yaya&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="nl">x</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 此時 x 沒有值</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>拿以下程式在 Playground 執行看看：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看一下 Playground 右邊的輸出框，觀察兩個 string 的差異<br/>
當 str2 被賦予 Optional 型別後，<br/>
str2  已經不是單純的 String 型別了，</p>

<p>那如何強制以 String 型別拿到 str2 的資料呢?
試著在 str2 後面加上驚嘆號，並觀察右方輸出結果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>請注意！若要強制取值，一定要確保此 Optional 型別中一定有值，
否則將會導致執行錯誤，以下是錯誤範例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str2</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;yaya&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="nb">nil</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str2</span><span class="o">!</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>程式將會在第四行返回錯誤，因此使用驚嘆號強制取值前請先確保 Optional 裡有值。</p>

<p>在 Objective-C 中，nil 是指向一個不存在物件的指標；
而 Swift 中，nil 是一種非常明確地值 － 他就是代表「不存在」。</p>

<p>在 Playground 中多試試看囉~~</p>

<p>ps. Swift 的 ? 和 Ruby 的 ? 是完全不同意思的XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d4] - 使用技術與工具介紹及原因]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/04/api-d4/"/>
    <updated>2014-10-04T18:52:58+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/04/api-d4</id>
    <content type="html"><![CDATA[<h1>使用技術與工具介紹及原因</h1>

<p>終於要開始進入正題了！</p>

<p>在了解 REST/RESTful 後，</p>

<p>就要從無到有 - 從 Server 到 API endpoint 都由自己打造</p>

<p>今天會先來說明接下來會使用到哪些工具及技術</p>

<p>由於筆者使用 Mac ，因此若是有其他平台的使用者可能需要自行找教學</p>

<h2>Server - Ubuntu with Vagrant + VitrualBox</h2>

<p>接下來幾天會先從這個部分開始提起</p>

<p>我們會使用 VirtualBox + Vagrant 的方式來建立自己的虛擬環境</p>

<p>避免一些讀者可能對 Server command line 不熟</p>

<p>這個部分是大家可以跳過的部分，但是我還是會從無到有架起來</p>

<h2>Backend Language - Node.js</h2>

<p>後端語言使用了 Node.js，其實本來有考慮使用 Golang，</p>

<p>但顧及自己的時間&hellip; 還是使用 Node.js，方便快速</p>

<p>這幾年是 Javascript 的時代，</p>

<p>優勝美地似乎也可以支援使用 Javascript 撰寫 <a href="https://github.com/tylergaw/js-osx-app-examples">Automation Tool</a></p>

<p>從前端打到後端甚至到 DB 都可以使用到 Javascript ，</p>

<p>是該來看看 Javascript 的語法特性了 :D</p>

<p>而且 Node.js Event-driven 的特性，可以利用少少的資源提供高效能的服務</p>

<p>同時搭配易用性及社群活躍度，這是我選擇 Node.js 而非選擇 Golang 的原因</p>

<h2>Framework - Express</h2>

<p>我使用了 Node.js 的 web framework - Express</p>

<p>Node.js 之於 Express 可以把它想像成是 Ruby 之於 Sinatra</p>

<p>我使用 Express 方便處理 Route</p>

<p>並且這套 framework 算是 Node.js 裡最具代表性的 framework</p>

<p>學起來也還不錯</p>

<h2>Database - MongoDB</h2>

<p>DB 為了追求簡單快速，我使用了 MongoDB</p>

<p>從 API 到 DB 無縫接軌，簡單的操作模式以及 Schema-free 的特性</p>

<p>應該會讓這整件事情變得更簡單</p>

<h2>Test client - PostMan (chrome extension)</h2>

<p>由於 API 是純粹後端 service，我們使用 Express 並不會使用到樣板語言，</p>

<p>也就是我們並不會撰寫 View (HTML, CSS 等等的語法)</p>

<p>因此除了寫測試外，我們就可以使用這套 Chrome Extension 來對 API 做存取!</p>

<hr />

<p>結束! 接下來幾天會教大家建立自己的虛擬機哦~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d3] - Playground - 變數與常數, 註解, 基本資料型別]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/03/swift-d3/"/>
    <updated>2014-10-03T21:07:41+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/03/swift-d3</id>
    <content type="html"><![CDATA[<h2>變數與常數</h2>

<p>定義一個變數:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>var 是保留字，宣告 obj 是一個變數名稱，冒號後面接資料形態<br/>
以此例子來說，宣告了一個字串變數叫做 obj，並且初始化為 &ldquo;&rdquo; 空字串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>let 同樣是用來宣告一個變數，但是宣告此變數後，該變數的值無法被改變，<br/>
無法被改變的數值其實正正的名字就叫做常數
以上面的例子來說， 若我們多做一件事:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">let</span> <span class="nl">obj</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>若我們試圖去更改 obj，讓 obj 從空字串變成 &ldquo;test&rdquo; 時， <br/>
Xcode 就會報錯，不能更改該值</p>

<p>再來是宣告的變型，其實宣告時不一定要給資料形態，<br/>
Swift 會自動從後面的值來判斷 x 可能是什麼資料形態，<br/>
只是由於筆者的習慣，會儘量在後面加上該變數的資料型別</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>一行內宣告多值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們就可以在 Playground 裡面試著宣告一些變數看看，並且使用昨天的輸出函式來輸出變數:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;測試&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="nl">fixString</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;fixed&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>註解</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">// 單行註解</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">多行註解</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>基本資料型別</h2>

<p>Swift 是一個強型別語言，意即若是以下的程式碼是會出錯的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於 x 已經被先 Swift 判定是 String 了，後面想指定 Int 資料給 x 就會出錯</p>

<p>Int 整數:
Swift 提供了 Int 還另外提供了 8, 16, 32, 64 位元的有號和無號整數型別<br/>
若在 32 位元平台，宣告 Int 的話， Int 的長度和 Int32 是一樣的<br/>
若在 64 位元平台，宣告 Int 的話， Int 的長度和 Int64 是一樣的</p>

<p>浮點數：
3.2, 0.0 之類的數字，可以用
Double - 64 位元浮點數 (至少 15 位數)
Float - 32 位元浮點數 (至少 6 位數)</p>

<p>布林值：
true/false</p>

<p>Tuples:
Tuple 可以將多個值組合成一個值，例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='Swift'><span class='line'><span class="c1">//賦值</span>
</span><span class='line'><span class="k">let</span> <span class="n">httpSucess</span> <span class="o">=</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 反過來接值</span>
</span><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">statusMessage</span><span class="p">)</span> <span class="o">=</span> <span class="n">httpSucess</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 若只需要其中一個值，另一個值可以用 _ 代替，但是不能沒有 _ </span>
</span><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">httpSucess</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 也可以用索引的方式拿值</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">httpSucess</span><span class="mf">.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 宣告 tuples 時也可以直接給予參數一個名稱</span>
</span><span class='line'><span class="k">let</span> <span class="n">httpSucess</span> <span class="o">=</span> <span class="p">(</span><span class="nl">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nl">statusMessage</span><span class="p">:</span> <span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 拿值時就可以:</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">httpSucess</span><span class="p">.</span><span class="n">statusCode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同時結合 function 這樣就可以多值回傳了！</p>

<p>下一篇會接續今天變數相關的主題~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d3] - 使用時機與實際 API 參考]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/03/api-d3/"/>
    <updated>2014-10-03T21:07:32+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/03/api-d3</id>
    <content type="html"><![CDATA[<h1>使用時機與實際 API 參考</h1>

<p>什麼時候需要打造 RESTful API?<br/>
看看別人的 RESTful API (Instagram/Twitter)</p>

<p>什麼時候需要打造 RESTful API?<br/>
我認為當有數組資源要被多種不同平台使用時，就需要打造 RESTful API<br/>
例如，有 Android/ iOS / Web 要對同一 table 做存取時，<br/>
假設有個 MySQL DB，各個平台都使用各自的 mysql-driver 來直接操作 DB<br/>
假設有個 A 專案建立了一套書籍管理系統，資料庫裡記錄了大大小小的書籍，<br/>
而有個新的 B 專案需要使用到書籍的資料，此時 DB 操作的程式碼只能再寫一遍，<br/>
且各個平台重新撰寫，似乎是不大靠譜。</p>

<p>撰寫 RESTful API 的好處之一即是 RESTful 使用 HTTP 協定，<br/>
各個平台皆支援，不需要太複雜的程式，只需要使用各個平台的 http-client，<br/>
各個平台也不需要了解 DB 操作語法，只需要知道 json, xml 習慣的資料格式，  <br/>
且開發 API 還能夠對各個資源輕易地上 cache 增進反應速度，<br/>
開發 RESTful API 好處多多，哪天想 Open API 也就不需要再多作處理了～</p>

<p>接著讓我們來看看兩個有名網站的 API 吧！</p>

<p>Instagram: <a href="http://instagram.com/developer/api-console/">http://instagram.com/developer/api-console/</a><br/>
Twitter: <a href="https://dev.twitter.com/rest/tools/console">https://dev.twitter.com/rest/tools/console</a></p>

<p>很顯然的，我比較喜歡 Instagram 的 API 資源定義與命名方式 :P</p>

<p>下一篇會介紹我接下來會用到的工具箱，暖身結束，要正式開始了!<br/>
(不好意思前面嘴炮一點 XD)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d2] - 安裝及 Hello World!]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d2/"/>
    <updated>2014-10-02T20:19:45+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d2</id>
    <content type="html"><![CDATA[<p>首先，你必須要有一台 Mac。<br/>
我也不知道要如何用虛擬機 build 一台 Mac VM 出來，<br/>
所以就是，先買一台 Mac XD</p>

<p>若已經有了 Mac，只要到 Appstore 下載 Xcode 即可，<br/>
注意是要 Xcode 6.0 以上， Xcode 6 才有支援 Swift ，舊版的 Xcode 5 是無法開發 Swift 的</p>

<p>安裝完 Xcode 後</p>

<p>首先開啓 Xcode<br/>
選擇 &ldquo;Create a playground&rdquo;<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.24.32.png" alt="p1" /></p>

<p>輸入 Playground 名稱並選擇儲存位置<br/>
<img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.13.png" alt="p2" /></p>

<p>就進入了 Playground 了！</p>

<p>可以看到 Xcode 已經預先載入了幾行程式碼了
來稍微看一下:</p>

<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.25.26.png" alt="p4" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Playground - noun: a place where people can play
</span><span class='line'>
</span><span class='line'>import UIKit
</span><span class='line'>
</span><span class='line'>var str = "Hello, playground"</span></code></pre></td></tr></table></div></figure>


<p>第一行，使用了 <code>//</code>，有寫過程式的話一定都知道這是註解 <br/>
在 Swift 裡面使用 <code>//</code> 及 <code>/* .... */</code> 來註解程式碼</p>

<p>第二行意思則是將 UIKit 引入到 playground 中，<br/>
借此使用 UIKit 的函示物件等等，目前還都不會用到</p>

<p>第三行的意思則是宣告了一個變數，該變數為一個字串，內容為 &ldquo;Hello World!&rdquo;</p>

<p>在 Playground 中，很有意思的是右邊的灰色區塊，<br/>
Xcode 會即時顯示該變數的值、型別、以及輸出結果，<br/>
對於剛入門 Swift 的開發者來說是一個非常好的功能來練習語法，
也因此未來幾天都會使用 Playground 來練習 Swift 基本語法!</p>

<p>最後當然要不免俗的撰寫最經典的程式 - Hello World!</p>

<p>加入:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>println(str)</span></code></pre></td></tr></table></div></figure>


<p><img src="https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-02%2011.27.21.png" alt="p5" /></p>

<p>馬上就可以在右邊看到結果囉!</p>

<p><code>println(args)</code> 是 Swift 標準輸出的函示，算是使用率蠻高的一個 method，只要將參數代入即可顯示該參數的內容，<br/>
有興趣也可以透過 Xcode 的 autocomplete 來看看和 <code>print</code> 有關的 method，<br/>
例如 <code>print()</code>，可以試試看，有些許不一樣哦!</p>

<p>未來一個禮拜都會來練習一些基本語法!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d2] - 定義 2 - RESTful 的優點與要求]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d2/"/>
    <updated>2014-10-02T20:17:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d2</id>
    <content type="html"><![CDATA[<p>承上篇，</p>

<p>RESTful 的優點如下所列:</p>

<pre><code> 1. 瀏覽器即可以作為 client 端
 2. 可以更高效地利用 cache 來達到更快的回應速度
 3. 界面與資料分離
 4. 節省伺服器的計算資源
 5. 可重用! web/android/ios 都可以用, 無痛轉換!
</code></pre>

<p>RESTful 的要求:</p>

<pre><code> 1. client - server 架構  
 2. 分層系統  
 3. 利用快取機制增加效能  
      server-side: 在 GET 資源時，若該資源並沒有被變更，就可以利用 cache 機制減少 query，並且加快回應速度  
      client-side: 透過 client 端 cache 記錄 cache 版本，  
           若向 server 要求資源時發現 server 最新版與 cache 相同，  
           則 client 端直接取用本地資源即可，不需要再做一次查詢  
      省機器運算及流量 = 省錢  
 4. 通訊協定具有無狀態性  
      不能讓兩隻 API 做同一個動作!  
           假設完成轉賬手續必須先 call A 再 call B 的話，  
           若做完 A 後斷線導致 B 無法執行，後續要處理 A -&gt; B 的方式會很麻煩  
      且不應該假設伺服器知道目前的狀態!  
      因此設計出來的 API 不能有狀態性  
 5. 統一界面  
      使用 HTTP Verb: GET/POST/PUT/DELETE  
</code></pre>

<p>下一篇會討論什麼時候該打造 RESTful API?  以及看看別人寫的 RESTful API</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Swift-d1] - 介紹]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/swift-d1/"/>
    <updated>2014-10-02T01:37:44+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/swift-d1</id>
    <content type="html"><![CDATA[<p>Swift 是 2014 年由蘋果公司在其開發者大會 WWDC 上所發佈的程式語言</p>

<p>The Swift Programming Language 一書中提到：</p>

<ol>
<li>Swift 用來撰寫 iOS 及 Mac OSX 的程式。</li>
<li>Swift 吸收了 C 和 Objective-C 的優點，使其在設計更具彈性、容易，且撰寫時有更多樂趣。</li>
<li>Swift 是基於成熟而且倍受喜愛的 Cocoa 和 Cocoa Touch framework，意即 Swift 可以直接使用這些現有的框架</li>
<li>Swift 兼具編譯語言的性能，以及直譯式語言的特性。</li>
</ol>


<p>** 什麼是 Cocoa/Cocoa Touch framework: <br/>
Cocoa framework 是 Apple 爲 Mac OSX 所建立的環境，用來開發 OSX 的程式，<br/>
而 Cocoa Touch framework 則是建立於 Cocoa framework 之上，用來開發 iOS 作業系統程式，<br/>
此兩種 framework 皆遵循 MVC 軟體架構，開發時必須遵循此架構。</p>

<p>若之前從未接觸過 Objective-C 但又想嘗試開發 iOS app 的話，<br/>
現在是個入門的好時機，Swift 去除了 Objective-C 的繁瑣語法，<br/>
且相較於 Objective-C 是個更好入門的程式語言。</p>

<p>對於非 Objective-C 開發者而言，若先前有過程式語言開發經驗的話，語法上手不會太難，<br/>
只是需要花時間學習 Cocoa/Cocoa Touch framework，但是，都要學習撰寫 iOS app 了，<br/>
不學 Cocoa/Cocoa Touch framework 應該也說不過去 :D</p>

<p>而對於 Objective-C 開發者而言，由於已經非常熟悉 Cocoa/Cocoa Touch framework 了，<br/>
在 Swift 使用 Cocoa/Cocoa Touch framework 是幾乎無痛轉換的，因為函式、變數名稱完全一樣，<br/>
只需要熟悉 Swift 語法，不出一天即可快速上手，也因此 Objectiv-C 開發者也不需過於擔心飯碗被搶走 XD<br/>
接觸過 Cocoa/Cocoa Touch framework 的開發者來說還是有相當大的優勢的。</p>

<p>由於筆者之前從未接觸過 Objective-C/ Cocoa/ Cocoa Touch framework，<br/>
只有些許 java/php/ruby 撰寫經驗，<br/>
選擇 Swift 的原因之一即是語法上手容易，並且有 playground 可以馬上執行撰寫的程式，<br/>
也因此希望能夠透過學習 Swift ，了解 iOS app 開發架構，實際打造出一款 app！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[API-d1] - 定義 1 - 什麼是 REST/RESTful?]]></title>
    <link href="http://kerkerj.github.io/blog/2014/10/02/api-d1/"/>
    <updated>2014-10-02T01:02:26+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/10/02/api-d1</id>
    <content type="html"><![CDATA[<p>Representational State Transfer，簡稱 <code>REST</code>，<br/>
它是一種網路架構風格，他並不是一種標準。</p>

<p>而 RESTful 可以這樣子想像:<br/>
美麗 (Beauty) 的事物可以稱為 Beautiful<br/>
設計為 REST 的系統就可以稱為 RESTful</p>

<p>以 API 而言，假設我們正在撰寫一組待辦事項的 API，<br/>
可能會有以下方式來作為 API 的 interface:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>獲取使用者資料     /getAllUsers
</span><span class='line'>獲取使用者資料     /getUser/1
</span><span class='line'>新增使用者資料     /createUser
</span><span class='line'>更新使用者資料     /updateUser/1
</span><span class='line'>刪除使用者資料     /deleteUser/1</span></code></pre></td></tr></table></div></figure>


<p>若是以 REST 風格來開發 RESTful API 的話:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>獲取使用者資料     /GET            /users
</span><span class='line'>獲取使用者資料     /GET            /user/1
</span><span class='line'>新增使用者資料     /POST          /user
</span><span class='line'>更新使用者資料     /PUT             /user/1
</span><span class='line'>刪除使用者資料     /DELETE      /user/1</span></code></pre></td></tr></table></div></figure>


<p>兩者差異是在於 RESTful API 充分地使用了 HTTP protocol (GET/POST/PUT/DELETE)，<br/>
達到<br/>
1. 以直觀簡潔的資源 URI<br/>
2. 並且善用 HTTP Verb<br/>
3. 達到對資源的操作<br/>
4. 並使用 Web 所接受的資料類型: JSON, XML, YAML 等，最常見的是 JSON</p>

<p>通常是使用 HTTP, URI, JSON, HTML 這些現有廣泛流行的協議和標準，<br/>
且使用 HTTP status code 來代表該資源的狀態。</p>

<p>框架中強制使用 REST 風格的最有名的應該就是 Ruby on Rails 了!<br/>
(不過我們並不會使用 Rails 來開發 API service :P)</p>

<p>p.s. 因為 REST 並非是一種標準，因此有時候也不一定非得要照著 REST 來做，<br/>
只是在資源的操作面上，可以設計成這類的風格，以達到簡潔易懂，並且可重用。</p>

<p>下一篇會來聊聊 REST 的要求與優點</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeigniter on Nginx]]></title>
    <link href="http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx/"/>
    <updated>2014-09-25T16:03:24+08:00</updated>
    <id>http://kerkerj.github.io/blog/2014/09/25/codeigniter-on-nginx</id>
    <content type="html"><![CDATA[<p>I use Ubuntu 14.04, Nginx 1.4.6, php5-fpm, Codeigniter 2.2.0</p>

<p>It will remove index.php, and access Codeigniter site normally.</p>

<p>Clean configuration:</p>

<figure class='code'><figcaption><span>&#8220;/etc/nginx/site-enabled/default&#8221;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>server {
</span><span class='line'>
</span><span class='line'>#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; START
</span><span class='line'>        listen 80;
</span><span class='line'>        listen [::]:80 default_server ipv6only=on;
</span><span class='line'>
</span><span class='line'>        root /YOUR/PROJECT/ROOT;
</span><span class='line'>        index index.html index.htm index.php;
</span><span class='line'>
</span><span class='line'>        # Make site accessible from http://localhost/
</span><span class='line'>        server_name localhost;
</span><span class='line'>
</span><span class='line'>        #location ~* .(ico|css|js|gif|jpe?g|png)(?[0-9]+)?$ {
</span><span class='line'>        #   expires max;
</span><span class='line'>        #   log_not_found off;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>                # First attempt to serve request as file, then
</span><span class='line'>                # as directory, then fall back to displaying a 404.
</span><span class='line'>                try_files $uri $uri/ /index.php;
</span><span class='line'>                # Uncomment to enable naxsi on this location
</span><span class='line'>                # include /etc/nginx/naxsi.rules
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        location ~ .php$ {
</span><span class='line'>            root           /YOUR/PROJECT/ROOT;
</span><span class='line'>            try_files $uri =404;
</span><span class='line'>            fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>            fastcgi_index  index.php;
</span><span class='line'>            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
</span><span class='line'>            include        fastcgi_params;
</span><span class='line'>            fastcgi_buffer_size 128k;
</span><span class='line'>            fastcgi_buffers 256 4k;
</span><span class='line'>            fastcgi_busy_buffers_size 256k;
</span><span class='line'>            fastcgi_temp_file_write_size 256k;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>#&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; END
</span><span class='line'>
</span><span class='line'>        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
</span><span class='line'>        #location /RequestDenied {
</span><span class='line'>        #       proxy_pass http://127.0.0.1:8080;
</span><span class='line'>
</span><span class='line'>        #error_page 404 /404.html;
</span><span class='line'>
</span><span class='line'>        # redirect server error pages to the static page /50x.html
</span><span class='line'>        #
</span><span class='line'>        #error_page 500 502 503 504 /50x.html;
</span><span class='line'>        #location = /50x.html {
</span><span class='line'>        #       root /usr/share/nginx/html;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
</span><span class='line'>        #
</span><span class='line'>        #location ~ \.php$ {
</span><span class='line'>        #       fastcgi_split_path_info ^(.+\.php)(/.+)$;
</span><span class='line'>        #       # NOTE: You should have &quot;cgi.fix_pathinfo = 0;&quot; in php.ini
</span><span class='line'>        #
</span><span class='line'>        #       # With php5-cgi alone:
</span><span class='line'>        #       fastcgi_pass 127.0.0.1:9000;
</span><span class='line'>        #       # With php5-fpm:
</span><span class='line'>        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
</span><span class='line'>        #       fastcgi_index index.php;
</span><span class='line'>        #       include fastcgi_params;
</span><span class='line'>        #}
</span><span class='line'>
</span><span class='line'>        # deny access to .htaccess files, if Apache&#39;s document root
</span><span class='line'>        # concurs with nginx&#39;s one
</span><span class='line'>        #
</span><span class='line'>        #location ~ /\.ht {
</span><span class='line'>        #       deny all;
</span><span class='line'>        #}
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Codeigniter config:</p>

<figure class='code'><figcaption><span>config.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;index_page&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$config</span><span class="p">[</span><span class="s1">&#39;uri_protocol&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;REQUEST_URI&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
