<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kerkerj</title>
    <link>http://blog.kerkerj.in/categories/node/index.xml</link>
    <description>Recent content on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="http://blog.kerkerj.in/categories/node/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[API-d8] - Node.js - Hello World!</title>
      <link>http://blog.kerkerj.in/blog/api-d8---node.js---hello-world/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/api-d8---node.js---hello-world/</guid>
      <description>

&lt;h1 id=&#34;node-js-hello-world&#34;&gt;Node.js - Hello World!&lt;/h1&gt;

&lt;p&gt;一樣先開虛擬機哦~&lt;/p&gt;

&lt;p&gt;並且開啟終端機連進 server 裡面~&lt;/p&gt;

&lt;p&gt;以下是 &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; 官方網站的 web server 程式範例，我稍作小修改：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var http = require(&#39;http&#39;);

http.createServer(function (req, res) {
  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
  res.end(&#39;Hello World\n&#39;);
}).listen(1337, &#39;0.0.0.0&#39;);

console.log(&#39;Server running at http://0.0.0.0:1337/&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我們先在虛擬機的資料夾建立一個子資料夾 &amp;lsquo;HelloWorld&amp;rsquo;&lt;/p&gt;

&lt;p&gt;在 HelloWorld 資料夾裡面建立一個 app.js&lt;/p&gt;

&lt;p&gt;內容如上，存檔。&lt;/p&gt;

&lt;p&gt;使用終端機進入 server :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
$ cd /vagrant/HelloWorld
$ node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到瀏覽器輸入 &lt;a href=&#34;http://192.168.33.10:1337/&#34;&gt;http://192.168.33.10:1337/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(或者是你的 Vagrantfile 裡面設定的 private IP)&lt;/p&gt;

&lt;p&gt;即可看到 Hello World 了！&lt;/p&gt;

&lt;p&gt;要關掉 Server 也非常簡單，回到下指令的地方，按下 ctrl + c 即可中斷程式&lt;/p&gt;

&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;

&lt;p&gt;簡單分析一下此段程式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var http = require(&#39;http&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將 http 這個模組引入，並指定給物件 http&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;http.createServer(
	...
).listen(1337, &#39;0.0.0.0&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先略過中間的 function 不看，&lt;br /&gt;
這段 code 的用意即是讓呼叫 http 物件中的 createServer 的方法，
.listen() 則是設定該 server 要跑在哪個 port、hostname&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function (req, res) {
  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
  res.end(&#39;Hello World\n&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的 code 則是原本在 .createServer() 裡的，
我們可以看一下 Node.js 的 API doc &lt;a href=&#34;http://nodejs.org/api/http.html#http_http_createserver_requestlistener&#34;&gt;關於此方法的部分&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.createServer() 要帶入的東西其實是一個 requestListener，&lt;br /&gt;
也就是當 Server 跑起來時，我們開啟瀏覽器，輸入 127.0.0.1:1337 時，&lt;br /&gt;
Node.js Server 要回丟的東西，因此觀察一下此 listener:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function (req, res) {
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function 中帶入參數的是 req, res，意即 request, response，&lt;br /&gt;
request 即是 server 接收到 client 端的訊息，&lt;br /&gt;
response 則是 server 要回丟給 client 的訊息，&lt;br /&gt;
由於在此範例中，我們只是要回丟給 client 端一個 hello world 的訊息，
因此，我們不處理 client 送給 server 的 request，
我們只需處理要回丟給 client 的訊息，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
res.end(&#39;Hello World\n&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;寫網頁的開發者應該對一些關鍵字例如 Content-type, text/plain 不陌生，&lt;br /&gt;
第一行代表回傳給使用者的訊息中，HTTP HEAD 的設定是 http status code 200,
並且 Content-type 設定為 text/plain&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那麼，以下這行 code 的意思即是，此次要回送給使用者的訊息到這裡結束，以 &amp;ldquo;Hello World&amp;rdquo; 作結尾&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.end(&#39;Hello World\n&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因此整段 code 看下來，就是一個非常簡單的 http server，&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://192.168.33.10:1337/&#34;&gt;http://192.168.33.10:1337/&lt;/a&gt; 總是會回傳 Hello World&lt;/p&gt;

&lt;p&gt;今天就完成了我們的 Hello World 了!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event-driven I/O models and Coroutine Notes</title>
      <link>http://blog.kerkerj.in/blog/event-driven-i/o-models-and-coroutine-notes/</link>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/event-driven-i/o-models-and-coroutine-notes/</guid>
      <description>

&lt;h2 id=&#34;event-driven-i-o-model&#34;&gt;Event-driven I/O model&lt;/h2&gt;

&lt;p&gt;首先，聽到 Event-driven 是從 &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; 得知，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Node.js® is a platform built on &lt;a href=&#34;http://code.google.com/p/v8/&#34;&gt;Chrome&amp;rsquo;s JavaScript runtime&lt;/a&gt; for easily building fast, scalable network applications.&lt;/p&gt;

&lt;p&gt;Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其實剛聽到這詞會有點陌生，我們可以先從 Victor 所寫的文章開始讀起:
&lt;a href=&#34;http://blog.ez2learn.com/2010/07/17/talk-about-coroutine-and-gevent/&#34;&gt;淺談coroutine與gevent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;裡面提到了幾種網路模型：
&amp;gt;
1. 阻塞式單一行程&lt;br /&gt;
2. 阻塞式多行程
3. 阻塞式多行程多執行序
4. 非阻塞式事件驅動
5. 非阻塞式 coroutine&lt;/p&gt;

&lt;p&gt;以下是各語言 event-driven 的 model&lt;br /&gt;
(Node.js 就不列出了，本身就是 event-driven 設計)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Event-driven model:
* Ruby 	-&amp;gt; [Eventmachine](http://rubyeventmachine.com/)  
			-&amp;gt; [Celluloid::IO](https://github.com/celluloid/celluloid-io)   
			-&amp;gt; [Thin Server](http://code.macournoyer.com/thin)   
* Python 	-&amp;gt; [Twisted](https://twistedmatrix.com/trac/)  
			-&amp;gt; [Tornado](http://www.tornadoweb.org/en/stable)   
* Perl	 -&amp;gt; [Perl Object Environment (POE)](http://poe.perl.org)    
* PHP	 	-&amp;gt; [REACT](http://reactphp.org) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以 Ruby 建構 API Service 的話，可以使用 Sinatra + Eventmachine + thin proxy + Nginx 的 Solution:&lt;br /&gt;
&lt;a href=&#34;http://recipes.sinatrarb.com/p/embed/event-machine&#34;&gt;Embedding Sinatra within EventMachine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;延伸閱讀:&lt;br /&gt;
&lt;a href=&#34;https://www.igvita.com/2008/05/27/ruby-eventmachine-the-speed-demon/&#34;&gt;2008 - Eventmachine and Reactor pattern&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://developwithstyle.com/articles/2012/05/23/lessons-learnt-from-building-a-rest-based-api/&#34;&gt;2012 - Lessons Learnt From Building a REST API&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://docs.google.com/document/d/1dU-juYN25FMXdp6Ju62KAIT_0tuuZAPEgZkj-aT6kPQ/edit#heading=h.lafes4uxj2b0&#34;&gt;年份未知 - 針對各 framework 進行評測 Event Driven I/O Web Application Server Analysis&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://blog.sina.com.cn/s/blog_704b6af70100py9n.html&#34;&gt;Twisted 教程&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;reactor-模型&#34;&gt;Reactor 模型&lt;/h4&gt;

&lt;p&gt;Node.js 處理 concurrency 是 Reactor mode&lt;br /&gt;
Ruby 的 Goliath framework 也是 Reactor mode&lt;br /&gt;
Golang, Erlang 是 CSP (communicating sequential process)&lt;/p&gt;

&lt;p&gt;現在比較流行的是 event-driven 的 Reactor mode, e.g. Node.js, Goliath&lt;br /&gt;
但是 Node.js 比較令人詬病的是 code 難維護，太多層層的 callback 會擾亂邏輯&lt;br /&gt;
畢竟線性處理比較符合人類思維&lt;br /&gt;
而 Ruby 使用 Fiber 以避免寫出過多的 callback&lt;br /&gt;
Python 的 Twisted 也已經存在好一陣子，穩定發展中&lt;/p&gt;

&lt;p&gt;不過以 Node.js 典型的應用的確是 proxy, API server&lt;br /&gt;
因此我們可以參考 Node.js 的特性，使用其他語言來達到同樣的效果&lt;br /&gt;
那就是 event-driven&lt;/p&gt;

&lt;h2 id=&#34;coroutine-programming&#34;&gt;Coroutine Programming&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Golang - goroutine (native) 
* Python - [gevent](http://www.gevent.org/)  
* Ruby - Fiber (native)   
* Lua   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;延伸閱讀:&lt;br /&gt;
&lt;a href=&#34;http://www.bigfastblog.com/&#34;&gt;Ruby 的 eventmachine 相關討論&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.blogjava.net/killme2008/archive/2010/03/11/315158.html&#34;&gt;Ruby Fiber 指南&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://electronic-blue.herokuapp.com/blog/2012/06/coroutine-an-introduction/&#34;&gt;2012 - Lua - Coroutine introduction&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://www.igvita.com/2009/05/13/fibers-cooperative-scheduling-in-ruby/&#34;&gt;2009 - Fibers &amp;amp; Cooperative Scheduling in Ruby&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.blogjava.net/killme2008/archive/2010/03/02/314264.html&#34;&gt;2010 - Lua、LuaJIT Coroutine和Ruby Fiber的切換效率對比&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;建構 API Service 考慮到的除了 Server 以外，&lt;br /&gt;
語言的特性通常也必須考慮進去，例如&lt;br /&gt;
sync v.s. async&lt;br /&gt;
coroutine v.s. non-coroutine&lt;br /&gt;
但通常以當前需求而言，其實也不需要 over-design&lt;br /&gt;
只要選擇拿手的，能夠快速方便的開發出雛形，&lt;br /&gt;
我想等到真的快要 10000 per/second request 時，再來煩惱更進一步的架構吧&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>