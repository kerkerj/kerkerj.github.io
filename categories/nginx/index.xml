<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kerkerj</title>
    <link>http://localhost:8000/categories/nginx/index.xml</link>
    <description>Recent content on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="http://localhost:8000/categories/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[API-d29] - 實戰開發 - 發佈 - nginx</title>
      <link>http://localhost:8000/blog/api-d29---%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC---%E7%99%BC%E4%BD%88---nginx/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/api-d29---%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC---%E7%99%BC%E4%BD%88---nginx/</guid>
      <description>&lt;p&gt;接下來這篇就會比較偏 server 設定了！&lt;/p&gt;

&lt;p&gt;nginx 是一套伺服器軟體，和 apache 並駕齊驅&lt;/p&gt;

&lt;p&gt;(其實我覺得 nginx &amp;gt;&amp;gt;&amp;gt; apache XD)&lt;/p&gt;

&lt;p&gt;主要是 nginx 清量快速&lt;/p&gt;

&lt;p&gt;我們要拿他幫 nodejs 處理接收 request 的部分，再將 request 導往 nodejs&lt;/p&gt;

&lt;p&gt;所以感覺就會如下圖:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/12400343/images/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-10-18%2013.14.16.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以讓 nginx 當作是 load balancer,&lt;/p&gt;

&lt;p&gt;透過 reverse proxy 的方式轉發 request 給 nodejs, 讓 nginx 承受流量&lt;/p&gt;

&lt;p&gt;這就是我們今天要做的事情，&lt;/p&gt;

&lt;p&gt;所以首先，我們就要先裝 nginx，因此就先進虛擬機吧!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y
$ sudo apt-get install nginx 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;這樣就會安裝一個 nginx 了!&lt;/p&gt;

&lt;p&gt;Nginx 的設定檔都是放在 &lt;code&gt;/etc/nginx/&lt;/code&gt; 底下&lt;/p&gt;

&lt;p&gt;個別網站的設定放在 &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果要讓該網站上線，則會將 &lt;code&gt;/etc/nginx/sites-available&lt;/code&gt; 的設定檔 link 到 &lt;code&gt;/etc/nginx/sites-enable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因此若想自己新增設定檔的話，慣例是會在 available 新增，然後再 link 到 &lt;code&gt;enable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果我們進到 &lt;code&gt;/etc/nginx/sites-enable&lt;/code&gt; 的話，裡面應該已經有一個 &lt;code&gt;default&lt;/code&gt; 的設定檔了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vim /etc/nginx/sites-enable/default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;內容應該是:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name localhost;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }

        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
        #location /RequestDenied {
        #       proxy_pass http://127.0.0.1:8080;
        #}
        
        ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將設定檔改成如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream nodejs {
  server 127.0.0.1:3000;
  #server 127.0.0.1:3001;
}

server {
    listen 80;

    server_name localhost;

    location / {
        proxy_pass http://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &#39;upgrade&#39;;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解釋一下以下這段:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;upstream nodejs {
  server 127.0.0.1:3000;
  #server 127.0.0.1:3001;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面這段則是 proxy pass 的部分, 會將 &lt;code&gt;/&lt;/code&gt; 的流量導到 nodejs 的 server cluster 裡面，不過因為我們現在只有一台 server 開起來，所以只會被導到 3000 port 的那台機器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
        proxy_pass http://nodejs;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &#39;upgrade&#39;;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果 nodejs server 的承載量不夠，可以開好幾檯，只要 port 不一樣即可&lt;/p&gt;

&lt;p&gt;這樣就可以建立一個 nodejs cluster&lt;/p&gt;

&lt;p&gt;再來使用 forever 開啓 nodejs server&lt;/p&gt;

&lt;p&gt;再重新開啟 nginx&lt;/p&gt;

&lt;p&gt;使用 postman 戳戳看 API&lt;/p&gt;

&lt;p&gt;就成功囉~~&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Codeigniter on nginx</title>
      <link>http://localhost:8000/blog/codeigniter-on-nginx/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/codeigniter-on-nginx/</guid>
      <description>&lt;p&gt;I use Ubuntu 14.04, Nginx 1.4.6, php5-fpm, Codeigniter 2.2.0&lt;/p&gt;

&lt;p&gt;It will remove index.php, and access Codeigniter site normally.&lt;/p&gt;

&lt;p&gt;Clean configuration &amp;ldquo;/etc/nginx/site-enabled/default&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;server {

#&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; START
        listen 80;
        listen [::]:80 default_server ipv6only=on;

        root /YOUR/PROJECT/ROOT;
        index index.html index.htm index.php;

        # Make site accessible from http://localhost/
        server_name localhost;
        
        #location ~* .(ico|css|js|gif|jpe?g|png)(?[0-9]+)?$ {
        #   expires max;
        #   log_not_found off;
        #}
        
        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.php;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }

        location ~ .php$ {
            root           /YOUR/PROJECT/ROOT;
            try_files $uri =404;
            fastcgi_pass unix:/var/run/php5-fpm.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_buffer_size 128k;
            fastcgi_buffers 256 4k;
            fastcgi_busy_buffers_size 256k;
            fastcgi_temp_file_write_size 256k;
        }

#&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; END

        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
        #location /RequestDenied {
        #       proxy_pass http://127.0.0.1:8080;

        #error_page 404 /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page 500 502 503 504 /50x.html;
        #location = /50x.html {
        #       root /usr/share/nginx/html;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #       fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #       # NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini
        #
        #       # With php5-cgi alone:
        #       fastcgi_pass 127.0.0.1:9000;
        #       # With php5-fpm:
        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
        #       fastcgi_index index.php;
        #       include fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache&#39;s document root
        # concurs with nginx&#39;s one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Codeigniter config - config.php:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$config[&#39;index_page&#39;] = &#39;&#39;;
$config[&#39;uri_protocol&#39;] = &#39;REQUEST_URI&#39;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Openresty on Ubuntu 14.04</title>
      <link>http://localhost:8000/blog/openresty-on-ubuntu-14.04/</link>
      <pubDate>Tue, 05 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/openresty-on-ubuntu-14.04/</guid>
      <description>

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;choose the latest version of Openresty&lt;br /&gt;
I used ngx_openresty-1.7.2.1.tar.gz&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# install packages
sudo apt-get install libreadline-dev libpcre3-dev libssl-dev perl  

# get openresty package
wget http://openresty.org/download/ngx_openresty-1.7.2.1.tar.gz   

# unzip
tar xzvf ngx_openresty-1.7.2.1.tar.gz

# install
cd ngx_openresty-1.7.2.1/

# You can setup with ./configure --prefix=&amp;quot;the folder you want to install&amp;quot;, default is &#39;/usr/local/openresty&#39;
./configure 
make
sudo make install # need permission to copy file to target folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default folder: &lt;code&gt;/usr/local/openresty&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;create work folder in ~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/work
cd ~/work
mkdir logs/ conf/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create a new file in &lt;code&gt;~/work/conf/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location / {
            default_type text/html;
            content_by_lua &#39;
                ngx.say(&amp;quot;&amp;lt;p&amp;gt;hello, world&amp;lt;/p&amp;gt;&amp;quot;)
            &#39;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;because Openresty is installed in &lt;code&gt;/usr/local/openresty&lt;/code&gt;,&lt;br /&gt;
we need to add the directory to PATH variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=/usr/local/openresty/nginx/sbin:$PATH
export PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then use the way below to start nginx server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx -p `pwd`/ -c conf/nginx.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assume that you have a nginx server originally, and then you installed Openresty, it can be set up at the same time if the port is not confilcted to the origin nginx.&lt;/p&gt;

&lt;h2 id=&#34;use-external-lua-file-to-keep-conf-clean&#34;&gt;Use external lua file to keep conf clean&lt;/h2&gt;

&lt;p&gt;Edit &lt;code&gt;~/work/conf/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location /hello {
            content_by_lua_file conf/hello.lua;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- hello.lua
ngx.say(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install rails server env with rbenv on Ubuntu 14.04</title>
      <link>http://localhost:8000/blog/install-rails-server-env-with-rbenv-on-ubuntu-14.04/</link>
      <pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/install-rails-server-env-with-rbenv-on-ubuntu-14.04/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;nodejs v0.10.25 (for rails javascript engine)

rbenv 0.4.0-98-g13a474c

ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-linux]

Rails 4.1.4

nginx version: nginx/1.6.0

Phusion Passenger version 4.0.48

mysql  Ver 14.14 Distrib 5.5.38, for debian-linux-gnu (x86_64) using readline 6.3

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-ruby-rails&#34;&gt;Installing Ruby &amp;amp; Rails&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties nodejs npm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use rbenv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo &#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;eval &amp;quot;$(rbenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo &#39;export PATH=&amp;quot;$HOME/.rbenv/plugins/ruby-build/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL

rbenv install 2.1.2
exec $SHELL

rbenv global 2.1.2
ruby -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t install rdoc when installing gems&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;gem: --no-ri --no-rdoc&amp;quot; &amp;gt; ~/.gemrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install rails&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install rails
exec $SHELL
rails -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-nginx-with-passenger&#34;&gt;Installing Nginx with passenger&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# Install Phusion&#39;s PGP key to verify packages
gpg --keyserver keyserver.ubuntu.com --recv-keys 561F9B9CAC40B2F7
gpg --armor --export 561F9B9CAC40B2F7 | sudo apt-key add -

# Add HTTPS support to APT
sudo apt-get install apt-transport-https

# Add the passenger repository
sudo sh -c &amp;quot;echo &#39;deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main&#39; &amp;gt;&amp;gt; /etc/apt/sources.list.d/passenger.list&amp;quot;
sudo chown root: /etc/apt/sources.list.d/passenger.list
sudo chmod 600 /etc/apt/sources.list.d/passenger.list
sudo apt-get update

# Install nginx and passenger
sudo apt-get install nginx-full passenger
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit passenger configuration in &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##
# Phusion Passenger
##
# Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
##

passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;

passenger_ruby /usr/bin/ruby; #change this line

# passenger_ruby /home/yourpath/.rbenv/shims/ruby; # If you use rbenv
# Use `which ruby`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-mysql&#34;&gt;Installing MySQL&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install mysql-server mysql-client libmysqlclient-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Ubuntu] RoR environment</title>
      <link>http://localhost:8000/blog/ubuntu-ror-environment/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/ubuntu-ror-environment/</guid>
      <description>

&lt;h2 id=&#34;rvm-with-ruby2-0-0-p353-rails4-0-2-ubuntu12-04-precise64-php-fpm-by-vagrant-clean-install&#34;&gt;RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)&lt;/h2&gt;

&lt;p&gt;p.s.
If you don&amp;rsquo;t use RVM, you can just follow the instruction from &lt;a href=&#34;http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu&#34;&gt;Passenger offcial website&lt;/a&gt;. It will be easier.
Plus, I installed all these things by Vagrant.&lt;/p&gt;

&lt;h2 id=&#34;first-thing-to-do&#34;&gt;First thing to do&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pre-setup-install-necessary-packages&#34;&gt;Pre-setup: install necessary packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-bashrc-from-my-repo-optional&#34;&gt;Get .bashrc from my repo (Optional)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-vimrc-from-my-repo-optional&#34;&gt;Get .vimrc from my repo (Optional)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rvm-and-ruby-2-0-rvm-ruby-version-management&#34;&gt;RVM and Ruby 2.0 (RVM: Ruby version management)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ \curl -sSL https://get.rvm.io | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile
$ rvm requirements
$ echo &#39;gem: --no-ri --no-rdoc&#39;  &amp;gt;&amp;gt; ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile

add this line to .bash_rc or .bash_profile (if you don&#39;t use my .bash_profile)
[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; # Load RVM function

$ rvm use 2.0.0 --default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should be using ruby2.0.0 by RVM, let&amp;rsquo;s check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm list
=* ruby-2.0.0-p353 [ x86_64 ] 
// =&amp;gt; - current
// =* - current &amp;amp;&amp;amp; default
//  * - default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nodejs-libv8-dev-for-javascript-and-sqlite3-sqlite3-libsqlite3-dev&#34;&gt;Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;passenger-with-nginx&#34;&gt;Passenger with NGINX&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install passenger 
$ rvmsudo passenger-install-nginx-module
choose 2: customize
    a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
    b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
    c. default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-nginx-script&#34;&gt;Get nginx script&lt;/h2&gt;

&lt;p&gt;If you use /opt/nginx as root dir, you don&amp;rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from &lt;a href=&#34;https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin&#34;&gt;linode&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx default public folder will be in &lt;code&gt;/etc/nginx/html&lt;/code&gt;
check nginx version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-php5-fpm&#34;&gt;Install php5-fpm&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini 
//(find and change to `cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf 
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify 
location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini
    # With php5-cgi alone:
    #fastcgi_pass 127.0.0.1:9000;
    # With php5-fpm:
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include fastcgi_params;
}
$ echo &amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot; | sudo tee -a /etc/nginx/html/phpinfo.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service php5-fpm restart
$ sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-rails&#34;&gt;Install rails&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install rails
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ror-environment-check&#34;&gt;RoR environment check&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -v 
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you passed, you are good to go!&lt;/p&gt;

&lt;h2 id=&#34;deploy-rails-application-by-nginx&#34;&gt;Deploy Rails application by nginx:&lt;/h2&gt;

&lt;p&gt;Assume your rails application path is: &lt;code&gt;/home/vagrant/projects/subapp/&lt;/code&gt;
(by &lt;code&gt;rails new subapp&lt;/code&gt;)
then, the &lt;code&gt;/etc/nginx/conf/nginx.conf&lt;/code&gt; will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ...
    server {
        listen 80;
        server_name localhost;
        root /etc/nginx/html;

        # This block has been added.
        location ~ ^/subapp(/.*|$) {
            passenger_base_uri /subapp;
            alias /home/vagrant/projects/subapp/public$1;  # &amp;lt;-- be sure to point to &#39;public&#39;!
            passenger_app_root /home/vagrant/projects/subapp;
            passenger_enabled on;
            rails_env development; # or production
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;restart nginx, you can access the url: &lt;code&gt;http://localhost/subapp/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-mysql-and-mysql-adapter&#34;&gt;Install MySQL and Mysql adapter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The gem you installed is placed in RVM&amp;rsquo;s ruby, if you are using RVM&amp;rsquo;s ruby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use MySQL in your rails application, remember to change the database.yml.&lt;/p&gt;

&lt;p&gt;p.s. If you want to use phpmyadmin, you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install php5-mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;download phpmyadmin, then extract to &lt;code&gt;/etc/nginx/html/phpmyadmin&lt;/code&gt;&lt;br /&gt;
then start the server, access: &lt;code&gt;http://localhost/phpmyadmin/&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Vagrant] 使用 Vagrant 安裝 Nginx, php5-fpm, MySQL</title>
      <link>http://localhost:8000/blog/vagrant-%E4%BD%BF%E7%94%A8-vagrant-%E5%AE%89%E8%A3%9D-nginx-php5-fpm-mysql/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/blog/vagrant-%E4%BD%BF%E7%94%A8-vagrant-%E5%AE%89%E8%A3%9D-nginx-php5-fpm-mysql/</guid>
      <description>

&lt;h2 id=&#34;vagrant-1-development-environments-made-easy&#34;&gt;&lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; - Development environments made easy.&lt;/h2&gt;

&lt;p&gt;就是這個軟體的宗旨，把它想做是 ghost 吧！我們開發網站或是測試一些多機器架構時，常不小心就把自己的電腦或是測試主機搞到爛掉，租機器又慢又花錢，搞到爛重灌更麻煩。因此這個軟體基於 VirtualBox 做出了令人方便設定的功能，讓我們可以快速架設安裝環境並測試，尤其是以多機器架構而言更是方便！例如從最簡單的 Web server + DB server，或是 Web Load Balancer + Application Server * 5 等等的架構，一台電腦就能達成囉！
今天主要是以安裝 Vagrant 及架設出 Nginx + php5-fpm 的架構，下一篇打算另外建構一台 mongodb server，達到 Vagrant 最主要的多機器設定功能~&lt;/p&gt;

&lt;h2 id=&#34;vagrant-基本設定&#34;&gt;Vagrant 基本設定&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;先下載 VirtualBox 吧！&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;下載 Vagarnt 套件 &lt;a href=&#34;http://downloads.vagrantup.com/&#34;&gt;http://downloads.vagrantup.com/&lt;/a&gt;&lt;br /&gt;
安裝好後，可能會需要加 path，至少 1.3.0 當時我是自己加的，現在 1.3.5 就不清楚了~&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;接下來就可以開始加入 box (可以把它想為 ghost 檔)，並開始設定 Vagrant。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;vagrant box add {你想要的Box名稱} {下載網址} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;輸入後就會開始下載該 box 了！ 範例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vagrant box add devbox http://ﬁles.vagrantup.com/precise64.box   
$mkdir my_box  
$cd my_box  
$vagrant init devbox (將 my_box 這個專案資料夾以 devbox 這個 box 檔案初始化)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;box 官方有提供 Ubuntu 的，在 &lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;vagrantbox.es&lt;/a&gt; 很多，可以自己找～ 當然自己做應該也是可以的！&lt;/p&gt;

&lt;h2 id=&#34;vagrant-基本指令&#34;&gt;Vagrant 基本指令&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;vagrant up 開機  
vagrant ssh 登⼊  
vagrant suspend 暫停  
vagrant halt 關機  
vagrant destroy 刪除  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;進入新裝好的機器吧&#34;&gt;進入新裝好的機器吧！&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$vagrant up  //開機  
$vagrant ssh //登入  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vagrantfile-設定&#34;&gt;Vagrantfile 設定&lt;/h2&gt;

&lt;p&gt;Vagrantfile 這個設定檔可以用很多很強大的設定，在官方網頁裡有教學&lt;/p&gt;

&lt;p&gt;不過首先要先做的是： &lt;code&gt;config.vm.forward_port 80, 8088&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把虛擬機器裡從 80 port 傳送的東西丟到本機的 8088 port&lt;/p&gt;

&lt;p&gt;如此一來在本機瀏覽器輸入 localhost:8088 ，就可以看到網頁了！&lt;/p&gt;

&lt;p&gt;另外就是： &lt;code&gt;config.vm.synced_folder &amp;quot;/vagrant&amp;quot;, &amp;quot;本機目錄&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如此一來，Ubuntu 底下就有一個 /vargrant 目錄，和自己主機裡的某個目錄是同步的！&lt;/p&gt;

&lt;p&gt;也就是在自己主機上寫好程式後，就可以直接讓虛擬機器抓到 code 去執行，超方便的！&lt;/p&gt;

&lt;p&gt;只要把 nginx 的網頁目錄設定在 /vagrant 上就可以了！ (後面會說)&lt;/p&gt;

&lt;h2 id=&#34;ubuntu-基本安裝&#34;&gt;Ubuntu 基本安裝&lt;/h2&gt;

&lt;p&gt;進去後是乾淨的 Ubuntu 12.04 64位元版，因此需先做點安裝:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get -y update  
$sudo apt-get --no-install-recommends -y install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev libgdbm-dev ncurses-dev automake libtool bison subversion pkg-config libffi-dev vim  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有些東西其實可以不用裝，就看個人的需求，必裝應該是 build-essential, openssl, curl, git-core, vim XD&lt;/p&gt;

&lt;h2 id=&#34;nginx-php5-fpm-安裝&#34;&gt;Nginx &amp;amp; php5-fpm 安裝&lt;/h2&gt;

&lt;p&gt;安裝 Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install nginx  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若要更改 Nginx 的網頁目錄，設定檔在 &lt;code&gt;/etc/nginx/&lt;/code&gt; 裡，&lt;/p&gt;

&lt;p&gt;通常應該是更改 &lt;code&gt;/etc/nginx/sites-enable/default&lt;/code&gt; 裡的 &lt;code&gt;root /usr/share/nginx/www/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;還要將這段 code 解除註解：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini

    # With php5-cgi alone:
    #fastcgi_pass 127.0.0.1:9000;
    # With php5-fpm:
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    include fastcgi_params;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更改後確認一下 &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt; 是否有 &lt;code&gt;inculde /etc/nginx/sites-enable/*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo service nginx start (開始服務)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安裝 php5-fpm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install php5-fpm  
$sudo vim /etc/php5/fpm/php.ini (找到並更改 cgi.fix_pathinfo = 0 )  
$sudo vim /etc/php5/fpm/pool.d/www.conf  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找到 &lt;code&gt;listen = 127.0.0.1:9000&lt;/code&gt;, 換成 &lt;code&gt;/var/run/php5-fpm.sock&lt;/code&gt;
寫個 phpinfo(); 的 php 檔放入資料夾&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo service php5-fpm restart (開啟服務)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在瀏覽器輸入 localhost:8088 就可以看到 nginx 的頁面，再讀取剛剛寫的 php 應該就成功囉！&lt;/p&gt;

&lt;p&gt;安裝 MySQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;過程中會問 root 的密碼，裝完後就可以登入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下回就是多機器的設定囉～&lt;/p&gt;

&lt;p&gt;reference:&lt;br /&gt;
&lt;a href=&#34;http://gogojimmy.net/2013/05/26/vagrant-tutorial/&#34;&gt;http://gogojimmy.net/2013/05/26/vagrant-tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/ihower/vagrant-osdc&#34;&gt;http://www.slideshare.net/ihower/vagrant-osdc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04&#34;&gt;https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;p.s. Vagrantfile 產生器：&lt;a href=&#34;https://puphpet.com/#vagrantfile&#34;&gt;Puphpet.com/#vagrantfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這網站有很多值得玩的地方，可以直接幫你產生出這些設定檔真的是太方便了！&lt;/p&gt;

&lt;p&gt;p.s.s.有亂入用到的指令記一下：dpkg &amp;ndash;get-selections 列出已安裝的 package&lt;/p&gt;

&lt;p&gt;另外提供一下我在研究 Vagrant 的筆記，很亂超級亂，但是有些東西沒有寫在 blog 裡~
&lt;a href=&#34;https://www.evernote.com/shard/s81/sh/91ccf490-d9cd-468e-943a-d57c79d052f4/71e0a682b024c6e97fd8c79b90f89f67&#34;&gt;Evernote by kerkerj&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>