<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on kerkerj</title>
    <link>https://blog.kerkerj.in/categories/nodejs/</link>
    <description>Recent content in Nodejs on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Oct 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.kerkerj.in/categories/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[API-d29] - 實戰開發 - 發佈 - nginx</title>
      <link>https://blog.kerkerj.in/2014/10/api-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-nginx/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d29-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-nginx/</guid>
      <description>接下來這篇就會比較偏 server 設定了！
nginx 是一套伺服器軟體，和 apache 並駕齊驅
(其實我覺得 nginx &amp;gt;&amp;gt;&amp;gt; apache XD)
主要是 nginx 清量快速
我們要拿他幫 nodejs 處理接收 request 的部分，再將 request 導往 nodejs
所以感覺就會如下圖:
可以讓 nginx 當作是 load balancer,
透過 reverse proxy 的方式轉發 request 給 nodejs, 讓 nginx 承受流量
這就是我們今天要做的事情，
所以首先，我們就要先裝 nginx，因此就先進虛擬機吧!
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y $ sudo apt-get install nginx  這樣就會安裝一個 nginx 了!
Nginx 的設定檔都是放在 /etc/nginx/ 底下
個別網站的設定放在 /etc/nginx/sites-available
如果要讓該網站上線，則會將 /etc/nginx/sites-available 的設定檔 link 到 /etc/nginx/sites-enable</description>
    </item>
    
    <item>
      <title>[API-d28] - 實戰開發 - 發佈 - forever</title>
      <link>https://blog.kerkerj.in/2014/10/api-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-forever/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d28-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E7%99%BC%E4%BD%88-forever/</guid>
      <description>Github 參考
接下來兩天要講 deploy 的部分
由於 deploy 的 script 其實非常的麻煩，因此我們就不提 deploy 的 script 了
我們只專注在 server 上需要什麼東西
今天要來看看 forever 這個套件
這個套件可以幫助 nodejs 的 server 遇上無預警的 server 掛掉時
會幫你自動重新啟動 nodejs 的 server
也就是說
假設說 nodejs 寫的 server 某個 route 有問題，
送 request 後會因為某些因素造成 server error 造成程式碼 crash 時
forever 的 monitor 會偵測到，並幫你自動重啟 server
至少不會造成其他正常存取 server 的使用者遭遇到 server down 的問題
這個套件可以選擇裝在 global 或是 project
在這邊我是選擇裝成 global
進到虛擬機
$ npm install -g forever  p.</description>
    </item>
    
    <item>
      <title>[API-d27] - 實戰開發 - log 處理 及 config (db, apikey)</title>
      <link>https://blog.kerkerj.in/2014/10/api-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-log-%E8%99%95%E7%90%86-%E5%8F%8A-config-db-apikey/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d27-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-log-%E8%99%95%E7%90%86-%E5%8F%8A-config-db-apikey/</guid>
      <description>Github 參考
log 處理 今天要來談談 log 的處理，
身為一台自走 (?) node.js API server
也應該要記錄一下 request 的 log 呀！
不然哪天出問題了都不知道是哪個 request 把 server 搞掛了!
因此我們就要加入 log 的 middleware
node.js 的 log 套件也蠻多的, 例如 winston
不過我們今天要用的是 log4js
會選擇他其實也只是因為之前寫 java 有用過 log4j
log4js 的設定感覺起來比較相似
所以就使用它了!
再來我們就安裝一下 log4js 吧
$ npm install log4js -save  並在 app.js 中 require 進去
var log4js = require(&#39;log4js&#39;);  接著在 app.js 的前面區段加入以下程式碼:
log4js.configure({ appenders: [ { type: &#39;console&#39; }, //控制台輸出 { type: &#39;file&#39;, //文件輸出 filename: &#39;logs/access.</description>
    </item>
    
    <item>
      <title>[API-d26] - 實戰開發 - API-key</title>
      <link>https://blog.kerkerj.in/2014/10/api-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-api-key/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d26-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-api-key/</guid>
      <description>Github 參考
假設今天我們的 API 上線了，可能就會面臨到一些問題，
例如說，任何人都可以存取我們的 API
當然我們不希望任何人都可以存取，
因此我們必須加一點驗證機制在裡面，
其中一種做法是使用 Oauth token
在拿 API 資料前，先向 Oauth server 要一個 token
Oauth Server 認可身份後即會核發一個 token 給 client 端
該 token 具有時效性，6 mins ~ 30 min 不等，看怎麼實作
接著 client 端就拿該組 token 以及 API url 對 resources server 丟 request
其實我們現在在做的 API server 就是一個 resources server
因為我們提供資源
而 resources server 就會先認 token，
確保該 token 的時效性以及正確性，以及該 token 可存取的資源範圍
確認無誤後再回送正確的資料
不過在這邊我們並沒有要實作 Oauth Server
單純以一個 resources server 而言，只要認 token 是否正確</description>
    </item>
    
    <item>
      <title>[API-day25] - 實戰開發 - 處理 404 &amp; 500</title>
      <link>https://blog.kerkerj.in/2014/10/api-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%99%95%E7%90%86-404-500/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-day25-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%99%95%E7%90%86-404-500/</guid>
      <description>Github 參考
不知道大家在用 POSTMAN 對前幾天寫的 API 丟 request 有沒有遇過類似下面的情況:
Cannot GET /user/kerkerj/todoss  通常是丟錯網址時會出現的，或是 code 沒寫好會出現 500 error
這些情況是有辦法接到的，今天我們希望能夠接到後，將 message 轉成 json 格式吐回給 client
因此程式碼如下
app.js
// catch 404 and forward to error handler app.use(function(req, res, next) { var err = new Error(&#39;Not Found&#39;); err.status = 404; res.status(404).jsonp({error: &amp;quot;Not Found&amp;quot;}); next(); }); // catch 500 app.use(function(err, req, res, next) { res.status(err.status || 500).json({error: err.message}); });  基本上這兩段 code 的意思就是加入了兩個 middleware</description>
    </item>
    
    <item>
      <title>[API-d24] - 實戰開發 - 刪除 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%88%AA%E9%99%A4-todo-task-api-with-mongoose/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d24-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%88%AA%E9%99%A4-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
還記得昨天說要偷懶一下嗎 XD
因為刪除真的很簡單!
我們前面走過了新增、修改、讀取了
刪除？哪有什麼困難的呢! XD
直接看 code 吧!
routes/users.js:
// Delete a todo task router.delete(&#39;/:user_id/todos/:todo_id&#39;, function(req, res) { var user_id = req.params.user_id; var todo_id = req.params.todo_id; TODO.remove( { _id: todo_id, user_id: user_id }, function (err) { if (err) { res.status(400).json( { error: &amp;quot;delete data error&amp;quot;} ); } else { res.status(201).json( { success: &amp;quot;true&amp;quot; } ); } } ); });  非常的簡單!
先抓到 user_id, todo_id 後
使用 .remove 的方法，下 WHERE 條件，並在 callback 作處理</description>
    </item>
    
    <item>
      <title>[API-d23] - 實戰開發 - 修改 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E4%BF%AE%E6%94%B9-todo-task-api-with-mongoose/</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d23-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E4%BF%AE%E6%94%B9-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
接上篇，我們已經可以拿到 todo list 了
也可以拿到特定的 todo task
再來我們就可以編輯特定的 todo task 了對吧?
不囉唆直接進入程式碼
routes/users.js
// Update a todo task router.put(&#39;/:user_id/todos/:todo_id&#39;, function(req, res) { var user_id = req.params.user_id; var todo_id = req.params.todo_id; var data = req.body; TODO.update( { _id: todo_id, user_id: user_id }, { $set: { content: data.content } }, function (err, num, raw, results) { if (err) { res.status(400).json( { error: &amp;quot;update data error&amp;quot; } ); } else { TODO.</description>
    </item>
    
    <item>
      <title>[API-d22] - 實戰開發 - 讀取 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%AE%80%E5%8F%96-todo-task-api-with-mongoose/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d22-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E8%AE%80%E5%8F%96-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
如果有使用 MongoDB client 的話就可以搭配使用會比較有感覺
Mac 我是使用 Robomongo，算很好上手~
今天要來實作讀取的部分
讀取有分兩種，一種是讀取 list
另一種是讀取特定某個 todo task，今天兩種都會實作
首先我們先實作 get todo list
因為若要拿到特定的 todo task，需要 todo task 的 id
而我們現在還不曉得 todo task 的 id 是多少，我們只知道 user_id
因此就先從 list 下手
routes/users.js:
// Get todo list router.get(&#39;/:user_id/todos&#39;, function(req, res) { var user_id = req.params.user_id; TODO.find( {user_id: user_id}, function (err, results) { if (err) { res.status(400).json( { error: &amp;quot;can not find data&amp;quot; } ); } else { res.</description>
    </item>
    
    <item>
      <title>[API-d21] - 實戰開發 - 新增 TODO task API with mongoose</title>
      <link>https://blog.kerkerj.in/2014/10/api-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E6%96%B0%E5%A2%9E-todo-task-api-with-mongoose/</link>
      <pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d21-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E6%96%B0%E5%A2%9E-todo-task-api-with-mongoose/</guid>
      <description>Github 參考
昨天我們了解了如何拿 url params 以及 request data
今天我們就來使用他，對資料庫做存取
由於使用到資料庫，因此我們要加入資料庫的 driver
我們用的是 mongoose 套件
app.js:
// 在最上方加入 var mongoose = require(&#39;mongoose&#39;); // 在某個地方連接資料庫 var db_uri = &amp;quot;mongodb://192.168.33.10:27017/TODOs&amp;quot;; mongoose.connect(db_uri);  在這邊我是使用了虛擬機的 DB，因此是 mongodb://192.168.33.10:27017/TODOs
DB 的名稱為 TODOs
這樣在程式一跑起來時，就會連接資料庫了!
再來我們就要設定在對資料庫做 CRUD 時，所需要做的事情
首先我們先要定義 schema，
雖然 mongodb 是 schema-free，但是官方文件也有提到最好還是有固定的 schema 避免記憶體 allocate 時出現問題，而程式撰寫時邏輯也不會因此而過於複雜
這時候我們就需要 model 資料夾了，在 model 資料夾中新增一個 todos.js
裡面要放的就是 todo task 的 schema
內容如下:
models/todos.js:
&#39;use strict&#39;; var mongoose = require(&#39;mongoose&#39;); // Define our todo schema var TODOschema = new mongoose.</description>
    </item>
    
    <item>
      <title>[API-d20] - 實戰開發 - Routes 2, get params and request data</title>
      <link>https://blog.kerkerj.in/2014/10/api-d20-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-routes-2-get-params-and-request-data/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d20-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-routes-2-get-params-and-request-data/</guid>
      <description>Github 參考
接著我們要根據我們開之前寫好的 文件 來開發:
要有下列 routes
TODOs GET /user/{user_id}/todos/ POST /user/{user_id}/todos/ GET /user/{user_id}/todos/{id} PUT /user/{user_id}/todos/{id} DELETE /user/{user_id}/todos/{id}  這樣的需求其實可以用 namespace 實作，不過我們偷懶一點，直接指向 /user 就好
所以在 app.js 加入
var users = require(&#39;./routes/users&#39;); app.use(&#39;/user&#39;, users);  所以會變這樣:
var express = require(&#39;express&#39;); var app = express(); // Set routers var index = require(&#39;./routes/index&#39;); var users = require(&#39;./routes/users&#39;); app.use(&#39;/&#39;, index); app.use(&#39;/user&#39;, users); module.exports = app;  不過看起來我們缺少 routes/users.js，所以我們也來新增一個
routes/users.js 內容如下
&#39;use strict&#39;; var express = require(&#39;express&#39;); var router = express.</description>
    </item>
    
    <item>
      <title>[API-d19] - 實戰開發 - index &amp; route &amp; http status code</title>
      <link>https://blog.kerkerj.in/2014/10/api-d19-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-index-route-http-status-code/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d19-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-index-route-http-status-code/</guid>
      <description>Github 參考
昨天先把專案目錄初始化，裝完該裝的套件後
在 routes 中加入一個 index.js 檔案
&#39;use strict&#39;; var express = require(&#39;express&#39;); var router = express.Router(); router.get(&#39;/&#39;, function(req, res) { res.status(200).json({ greetings: &amp;quot;hello world!&amp;quot;}); }); module.exports = router;  建立一個 app.js 在專案根目錄中:
app.js
var express = require(&#39;express&#39;); var app = express(); var index = require(&#39;./routes/index&#39;); // Set routers app.use(&#39;/&#39;, index); module.exports = app;  然後在 bin 資料夾建立一個 server.js:
bin/server.js:
&#39;use strict&#39;; var debug = require(&#39;debug&#39;)(&#39;TODOAPI&#39;); var app = require(&#39;.</description>
    </item>
    
    <item>
      <title>[API-d18] - 實戰開發 - 套件模組</title>
      <link>https://blog.kerkerj.in/2014/10/api-d18-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%A5%97%E4%BB%B6%E6%A8%A1%E7%B5%84/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d18-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%A5%97%E4%BB%B6%E6%A8%A1%E7%B5%84/</guid>
      <description>會使用到的套件: 主體: express - web framework body-parser - parse request body 測試相關: mocha - test framework mocha-mongoose - 用來和 mocha 和 mongoose 中間做介接的套件 superagent - 拿它來丟 http request validator - 用來驗證某個物件是否為某個型別 expect.js - 類似 BDD 的語法，用來寫測試的 debug - debug package DB 相關: mongoose - mongodb orm mongodb - mongodb native driver 開發相關: nodemon - detect file change and restart server 生產環境相關: log4js - 記錄 request log  這是我的 package.json, 可以複製到專案目錄，然後下 npm install</description>
    </item>
    
    <item>
      <title>[API-d17] - 實戰開發 - 專案結構</title>
      <link>https://blog.kerkerj.in/2014/10/api-d17-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%B0%88%E6%A1%88%E7%B5%90%E6%A7%8B/</link>
      <pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d17-%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC-%E5%B0%88%E6%A1%88%E7%B5%90%E6%A7%8B/</guid>
      <description>首先我們就在虛擬機的資料夾底下，建立一個專案資料夾吧!
今天會來簡單切割一下我們的專案目錄
建立新專案目錄: $ cd /vagrant/ $ mkdir TODOAPI $ cd TODOAPI $ npm init // 輸入專案資訊 $  建立專案結構 / | - bin/ | - routes/ | - model/ | - node_modules/ | - logs/ | - config/ | - test/ | - app.js | - package.json  分別講解一下各個 folder 的工作:
bin 筆者會在 bin 資料夾底下放一個 server.js
這個 server.js 就是會專門用來啟動一個 app.js instance
routes 基本上如果了解 MVC 架構的話，routes 就是 controller 的意思，其實如果讀者本身夠了解的話，這個資料夾也可以改成 controller 也 ok，應該說，其實資料夾怎麼放都是看個人隨意即可，只是若是要模組化的話，筆者會這樣來處理一個專案結構。</description>
    </item>
    
    <item>
      <title>[API-d12] - MongoDB - Hello World! (Client-side) </title>
      <link>https://blog.kerkerj.in/2014/10/api-d12-mongodb-hello-world-client-side/</link>
      <pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d12-mongodb-hello-world-client-side/</guid>
      <description>今天要使用 Node.js 的 mongodb driver 來操作 DB
一樣先開啟虛擬機並且登入吧
會使用到的套件是:
mongodb -&amp;gt; mongodb native driver  或許有人有看過 mongoose -&amp;gt; 官網
算是 MongoDB 的 ORM，我們在這邊如果有時間的話再簡單了解一下，
現在先使用 native driver 來操作
我們在這邊就不裝全域套件了，裝在 API 專案裡面
並且使用 -save 來將相依性寫入 package.json 裏
$ cd /vagrant/API/ $ npm install mongodb -save  從虛擬機回到電腦的資料夾中，在虛擬機資料夾的 API 資料夾中，
今天我們先不和 express 搭配，因此就是純操作 node.js + mongodb module
新增一個 mongoTest.js
我們先來連線到 MongoDB，連線的方式有很多，下面是其中一種方式，
// 先宣告用的到的東西 var MongoClient = require(&#39;mongodb&#39;).MongoClient , Server = require(&#39;mongodb&#39;).Server , options = { auto_reconnection: true, poolSize: 10 }; // Server 設定 var mongoClient = new MongoClient(new Server(&#39;localhost&#39;, 27017, options)); // 開啟連線 mongoClient.</description>
    </item>
    
    <item>
      <title>[API-d10] - Express - Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/api-d10-express-hello-world/</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d10-express-hello-world/</guid>
      <description>Express - Hello World! 今天就要來安裝主角之一的 Express 了!
一樣開啟虛擬機器我應該是可以不用多說了 XD
先確認自己的 node 是不是 NVM 的 node 喲
建立專案 $ cd /vagrant/ $ mkdir API $ cd API/ $ npm init  自己輸入專案的相關內容吧，不知道的就直接按 enter 空白丟給他~
就會產生 package.json 了!
安裝 Express // 在專案目錄底下 (/vagrant/API/) $ npm install express -save  下 -save 的原因是要將 express 加入 package.json 中
離開虛擬機，其實我們也可以在虛擬機資料夾看到剛剛建立的專案了，
現在開始就可以使用自己喜歡的編輯器來開啟這個專案資料夾，我個人偏好使用 Sublime Text
要執行專案時再回終端機即可
Express Hello World! 在 API 資料夾中建立一個 app.js
內容是:
javascript var express = require(&#39;express&#39;); var app = express(); app.</description>
    </item>
    
    <item>
      <title>[API-d8] - Node.js - Hello World!</title>
      <link>https://blog.kerkerj.in/2014/10/api-d8-node.js-hello-world/</link>
      <pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/10/api-d8-node.js-hello-world/</guid>
      <description>Node.js - Hello World! 一樣先開虛擬機哦~
並且開啟終端機連進 server 裡面~
以下是 Node.js 官方網站的 web server 程式範例，我稍作小修改：
var http = require(&#39;http&#39;); http.createServer(function (req, res) { res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/plain&#39;}); res.end(&#39;Hello World\n&#39;); }).listen(1337, &#39;0.0.0.0&#39;); console.log(&#39;Server running at http://0.0.0.0:1337/&#39;);  我們先在虛擬機的資料夾建立一個子資料夾 &amp;lsquo;HelloWorld&amp;rsquo;
在 HelloWorld 資料夾裡面建立一個 app.js
內容如上，存檔。
使用終端機進入 server :
$ vagrant ssh $ cd /vagrant/HelloWorld $ node app.js  到瀏覽器輸入 http://192.168.33.10:1337/
(或者是你的 Vagrantfile 裡面設定的 private IP)
即可看到 Hello World 了！
要關掉 Server 也非常簡單，回到下指令的地方，按下 ctrl + c 即可中斷程式</description>
    </item>
    
    <item>
      <title>Event-driven I/O models and Coroutine Notes</title>
      <link>https://blog.kerkerj.in/2014/08/event-driven-i-o-models-and-coroutine-notes/</link>
      <pubDate>Mon, 18 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.kerkerj.in/2014/08/event-driven-i-o-models-and-coroutine-notes/</guid>
      <description>Event-driven I/O model 首先，聽到 Event-driven 是從 Node.js 得知，
 Node.js® is a platform built on Chrome&amp;rsquo;s JavaScript runtime for easily building fast, scalable network applications.
Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
 其實剛聽到這詞會有點陌生，我們可以先從 Victor 所寫的文章開始讀起: 淺談coroutine與gevent
裡面提到了幾種網路模型： &amp;gt; 1. 阻塞式單一行程
2. 阻塞式多行程 3. 阻塞式多行程多執行序 4. 非阻塞式事件驅動 5. 非阻塞式 coroutine
以下是各語言 event-driven 的 model</description>
    </item>
    
  </channel>
</rss>