<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on kerkerj</title>
    <link>https://blog.kerkerj.in/categories/golang/</link>
    <description>Recent content in Golang on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Nov 2020 23:03:48 +0800</lastBuildDate>
    
	<atom:link href="https://blog.kerkerj.in/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use Zap Observer</title>
      <link>https://blog.kerkerj.in/2020/11/use-zap-observer/</link>
      <pubDate>Sun, 22 Nov 2020 23:03:48 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2020/11/use-zap-observer/</guid>
      <description>If you are using zap as your logging tool, then when you write the tests, you might want to assert the function via the logs. You can use zap/observer package to make it possible.
Below is a code piece to demonstrate how it works:
package main import ( &amp;quot;testing&amp;quot; &amp;quot;go.uber.org/zap&amp;quot; &amp;quot;go.uber.org/zap/zapcore&amp;quot; &amp;quot;go.uber.org/zap/zaptest/observer&amp;quot; ) func LogHello(name string) { zap.L().Info(&amp;quot;hello: &amp;quot; + name) } func TestLogHello(t *testing.T) { // arrange core, recordedLogs := observer.</description>
    </item>
    
    <item>
      <title>Go pprof</title>
      <link>https://blog.kerkerj.in/2018/08/go-pprof/</link>
      <pubDate>Tue, 21 Aug 2018 16:12:37 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2018/08/go-pprof/</guid>
      <description>&lt;p&gt;簡單筆記一下會用到的 pprof 相關指令&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goroutine 執行相關討論</title>
      <link>https://blog.kerkerj.in/2016/10/goroutine-%E5%9F%B7%E8%A1%8C%E7%9B%B8%E9%97%9C%E8%A8%8E%E8%AB%96/</link>
      <pubDate>Tue, 25 Oct 2016 12:32:55 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/goroutine-%E5%9F%B7%E8%A1%8C%E7%9B%B8%E9%97%9C%E8%A8%8E%E8%AB%96/</guid>
      <description>幾天前在 Golang Taiwan 的 slack 裡看到了一些關於 goroutine 的討論
有人問了以下程式碼 (from http://blog.mergermarket.it/now-youre-thinking-with-channels/)
package main import &amp;quot;fmt&amp;quot; func main() { channelForInts := make(chan int) go printIntFromChannel(channelForInts) channelForInts &amp;lt;- 5 } func printIntFromChannel(channel chan int) { number := &amp;lt;-channel fmt.Println(&amp;quot;The number is:&amp;quot;, number) }  提到上述程式碼在 goplayground 上測試好幾次都會印出 The number is:5
但他自己在本機跑是怎樣執行都不會出現 5
看到這個問題第一個想到的是 sync.Waitgroup
之前剛開始學 goroutine 的概念時，就在 stackoverflow 上看到有人討論相關的議題
加個 sync.Waitgroup 就可以保證看到 goroutine 執行完後的結果。
而事實上會這樣子的原因 Go Programming Language Specification 有寫
 Program execution begins by initializing the main package and then invoking the function main.</description>
    </item>
    
    <item>
      <title>Use goconvey in projects maganged by gb</title>
      <link>https://blog.kerkerj.in/2016/10/use-goconvey-in-projects-maganged-by-gb/</link>
      <pubDate>Wed, 19 Oct 2016 00:01:04 +0800</pubDate>
      
      <guid>https://blog.kerkerj.in/2016/10/use-goconvey-in-projects-maganged-by-gb/</guid>
      <description>這是前陣子在工作上用到的
有個 golang 的專案，使用了 gb 來管理第三方套件
當時想套 goconvey 進來
但是一直搞不定執行的方式
後來在 github goconvey issue 裡找到了方式
$ cd /to/your/gb_projects $ PROJECT_DIR=`pwd` $ GOPATH=&amp;quot;$PROJECT_DIR/vendor:$PROJECT_DIR&amp;quot; goconvey -packages=1 -port 8899  這樣就會跑 web ui 出來摟
不想跑 web ui 就執行 gb test -v 就可以了&amp;hellip;上面這樣只是單純想跑 web ui 而已 XD</description>
    </item>
    
  </channel>
</rss>