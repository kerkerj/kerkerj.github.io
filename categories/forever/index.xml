<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kerkerj</title>
    <link>http://blog.kerkerj.in/categories/forever/index.xml</link>
    <description>Recent content on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="http://blog.kerkerj.in/categories/forever/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[API-d28] - 實戰開發 - 發佈 - forever</title>
      <link>http://blog.kerkerj.in/blog/api-d28---%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC---%E7%99%BC%E4%BD%88---forever/</link>
      <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/api-d28---%E5%AF%A6%E6%88%B0%E9%96%8B%E7%99%BC---%E7%99%BC%E4%BD%88---forever/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kerkerj/ithome-RestfulAPIDemo/tree/Day28&#34;&gt;Github 參考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接下來兩天要講 deploy 的部分&lt;/p&gt;

&lt;p&gt;由於 deploy 的 script 其實非常的麻煩，因此我們就不提 deploy 的 script 了&lt;/p&gt;

&lt;p&gt;我們只專注在 server 上需要什麼東西&lt;/p&gt;

&lt;p&gt;今天要來看看 &lt;code&gt;forever&lt;/code&gt; 這個套件&lt;/p&gt;

&lt;p&gt;這個套件可以幫助 nodejs 的 server 遇上無預警的 server 掛掉時&lt;/p&gt;

&lt;p&gt;會幫你自動重新啟動 nodejs 的 server&lt;/p&gt;

&lt;p&gt;也就是說&lt;/p&gt;

&lt;p&gt;假設說 nodejs 寫的 server 某個 route 有問題，&lt;/p&gt;

&lt;p&gt;送 request 後會因為某些因素造成 server error 造成程式碼 crash 時&lt;/p&gt;

&lt;p&gt;forever 的 monitor 會偵測到，並幫你自動重啟 server&lt;/p&gt;

&lt;p&gt;至少不會造成其他正常存取 server 的使用者遭遇到 server down 的問題&lt;/p&gt;

&lt;p&gt;這個套件可以選擇裝在 global 或是 project&lt;/p&gt;

&lt;p&gt;在這邊我是選擇裝成 global&lt;/p&gt;

&lt;p&gt;進到虛擬機&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$ npm install -g forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;p.s. 如果遇到問題，試著跑下面的指令看看?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown vagrant:vagrant -R ~/.npm/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下來我們就可以使用 &lt;code&gt;forever&lt;/code&gt; 這個指令了!&lt;/p&gt;

&lt;p&gt;原本我們要啟動 server 的話&lt;/p&gt;

&lt;p&gt;是要下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm start 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同義於:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node ./bin/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要改用 &lt;code&gt;forever&lt;/code&gt; 的話:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 記得先到專案根目錄
$ forever start bin/server.js
warn:    --minUptime not set. Defaulting to: 1000ms
warn:    --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000ms
info:    Forever processing file: ./bin/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然後就會被丟到背景執行了&lt;/p&gt;

&lt;p&gt;那要怎麼知道我的 server 有跑起來呢?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ forever list
info:    Forever processes running
data:        uid  command                              script        forever pid   logfile                         uptime
data:    [0] 6qhd /home/vagrant/.nvm/v0.10.32/bin/node bin/server.js 13746   13748 /home/vagrant/.forever/6qhd.log 0:0:0:47.743
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就會列出相關資訊以及 forever 自己的 log file 位置&lt;/p&gt;

&lt;p&gt;要關閉的話:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ forever stop bin/server.js
info:    Forever stopped process:
data:        uid  command                              script        forever pid   logfile                         uptime
[0] 6qhd /home/vagrant/.nvm/v0.10.32/bin/node bin/server.js 13746   14061 /home/vagrant/.forever/6qhd.log 0:0:0:6.595
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bin/server.js&lt;/code&gt; 也可以替換成 forever uid 或 pid&lt;/p&gt;

&lt;p&gt;如果要重開的話&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ forever restart bin/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;超簡單!&lt;/p&gt;

&lt;p&gt;這樣就可以不用擔心 server 突然掛掉了&amp;hellip;.嗎?&lt;/p&gt;

&lt;p&gt;錯，還是必須要監控 server 狀態&lt;/p&gt;

&lt;p&gt;畢竟，&lt;code&gt;forever&lt;/code&gt; 也是會有 bug 的&lt;/p&gt;

&lt;p&gt;所以自己的 server 自己顧&lt;/p&gt;

&lt;p&gt;真正應用在 production 環境還是必須要監控的&lt;/p&gt;

&lt;p&gt;今天就分享到這啦!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>