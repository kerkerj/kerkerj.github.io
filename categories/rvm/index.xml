<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kerkerj</title>
    <link>http://blog.kerkerj.in/categories/rvm/index.xml</link>
    <description>Recent content on kerkerj</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="http://blog.kerkerj.in/categories/rvm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Sublime Text 2] Integration With RVM and Rspec</title>
      <link>http://blog.kerkerj.in/blog/sublime-text-2-integration-with-rvm-and-rspec/</link>
      <pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/sublime-text-2-integration-with-rvm-and-rspec/</guid>
      <description>&lt;p&gt;Ruby:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/Library/Application\ Support/Sublime\ Text\ 2/Packages/Ruby/Ruby.sublime-build&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;env&amp;quot;:{
      &amp;quot;PATH&amp;quot;:&amp;quot;${HOME}/.rvm/bin:${PATH}&amp;quot;
  },
  &amp;quot;cmd&amp;quot;: [&amp;quot;rvm-auto-ruby&amp;quot;, &amp;quot;$file&amp;quot;],
  &amp;quot;file_regex&amp;quot;: &amp;quot;^(...*?):([0-9]*):?([0-9]*)&amp;quot;,
  &amp;quot;selector&amp;quot;: &amp;quot;source.ruby&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/&#34;&gt;http://rubenlaguna.com/wp/2012/12/07/sublime-text-2-rvm-rspec-take-2/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Ubuntu] RoR environment</title>
      <link>http://blog.kerkerj.in/blog/ubuntu-ror-environment/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/ubuntu-ror-environment/</guid>
      <description>

&lt;h2 id=&#34;rvm-with-ruby2-0-0-p353-rails4-0-2-ubuntu12-04-precise64-php-fpm-by-vagrant-clean-install&#34;&gt;RVM with Ruby2.0.0-p353 + Rails4.0.2 + Ubuntu12.04(precise64) + php-fpm by Vagrant(clean install)&lt;/h2&gt;

&lt;p&gt;p.s.
If you don&amp;rsquo;t use RVM, you can just follow the instruction from &lt;a href=&#34;http://www.modrails.com/documentation/Users%20guide%20Nginx.html#install_on_debian_ubuntu&#34;&gt;Passenger offcial website&lt;/a&gt;. It will be easier.
Plus, I installed all these things by Vagrant.&lt;/p&gt;

&lt;h2 id=&#34;first-thing-to-do&#34;&gt;First thing to do&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pre-setup-install-necessary-packages&#34;&gt;Pre-setup: install necessary packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install build-essential libssl-dev libpcre3-dev libncurses5-dev libreadline6-dev git vim curl libcurl4-openssl-dev libreadline6 autoconf openssl git-core zlib1g zlib1g-dev  libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev libgdbm-dev libncurses5-dev automake libtool bison subversion pkg-config libffi-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-bashrc-from-my-repo-optional&#34;&gt;Get .bashrc from my repo (Optional)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ cd
$ git clone https://github.com/jerry54010/bash-it.git
$ mv bash-it .bash_it
$ cd .bash_it
$ git checkout ubuntu
$ ln -s ~/.bash_it/.bash_profile ~/.bash_profile
$ cd
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-vimrc-from-my-repo-optional&#34;&gt;Get .vimrc from my repo (Optional)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ wget https://gist.github.com/jerry54010/8049575/raw/42ced22651fedf06174457e311d22d17f6591b65/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rvm-and-ruby-2-0-rvm-ruby-version-management&#34;&gt;RVM and Ruby 2.0 (RVM: Ruby version management)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ \curl -sSL https://get.rvm.io | bash -s stable
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile
$ rvm requirements
$ echo &#39;gem: --no-ri --no-rdoc&#39;  &amp;gt;&amp;gt; ~/.gemrc
$ rvm install 2.0.0
$ source ~/.bash_profile //if you installed my bash_profile. 
//If not, source ~/.profile

add this line to .bash_rc or .bash_profile (if you don&#39;t use my .bash_profile)
[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; # Load RVM function

$ rvm use 2.0.0 --default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we should be using ruby2.0.0 by RVM, let&amp;rsquo;s check:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rvm list
=* ruby-2.0.0-p353 [ x86_64 ] 
// =&amp;gt; - current
// =* - current &amp;amp;&amp;amp; default
//  * - default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nodejs-libv8-dev-for-javascript-and-sqlite3-sqlite3-libsqlite3-dev&#34;&gt;Nodejs, libv8-dev(for javascript) and SQLite3 (sqlite3 libsqlite3-dev)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install nodejs libv8-dev sqlite3 libsqlite3-dev 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;passenger-with-nginx&#34;&gt;Passenger with NGINX&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install passenger 
$ rvmsudo passenger-install-nginx-module
choose 2: customize
    a. src dir: /home/vagrant/nginx-1.4.4/ (where the nginx you download)
    b. I installed nginx with passenger in `/etc/nginx` (default is /opt/nginx)
    c. default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-nginx-script&#34;&gt;Get nginx script&lt;/h2&gt;

&lt;p&gt;If you use /opt/nginx as root dir, you don&amp;rsquo;t need to modify this script.
If you use /etc/nginx or else dir as root dir like me, you should modify the script.
(from &lt;a href=&#34;https://library.linode.com/web-servers/nginx/installation/ubuntu-12.04-precise-pangolin&#34;&gt;linode&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
$ sudo mv init-deb.sh /etc/init.d/nginx
$ chmod +x /etc/init.d/nginx
$ sudo /usr/sbin/update-rc.d -f nginx defaults
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nginx default public folder will be in &lt;code&gt;/etc/nginx/html&lt;/code&gt;
check nginx version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/nginx/sbin/nginx -v
nginx version: nginx/1.4.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-php5-fpm&#34;&gt;Install php5-fpm&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install php5-cli php5-common php5-fpm
$ sudo vim /etc/php5/fpm/php.ini 
//(find and change to `cgi.fix_pathinfo = 0` )
$ sudo vim /etc/php5/fpm/pool.d/www.conf 
//change: listen = 127.0.0.1:9000 to listen = /var/run/php5-fpm.sock
$ sudo vim /etc/nginx/conf/nginx.conf or /opt/nginx/conf/nginx.conf //find and modify 
location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    # NOTE: You should have &amp;quot;cgi.fix_pathinfo = 0;&amp;quot; in php.ini
    # With php5-cgi alone:
    #fastcgi_pass 127.0.0.1:9000;
    # With php5-fpm:
    fastcgi_pass unix:/var/run/php5-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    include fastcgi_params;
}
$ echo &amp;quot;&amp;lt;?php phpinfo(); ?&amp;gt;&amp;quot; | sudo tee -a /etc/nginx/html/phpinfo.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart all:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service php5-fpm restart
$ sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-rails&#34;&gt;Install rails&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install rails
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ror-environment-check&#34;&gt;RoR environment check&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -v 
ruby 2.0.0p353 (2013-11-22 revision 43784) [x86_64-linux]
$ rails -v
Rails 4.0.2
$ rake -V
rake, version 10.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you passed, you are good to go!&lt;/p&gt;

&lt;h2 id=&#34;deploy-rails-application-by-nginx&#34;&gt;Deploy Rails application by nginx:&lt;/h2&gt;

&lt;p&gt;Assume your rails application path is: &lt;code&gt;/home/vagrant/projects/subapp/&lt;/code&gt;
(by &lt;code&gt;rails new subapp&lt;/code&gt;)
then, the &lt;code&gt;/etc/nginx/conf/nginx.conf&lt;/code&gt; will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ...
    server {
        listen 80;
        server_name localhost;
        root /etc/nginx/html;

        # This block has been added.
        location ~ ^/subapp(/.*|$) {
            passenger_base_uri /subapp;
            alias /home/vagrant/projects/subapp/public$1;  # &amp;lt;-- be sure to point to &#39;public&#39;!
            passenger_app_root /home/vagrant/projects/subapp;
            passenger_enabled on;
            rails_env development; # or production
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;restart nginx, you can access the url: &lt;code&gt;http://localhost/subapp/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-mysql-and-mysql-adapter&#34;&gt;Install MySQL and Mysql adapter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get -y install mysql-server mysql-common mysql-client libmysqlclient-dev  
$ gem install mysql2 //gem mysql2 is faster than gem mysql  
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The gem you installed is placed in RVM&amp;rsquo;s ruby, if you are using RVM&amp;rsquo;s ruby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use MySQL in your rails application, remember to change the database.yml.&lt;/p&gt;

&lt;p&gt;p.s. If you want to use phpmyadmin, you can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install php5-mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;download phpmyadmin, then extract to &lt;code&gt;/etc/nginx/html/phpmyadmin&lt;/code&gt;&lt;br /&gt;
then start the server, access: &lt;code&gt;http://localhost/phpmyadmin/&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[Ubuntu] [RoR] install with rvm</title>
      <link>http://blog.kerkerj.in/blog/ubuntu-ror-install-with-rvm/</link>
      <pubDate>Fri, 27 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.kerkerj.in/blog/ubuntu-ror-install-with-rvm/</guid>
      <description>

&lt;p&gt;以下都是以 Ubuntu 11.10為操作環境&lt;/p&gt;

&lt;p&gt;主要目標為使用 rvm (Ruby Version Manager)來管理 ruby 版本並安裝 ruby 和 rails&lt;/p&gt;

&lt;p&gt;先安裝一些必要套件 ( ex. openssl, zlib1g-dev &amp;hellip;.etc. )&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安裝完基本套件後, 有兩種選擇:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;直接在系統上安裝 ruby ( sudo apt-get install ruby )&lt;/li&gt;
&lt;li&gt;使用 rvm 來管理 ruby 版本&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基本上有 rvm 來管理 ruby 版本是比較方便的, 可以隨時切換不同的 ruby 版本&lt;/p&gt;

&lt;p&gt;(不過在使用一些套件上會有一些問題需要排解, 本篇最底下有 trouble shooting)&lt;/p&gt;

&lt;h2 id=&#34;rvm&#34;&gt;RVM&lt;/h2&gt;

&lt;p&gt;安裝:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$bash &amp;lt; &amp;lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer) 
$echo &#39;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;&amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load RVM function:  &lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;指令:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rvm info -&amp;gt; 查看 rvm 做的設定&lt;/p&gt;

&lt;p&gt;rvm list known -&amp;gt; 列出所有可安裝的套件&lt;/p&gt;

&lt;p&gt;rvm list -&amp;gt; 列出目前已安裝的套件&lt;/p&gt;

&lt;p&gt;rvm install &amp;ldquo;package_name&amp;rdquo; -&amp;gt; 安裝套件&lt;/p&gt;

&lt;p&gt;rvm remove &amp;ldquo;package_name&amp;rdquo; -&amp;gt; 移除套件&lt;/p&gt;

&lt;p&gt;rvm 1.9.2 &amp;ndash;default -&amp;gt; 設定預設的 ruby 版本&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假設系統上的 ruby 版本是 1.9.1, 而我用 rvm 安裝了 ruby1.9.3&lt;/p&gt;

&lt;p&gt;那麼目前系統上的預設 ruby 版本是 1.9.3, 用 &lt;code&gt;ruby -v&lt;/code&gt; 測試看看&lt;/p&gt;

&lt;p&gt;如果要切換回系統的 ruby 版本, 則使用 &lt;code&gt;rvm system&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;要切換回來的話,則:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rvm 1.9.3&lt;/code&gt; (直接輸入有安裝過的 ruby 版號即可)&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rvm use 1.9.3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上是 rvm 的一些簡單指令, 因為今天是要安裝 ruby on rails&lt;/p&gt;

&lt;p&gt;所以先安裝 ruby 吧:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rvm pkg install openssl (詳見最後的 trouble shooting)
$rvm install 1.9.3 --with-openssl-dir=$rvm_path/usr
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gem&#34;&gt;Gem&lt;/h2&gt;

&lt;p&gt;指令:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;gem list -&amp;gt; 列出目前已安裝的套件&lt;/p&gt;

&lt;p&gt;gem install &amp;ldquo;package_name&amp;rdquo; -&amp;gt; 安裝套件不同的 ruby 版本有不同的 gem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果 rvm 裡有 1.9.1 和 1.9.3 兩個乾淨的 ruby 版本&lt;/p&gt;

&lt;p&gt;目前使用的 ruby 版本是 1.9.3&lt;/p&gt;

&lt;p&gt;則在 gem install rails 後&lt;/p&gt;

&lt;p&gt;使用 gem list 則會看到 一大堆的套件&lt;/p&gt;

&lt;p&gt;接著切換到 1.9.1 執行 gem list 後則會發現沒有任何東西&lt;/p&gt;

&lt;p&gt;在安裝 gem 套件時可以加上一些參數&lt;/p&gt;

&lt;p&gt;如: 不想要有說明文件 (通常這些東西都蠻肥大的) 就可以加上&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gem install &amp;quot;gem_name&amp;quot; --no-ri --no-rdoc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;以上是 gem 在 rvm 裡的一些概念, 因為今天是要安裝 ruby on rails&lt;/p&gt;

&lt;p&gt;所以來安裝 rails 吧:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gem install rails --no-ri --no-rdoc (不要安裝文件, 速度會比較快)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果發現用 gem 安裝套件時需要 root 權限, 表示目前使用的 ruby 版本是系統的版本&lt;/p&gt;

&lt;h2 id=&#34;gemset&#34;&gt;Gemset&lt;/h2&gt;

&lt;p&gt;rvm 提供了方便的功能 gemset, 就把它看作 gem 的分類資料夾&lt;/p&gt;

&lt;p&gt;如果說我想要在 ruby 1.9.2 底下安裝兩種 rails 版本, 又怕會衝突該怎麼辦?&lt;/p&gt;

&lt;p&gt;就可以用 gemset 了&lt;/p&gt;

&lt;p&gt;樹狀架構大概如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        rvm -&amp;gt; 1.9.1 -&amp;gt; gemset: rails-2.3.9
                                rails-3.1.1*
            -&amp;gt; 1.9.3 -&amp;gt; gemset: rails-2.3.9
                                rails-3.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以解釋為: 在 rvm 的 ruby 1.9.1 底下有兩個 gemset, 分別是 rails-2.3.9 和 rails-3.1.1&lt;/p&gt;

&lt;p&gt;指令:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rvm gemset list -&amp;gt; 查看目前建立的 gemset&lt;/p&gt;

&lt;p&gt;rvm 1.9.2@rails-3.1.1 -&amp;gt; 在 ruby 1.9.2 版本底下使用 rails-3.1.1 這個 gemset&lt;/p&gt;

&lt;p&gt;rvm gemset create &amp;ldquo;gemset_name&amp;rdquo; -&amp;gt; 建立 gemset&lt;/p&gt;

&lt;p&gt;rvm gemset use &amp;ldquo;gemset_name&amp;rdquo; -&amp;gt; 使用某個 gemset&lt;/p&gt;

&lt;p&gt;rvm gemset empty &amp;ldquo;gemset_name&amp;rdquo; -&amp;gt; 清空某個 gemset (只是清空)&lt;/p&gt;

&lt;p&gt;rvm gemset delete &amp;ldquo;gemset_name&amp;rdquo; -&amp;gt; 刪除某個 gemset以上就是關於 rvm 的二三事, 做到這邊, ruby 和 rails 套件應該就安裝完了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最後安裝資料庫的 adapter , 這裡是用 sqlite&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gem install sqlite3 --no-ri --no-rdoc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接著就可以建立第一個 rails 專案:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;mkdir project&lt;/p&gt;

&lt;p&gt;cd project&lt;/p&gt;

&lt;p&gt;rails new demo&lt;/p&gt;

&lt;p&gt;rails server連上 localhost:3000 就是起始畫面了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;trouble-shooting&#34;&gt;Trouble shooting:&lt;/h2&gt;

&lt;h3 id=&#34;error-message1-openssl-loaderror&#34;&gt;Error message1: openssl  LoadError&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (OpenSSL::SSL::SSLError)&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;Gem::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rvm pkg install openssl&lt;/p&gt;

&lt;p&gt;rvm remove 1.9.3&lt;/p&gt;

&lt;p&gt;rvm install 1.9.3 &amp;ndash;with-openssl-dir=$rvm_path/usr&lt;/p&gt;

&lt;p&gt;然後將 rvm 裡的 ssl certs 資料夾移除, 改成直接讀系統的 ssl certs&lt;/p&gt;

&lt;p&gt;rmdir $rvm_path/usr/ssl/certs&lt;/p&gt;

&lt;p&gt;ln -s /etc/ssl/certs $rvm_path/usr/ssl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;error-message2&#34;&gt;Error message2:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;when excuting the command &amp;ldquo;gem install rails&amp;rdquo;&lt;/p&gt;

&lt;p&gt;ERROR:  Loading command: install (LoadError)&lt;/p&gt;

&lt;p&gt;cannot load such file &amp;ndash; zlib&lt;/p&gt;

&lt;p&gt;ERROR:  While executing gem &amp;hellip; (NameError)&lt;/p&gt;

&lt;p&gt;uninitialized constant Gem::Commands::InstallCommand&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rvm remove 1.9.3 (depends on your ruby version, if your system also has ruby, remove it, too.)&lt;/p&gt;

&lt;p&gt;sudo apt-get install zlib1g-dev先將 rvm 的 ruby 和 system 的 ruby 移除&lt;/p&gt;

&lt;p&gt;然後安裝 zlib1g-dev&lt;/p&gt;

&lt;p&gt;安裝 system 和 rvm 的 ruby 就可以了&lt;/p&gt;

&lt;p&gt;Remove system&amp;rsquo;s ruby, and all ruby versions in rvm&lt;/p&gt;

&lt;p&gt;Install zlib1g-dev, then install ruby in system and rvm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;error-message3&#34;&gt;Error message3:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;ExecJS::RuntimeUnavailable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install nodejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Reference:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.openfoundry.org/tw/tech-column/8513-rvm-ruby-environment-version-manager&#34;&gt;RVM - Ruby enVironment (Version) Manager&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>